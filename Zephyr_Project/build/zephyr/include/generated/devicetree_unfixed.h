/*
 * Generated by gen_defines.py
 *
 * DTS input file:
 *   acrn_ehl_seco.dts.pre.tmp
 *
 * Directories with bindings:
 *   $ZEPHYR_BASE/dts/bindings
 *
 * Node dependency ordering (ordinal and path):
 *   0   /
 *   1   /aliases
 *   2   /chosen
 *   3   /ibecc
 *   4   /memory@0
 *   5   /cpus
 *   6   /cpus/cpu@0
 *   7   /ioapic@fec00000
 *   8   /pcie0
 *   9   /pcie0/i2c@8000
 *   10  /pcie0/i2c@8100
 *   11  /pcie0/i2c@a800
 *   12  /pcie0/i2c@a900
 *   13  /pcie0/i2c@aa00
 *   14  /pcie0/i2c@ab00
 *   15  /pcie0/i2c@c800
 *   16  /pcie0/i2c@c900
 *   17  /pcie0/i2c@d800
 *   18  /pcie0/i2c@d900
 *   19  /pcie0/i2c@da00
 *   20  /pcie0/i2c@db00
 *   21  /pcie0/i2c@dc00
 *   22  /pcie0/i2c@dd00
 *   23  /pcie0/i2c@de00
 *   24  /pcie0/ivshmem@800
 *   25  /pcie0/ivshmem@1000
 *   26  /pcie0/ivshmem@1800
 *   27  /pcie0/ivshmem@2000
 *   28  /pcie0/ptm_root@e000
 *   29  /pcie0/uart@8800
 *   30  /pcie0/uart@8900
 *   31  /pcie0/uart@8a00
 *   32  /pcie0/uart@8b00
 *   33  /pcie0/uart@8c00
 *   34  /pcie0/uart@8d00
 *   35  /pcie0/uart@ca00
 *   36  /pcie0/uart@f000
 *   37  /pcie0/uart@f100
 *   38  /soc
 *   39  /soc/gpio@fd690700
 *   40  /soc/gpio@fd6a0700
 *   41  /soc/gpio@fd6a0880
 *   42  /soc/gpio@fd6a0a70
 *   43  /soc/gpio@fd6b0810
 *   44  /soc/gpio@fd6b0830
 *   45  /soc/gpio@fd6b09b0
 *   46  /soc/gpio@fd6d0700
 *   47  /soc/gpio@fd6d0800
 *   48  /soc/gpio@fd6d0980
 *   49  /soc/gpio@fd6d0ad0
 *   50  /soc/gpio@fd6d0c50
 *   51  /soc/gpio@fd6e0700
 *   52  /soc/gpio@fd6e08a0
 *   53  /soc/gpio@fd6e09a0
 *   54  /soc/hpet@fed00000
 *   55  /soc/uart@2f8
 *   56  /soc/uart@3f8
 *   57  /soc/uart@fe040000
 *   58  /soc/uart@fe042000
 *   59  /soc/vtd@fed91000
 *
 * Definitions derived from these nodes in dependency order are next,
 * followed by /chosen nodes.
 */

/*
 * Devicetree node: /
 *
 * Node identifier: DT_N
 */

/* Node's full path: */
#define DT_N_PATH "/"

/* Node's name with unit-address: */
#define DT_N_FULL_NAME "/"
#define DT_N_FOREACH_CHILD(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_cpus) fn(DT_N_S_memory_0) fn(DT_N_S_ibecc) fn(DT_N_S_ioapic_fec00000) fn(DT_N_S_pcie0) fn(DT_N_S_soc)
#define DT_N_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_memory_0, __VA_ARGS__) fn(DT_N_S_ibecc, __VA_ARGS__) fn(DT_N_S_ioapic_fec00000, __VA_ARGS__) fn(DT_N_S_pcie0, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_cpus) fn(DT_N_S_memory_0) fn(DT_N_S_ioapic_fec00000) fn(DT_N_S_pcie0) fn(DT_N_S_soc) 
#define DT_N_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_memory_0, __VA_ARGS__) fn(DT_N_S_ioapic_fec00000, __VA_ARGS__) fn(DT_N_S_pcie0, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_ORD 0

/* Ordinals for what this node depends on directly: */
#define DT_N_REQUIRES_ORDS /* nothing */

/* Ordinals for what depends directly on this node: */
#define DT_N_SUPPORTS_ORDS \
	1, /* /aliases */ \
	2, /* /chosen */ \
	3, /* /ibecc */ \
	4, /* /memory@0 */ \
	5, /* /cpus */ \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */ \
	38, /* /soc */

/* Existence and alternate IDs: */
#define DT_N_EXISTS 1
#define DT_N_INST_0_acrn_ehl_seco DT_N

/* Macros for properties that are special in the specification: */
#define DT_N_REG_NUM 0
#define DT_N_IRQ_NUM 0
#define DT_N_COMPAT_MATCHES_acrn_ehl_seco 1
#define DT_N_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_P_compatible {"acrn_ehl_seco"}
#define DT_N_P_compatible_IDX_0 "acrn_ehl_seco"
#define DT_N_P_compatible_IDX_0_EXISTS 1
#define DT_N_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_LEN 1
#define DT_N_P_compatible_EXISTS 1

/*
 * Devicetree node: /aliases
 *
 * Node identifier: DT_N_S_aliases
 */

/* Node's full path: */
#define DT_N_S_aliases_PATH "/aliases"

/* Node's name with unit-address: */
#define DT_N_S_aliases_FULL_NAME "aliases"

/* Node parent (/) identifier: */
#define DT_N_S_aliases_PARENT DT_N
#define DT_N_S_aliases_FOREACH_CHILD(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_aliases_ORD 1

/* Ordinals for what this node depends on directly: */
#define DT_N_S_aliases_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_aliases_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_aliases_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_aliases_REG_NUM 0
#define DT_N_S_aliases_IRQ_NUM 0
#define DT_N_S_aliases_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_aliases_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /chosen
 *
 * Node identifier: DT_N_S_chosen
 */

/* Node's full path: */
#define DT_N_S_chosen_PATH "/chosen"

/* Node's name with unit-address: */
#define DT_N_S_chosen_FULL_NAME "chosen"

/* Node parent (/) identifier: */
#define DT_N_S_chosen_PARENT DT_N
#define DT_N_S_chosen_FOREACH_CHILD(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_chosen_ORD 2

/* Ordinals for what this node depends on directly: */
#define DT_N_S_chosen_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_chosen_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_chosen_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_chosen_REG_NUM 0
#define DT_N_S_chosen_IRQ_NUM 0
#define DT_N_S_chosen_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_chosen_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /ibecc
 *
 * Node identifier: DT_N_S_ibecc
 *
 * Binding (compatible = intel,ibecc):
 *   $ZEPHYR_BASE/dts/bindings/edac/intel,ibecc.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_ibecc_PATH "/ibecc"

/* Node's name with unit-address: */
#define DT_N_S_ibecc_FULL_NAME "ibecc"

/* Node parent (/) identifier: */
#define DT_N_S_ibecc_PARENT DT_N
#define DT_N_S_ibecc_FOREACH_CHILD(fn) 
#define DT_N_S_ibecc_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_ibecc_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_ibecc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_ibecc_ORD 3

/* Ordinals for what this node depends on directly: */
#define DT_N_S_ibecc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_ibecc_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_ibecc_EXISTS 1
#define DT_N_INST_0_intel_ibecc DT_N_S_ibecc
#define DT_N_NODELABEL_ibecc    DT_N_S_ibecc

/* Macros for properties that are special in the specification: */
#define DT_N_S_ibecc_REG_NUM 0
#define DT_N_S_ibecc_IRQ_NUM 0
#define DT_N_S_ibecc_COMPAT_MATCHES_intel_ibecc 1
#define DT_N_S_ibecc_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_ibecc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_ibecc_P_status "disabled"
#define DT_N_S_ibecc_P_status_STRING_TOKEN disabled
#define DT_N_S_ibecc_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_ibecc_P_status_ENUM_IDX 2
#define DT_N_S_ibecc_P_status_ENUM_TOKEN disabled
#define DT_N_S_ibecc_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_ibecc_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_ibecc, status, 0) \
	fn(DT_N_S_ibecc, status, 1) \
	fn(DT_N_S_ibecc, status, 2) \
	fn(DT_N_S_ibecc, status, 3) \
	fn(DT_N_S_ibecc, status, 4) \
	fn(DT_N_S_ibecc, status, 5) \
	fn(DT_N_S_ibecc, status, 6) \
	fn(DT_N_S_ibecc, status, 7)
#define DT_N_S_ibecc_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_ibecc, status, 0, __VA_ARGS__) \
	fn(DT_N_S_ibecc, status, 1, __VA_ARGS__) \
	fn(DT_N_S_ibecc, status, 2, __VA_ARGS__) \
	fn(DT_N_S_ibecc, status, 3, __VA_ARGS__) \
	fn(DT_N_S_ibecc, status, 4, __VA_ARGS__) \
	fn(DT_N_S_ibecc, status, 5, __VA_ARGS__) \
	fn(DT_N_S_ibecc, status, 6, __VA_ARGS__) \
	fn(DT_N_S_ibecc, status, 7, __VA_ARGS__)
#define DT_N_S_ibecc_P_status_EXISTS 1
#define DT_N_S_ibecc_P_compatible {"intel,ibecc"}
#define DT_N_S_ibecc_P_compatible_IDX_0 "intel,ibecc"
#define DT_N_S_ibecc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_ibecc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_ibecc, compatible, 0)
#define DT_N_S_ibecc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_ibecc, compatible, 0, __VA_ARGS__)
#define DT_N_S_ibecc_P_compatible_LEN 1
#define DT_N_S_ibecc_P_compatible_EXISTS 1
#define DT_N_S_ibecc_P_label "ibecc"
#define DT_N_S_ibecc_P_label_STRING_TOKEN ibecc
#define DT_N_S_ibecc_P_label_STRING_UPPER_TOKEN IBECC
#define DT_N_S_ibecc_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_ibecc, label, 0) \
	fn(DT_N_S_ibecc, label, 1) \
	fn(DT_N_S_ibecc, label, 2) \
	fn(DT_N_S_ibecc, label, 3) \
	fn(DT_N_S_ibecc, label, 4)
#define DT_N_S_ibecc_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_ibecc, label, 0, __VA_ARGS__) \
	fn(DT_N_S_ibecc, label, 1, __VA_ARGS__) \
	fn(DT_N_S_ibecc, label, 2, __VA_ARGS__) \
	fn(DT_N_S_ibecc, label, 3, __VA_ARGS__) \
	fn(DT_N_S_ibecc, label, 4, __VA_ARGS__)
#define DT_N_S_ibecc_P_label_EXISTS 1
#define DT_N_S_ibecc_P_wakeup_source 0
#define DT_N_S_ibecc_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /memory@0
 *
 * Node identifier: DT_N_S_memory_0
 */

/* Node's full path: */
#define DT_N_S_memory_0_PATH "/memory@0"

/* Node's name with unit-address: */
#define DT_N_S_memory_0_FULL_NAME "memory@0"

/* Node parent (/) identifier: */
#define DT_N_S_memory_0_PARENT DT_N
#define DT_N_S_memory_0_FOREACH_CHILD(fn) 
#define DT_N_S_memory_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_memory_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_memory_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_memory_0_ORD 4

/* Ordinals for what this node depends on directly: */
#define DT_N_S_memory_0_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_memory_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_memory_0_EXISTS 1
#define DT_N_NODELABEL_dram0 DT_N_S_memory_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_memory_0_REG_NUM 1
#define DT_N_S_memory_0_REG_IDX_0_EXISTS 1
#define DT_N_S_memory_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_memory_0_REG_IDX_0_VAL_SIZE 268435456 /* 0x10000000 */
#define DT_N_S_memory_0_IRQ_NUM 0
#define DT_N_S_memory_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_memory_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_memory_0_P_reg {0 /* 0x0 */, 268435456 /* 0x10000000 */}
#define DT_N_S_memory_0_P_reg_IDX_0 0
#define DT_N_S_memory_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_memory_0_P_reg_IDX_1 268435456
#define DT_N_S_memory_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_memory_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_memory_0, reg, 0) \
	fn(DT_N_S_memory_0, reg, 1)
#define DT_N_S_memory_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_memory_0, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_memory_0, reg, 1, __VA_ARGS__)
#define DT_N_S_memory_0_P_reg_EXISTS 1

/*
 * Devicetree node: /cpus
 *
 * Node identifier: DT_N_S_cpus
 */

/* Node's full path: */
#define DT_N_S_cpus_PATH "/cpus"

/* Node's name with unit-address: */
#define DT_N_S_cpus_FULL_NAME "cpus"

/* Node parent (/) identifier: */
#define DT_N_S_cpus_PARENT DT_N
#define DT_N_S_cpus_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0) 
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_ORD 5

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_SUPPORTS_ORDS \
	6, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_REG_NUM 0
#define DT_N_S_cpus_IRQ_NUM 0
#define DT_N_S_cpus_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/cpu@0
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0
 *
 * Binding (compatible = intel,elkhart_lake):
 *   $ZEPHYR_BASE/dts/bindings/cpu/intel,elkhart_lake.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_PATH "/cpus/cpu@0"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_FULL_NAME "cpu@0"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_0_PARENT DT_N_S_cpus
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_ORD 6

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_REQUIRES_ORDS \
	5, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_EXISTS 1
#define DT_N_INST_0_intel_elkhart_lake DT_N_S_cpus_S_cpu_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_cpus_S_cpu_0_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_intel_elkhart_lake 1
#define DT_N_S_cpus_S_cpu_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_P_d_cache_line_size 64
#define DT_N_S_cpus_S_cpu_0_P_d_cache_line_size_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible {"intel,elkhart_lake"}
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0 "intel,elkhart_lake"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg {0 /* 0x0 */}
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0 0
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, reg, 0)
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /ioapic@fec00000
 *
 * Node identifier: DT_N_S_ioapic_fec00000
 *
 * Binding (compatible = intel,ioapic):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/intel,ioapic.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_ioapic_fec00000_PATH "/ioapic@fec00000"

/* Node's name with unit-address: */
#define DT_N_S_ioapic_fec00000_FULL_NAME "ioapic@fec00000"

/* Node parent (/) identifier: */
#define DT_N_S_ioapic_fec00000_PARENT DT_N
#define DT_N_S_ioapic_fec00000_FOREACH_CHILD(fn) 
#define DT_N_S_ioapic_fec00000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_ioapic_fec00000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_ioapic_fec00000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_ioapic_fec00000_ORD 7

/* Ordinals for what this node depends on directly: */
#define DT_N_S_ioapic_fec00000_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_ioapic_fec00000_SUPPORTS_ORDS \
	9, /* /pcie0/i2c@8000 */ \
	10, /* /pcie0/i2c@8100 */ \
	11, /* /pcie0/i2c@a800 */ \
	12, /* /pcie0/i2c@a900 */ \
	13, /* /pcie0/i2c@aa00 */ \
	14, /* /pcie0/i2c@ab00 */ \
	15, /* /pcie0/i2c@c800 */ \
	16, /* /pcie0/i2c@c900 */ \
	17, /* /pcie0/i2c@d800 */ \
	18, /* /pcie0/i2c@d900 */ \
	19, /* /pcie0/i2c@da00 */ \
	20, /* /pcie0/i2c@db00 */ \
	21, /* /pcie0/i2c@dc00 */ \
	22, /* /pcie0/i2c@dd00 */ \
	23, /* /pcie0/i2c@de00 */ \
	29, /* /pcie0/uart@8800 */ \
	30, /* /pcie0/uart@8900 */ \
	31, /* /pcie0/uart@8a00 */ \
	32, /* /pcie0/uart@8b00 */ \
	33, /* /pcie0/uart@8c00 */ \
	34, /* /pcie0/uart@8d00 */ \
	35, /* /pcie0/uart@ca00 */ \
	36, /* /pcie0/uart@f000 */ \
	37, /* /pcie0/uart@f100 */ \
	39, /* /soc/gpio@fd690700 */ \
	40, /* /soc/gpio@fd6a0700 */ \
	41, /* /soc/gpio@fd6a0880 */ \
	42, /* /soc/gpio@fd6a0a70 */ \
	43, /* /soc/gpio@fd6b0810 */ \
	44, /* /soc/gpio@fd6b0830 */ \
	45, /* /soc/gpio@fd6b09b0 */ \
	46, /* /soc/gpio@fd6d0700 */ \
	47, /* /soc/gpio@fd6d0800 */ \
	48, /* /soc/gpio@fd6d0980 */ \
	49, /* /soc/gpio@fd6d0ad0 */ \
	50, /* /soc/gpio@fd6d0c50 */ \
	51, /* /soc/gpio@fd6e0700 */ \
	52, /* /soc/gpio@fd6e08a0 */ \
	53, /* /soc/gpio@fd6e09a0 */ \
	54, /* /soc/hpet@fed00000 */ \
	55, /* /soc/uart@2f8 */ \
	56, /* /soc/uart@3f8 */ \
	57, /* /soc/uart@fe040000 */ \
	58, /* /soc/uart@fe042000 */

/* Existence and alternate IDs: */
#define DT_N_S_ioapic_fec00000_EXISTS 1
#define DT_N_INST_0_intel_ioapic DT_N_S_ioapic_fec00000
#define DT_N_NODELABEL_intc      DT_N_S_ioapic_fec00000

/* Macros for properties that are special in the specification: */
#define DT_N_S_ioapic_fec00000_REG_NUM 1
#define DT_N_S_ioapic_fec00000_REG_IDX_0_EXISTS 1
#define DT_N_S_ioapic_fec00000_REG_IDX_0_VAL_ADDRESS 4273995776 /* 0xfec00000 */
#define DT_N_S_ioapic_fec00000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_ioapic_fec00000_IRQ_NUM 0
#define DT_N_S_ioapic_fec00000_COMPAT_MATCHES_intel_ioapic 1
#define DT_N_S_ioapic_fec00000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_ioapic_fec00000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_ioapic_fec00000_P_reg {4273995776 /* 0xfec00000 */, 4096 /* 0x1000 */}
#define DT_N_S_ioapic_fec00000_P_reg_IDX_0 4273995776
#define DT_N_S_ioapic_fec00000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_ioapic_fec00000_P_reg_IDX_1 4096
#define DT_N_S_ioapic_fec00000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_ioapic_fec00000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_ioapic_fec00000, reg, 0) \
	fn(DT_N_S_ioapic_fec00000, reg, 1)
#define DT_N_S_ioapic_fec00000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_ioapic_fec00000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_ioapic_fec00000, reg, 1, __VA_ARGS__)
#define DT_N_S_ioapic_fec00000_P_reg_EXISTS 1
#define DT_N_S_ioapic_fec00000_P_interrupt_controller 1
#define DT_N_S_ioapic_fec00000_P_interrupt_controller_EXISTS 1
#define DT_N_S_ioapic_fec00000_P_compatible {"intel,ioapic"}
#define DT_N_S_ioapic_fec00000_P_compatible_IDX_0 "intel,ioapic"
#define DT_N_S_ioapic_fec00000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_ioapic_fec00000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_ioapic_fec00000, compatible, 0)
#define DT_N_S_ioapic_fec00000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_ioapic_fec00000, compatible, 0, __VA_ARGS__)
#define DT_N_S_ioapic_fec00000_P_compatible_LEN 1
#define DT_N_S_ioapic_fec00000_P_compatible_EXISTS 1
#define DT_N_S_ioapic_fec00000_P_wakeup_source 0
#define DT_N_S_ioapic_fec00000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0
 *
 * Node identifier: DT_N_S_pcie0
 *
 * Binding (compatible = intel,pcie):
 *   $ZEPHYR_BASE/dts/bindings/pcie/host/intel,pcie.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_PATH "/pcie0"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_FULL_NAME "pcie0"

/* Node parent (/) identifier: */
#define DT_N_S_pcie0_PARENT DT_N
#define DT_N_S_pcie0_FOREACH_CHILD(fn) fn(DT_N_S_pcie0_S_ptm_root_e000) fn(DT_N_S_pcie0_S_uart_f000) fn(DT_N_S_pcie0_S_uart_f100) fn(DT_N_S_pcie0_S_uart_ca00) fn(DT_N_S_pcie0_S_uart_8800) fn(DT_N_S_pcie0_S_uart_8900) fn(DT_N_S_pcie0_S_uart_8a00) fn(DT_N_S_pcie0_S_uart_8b00) fn(DT_N_S_pcie0_S_uart_8c00) fn(DT_N_S_pcie0_S_uart_8d00) fn(DT_N_S_pcie0_S_i2c_a800) fn(DT_N_S_pcie0_S_i2c_a900) fn(DT_N_S_pcie0_S_i2c_aa00) fn(DT_N_S_pcie0_S_i2c_ab00) fn(DT_N_S_pcie0_S_i2c_c800) fn(DT_N_S_pcie0_S_i2c_c900) fn(DT_N_S_pcie0_S_i2c_8000) fn(DT_N_S_pcie0_S_i2c_8100) fn(DT_N_S_pcie0_S_i2c_d800) fn(DT_N_S_pcie0_S_i2c_d900) fn(DT_N_S_pcie0_S_i2c_da00) fn(DT_N_S_pcie0_S_i2c_db00) fn(DT_N_S_pcie0_S_i2c_dc00) fn(DT_N_S_pcie0_S_i2c_dd00) fn(DT_N_S_pcie0_S_i2c_de00) fn(DT_N_S_pcie0_S_ivshmem_800) fn(DT_N_S_pcie0_S_ivshmem_1000) fn(DT_N_S_pcie0_S_ivshmem_1800) fn(DT_N_S_pcie0_S_ivshmem_2000)
#define DT_N_S_pcie0_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_pcie0_S_ptm_root_e000, __VA_ARGS__) fn(DT_N_S_pcie0_S_uart_f000, __VA_ARGS__) fn(DT_N_S_pcie0_S_uart_f100, __VA_ARGS__) fn(DT_N_S_pcie0_S_uart_ca00, __VA_ARGS__) fn(DT_N_S_pcie0_S_uart_8800, __VA_ARGS__) fn(DT_N_S_pcie0_S_uart_8900, __VA_ARGS__) fn(DT_N_S_pcie0_S_uart_8a00, __VA_ARGS__) fn(DT_N_S_pcie0_S_uart_8b00, __VA_ARGS__) fn(DT_N_S_pcie0_S_uart_8c00, __VA_ARGS__) fn(DT_N_S_pcie0_S_uart_8d00, __VA_ARGS__) fn(DT_N_S_pcie0_S_i2c_a800, __VA_ARGS__) fn(DT_N_S_pcie0_S_i2c_a900, __VA_ARGS__) fn(DT_N_S_pcie0_S_i2c_aa00, __VA_ARGS__) fn(DT_N_S_pcie0_S_i2c_ab00, __VA_ARGS__) fn(DT_N_S_pcie0_S_i2c_c800, __VA_ARGS__) fn(DT_N_S_pcie0_S_i2c_c900, __VA_ARGS__) fn(DT_N_S_pcie0_S_i2c_8000, __VA_ARGS__) fn(DT_N_S_pcie0_S_i2c_8100, __VA_ARGS__) fn(DT_N_S_pcie0_S_i2c_d800, __VA_ARGS__) fn(DT_N_S_pcie0_S_i2c_d900, __VA_ARGS__) fn(DT_N_S_pcie0_S_i2c_da00, __VA_ARGS__) fn(DT_N_S_pcie0_S_i2c_db00, __VA_ARGS__) fn(DT_N_S_pcie0_S_i2c_dc00, __VA_ARGS__) fn(DT_N_S_pcie0_S_i2c_dd00, __VA_ARGS__) fn(DT_N_S_pcie0_S_i2c_de00, __VA_ARGS__) fn(DT_N_S_pcie0_S_ivshmem_800, __VA_ARGS__) fn(DT_N_S_pcie0_S_ivshmem_1000, __VA_ARGS__) fn(DT_N_S_pcie0_S_ivshmem_1800, __VA_ARGS__) fn(DT_N_S_pcie0_S_ivshmem_2000, __VA_ARGS__)
#define DT_N_S_pcie0_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_pcie0_S_ptm_root_e000) fn(DT_N_S_pcie0_S_ivshmem_800) fn(DT_N_S_pcie0_S_ivshmem_1000) fn(DT_N_S_pcie0_S_ivshmem_1800) fn(DT_N_S_pcie0_S_ivshmem_2000) 
#define DT_N_S_pcie0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_pcie0_S_ptm_root_e000, __VA_ARGS__) fn(DT_N_S_pcie0_S_ivshmem_800, __VA_ARGS__) fn(DT_N_S_pcie0_S_ivshmem_1000, __VA_ARGS__) fn(DT_N_S_pcie0_S_ivshmem_1800, __VA_ARGS__) fn(DT_N_S_pcie0_S_ivshmem_2000, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_ORD 8

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_SUPPORTS_ORDS \
	9, /* /pcie0/i2c@8000 */ \
	10, /* /pcie0/i2c@8100 */ \
	11, /* /pcie0/i2c@a800 */ \
	12, /* /pcie0/i2c@a900 */ \
	13, /* /pcie0/i2c@aa00 */ \
	14, /* /pcie0/i2c@ab00 */ \
	15, /* /pcie0/i2c@c800 */ \
	16, /* /pcie0/i2c@c900 */ \
	17, /* /pcie0/i2c@d800 */ \
	18, /* /pcie0/i2c@d900 */ \
	19, /* /pcie0/i2c@da00 */ \
	20, /* /pcie0/i2c@db00 */ \
	21, /* /pcie0/i2c@dc00 */ \
	22, /* /pcie0/i2c@dd00 */ \
	23, /* /pcie0/i2c@de00 */ \
	24, /* /pcie0/ivshmem@800 */ \
	25, /* /pcie0/ivshmem@1000 */ \
	26, /* /pcie0/ivshmem@1800 */ \
	27, /* /pcie0/ivshmem@2000 */ \
	28, /* /pcie0/ptm_root@e000 */ \
	29, /* /pcie0/uart@8800 */ \
	30, /* /pcie0/uart@8900 */ \
	31, /* /pcie0/uart@8a00 */ \
	32, /* /pcie0/uart@8b00 */ \
	33, /* /pcie0/uart@8c00 */ \
	34, /* /pcie0/uart@8d00 */ \
	35, /* /pcie0/uart@ca00 */ \
	36, /* /pcie0/uart@f000 */ \
	37, /* /pcie0/uart@f100 */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_EXISTS 1
#define DT_N_INST_0_intel_pcie DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_REG_NUM 0
#define DT_N_S_pcie0_IRQ_NUM 0
#define DT_N_S_pcie0_COMPAT_MATCHES_intel_pcie 1
#define DT_N_S_pcie0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_P_compatible {"intel,pcie"}
#define DT_N_S_pcie0_P_compatible_IDX_0 "intel,pcie"
#define DT_N_S_pcie0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0, compatible, 0)
#define DT_N_S_pcie0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_P_compatible_LEN 1
#define DT_N_S_pcie0_P_compatible_EXISTS 1
#define DT_N_S_pcie0_P_label "PCIE_0"
#define DT_N_S_pcie0_P_label_STRING_TOKEN PCIE_0
#define DT_N_S_pcie0_P_label_STRING_UPPER_TOKEN PCIE_0
#define DT_N_S_pcie0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0, label, 0) \
	fn(DT_N_S_pcie0, label, 1) \
	fn(DT_N_S_pcie0, label, 2) \
	fn(DT_N_S_pcie0, label, 3) \
	fn(DT_N_S_pcie0, label, 4) \
	fn(DT_N_S_pcie0, label, 5)
#define DT_N_S_pcie0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0, label, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0, label, 5, __VA_ARGS__)
#define DT_N_S_pcie0_P_label_EXISTS 1
#define DT_N_S_pcie0_P_wakeup_source 0
#define DT_N_S_pcie0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/i2c@8000
 *
 * Node identifier: DT_N_S_pcie0_S_i2c_8000
 *
 * Binding (compatible = snps,designware-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/snps,designware-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_i2c_8000_PATH "/pcie0/i2c@8000"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_i2c_8000_FULL_NAME "i2c@8000"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_i2c_8000_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_i2c_8000_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_i2c_8000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_i2c_8000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_i2c_8000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_i2c_8000_ORD 9

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_i2c_8000_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_i2c_8000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_i2c_8000_EXISTS 1
#define DT_N_INST_6_snps_designware_i2c DT_N_S_pcie0_S_i2c_8000
#define DT_N_NODELABEL_i2c6             DT_N_S_pcie0_S_i2c_8000

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_i2c_8000_BUS_pcie 1
#define DT_N_S_pcie0_S_i2c_8000_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_i2c_8000_REG_NUM 1
#define DT_N_S_pcie0_S_i2c_8000_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8000_REG_IDX_0_VAL_ADDRESS 32768 /* 0x8000 */
#define DT_N_S_pcie0_S_i2c_8000_REG_IDX_0_VAL_SIZE 1262780550 /* 0x4b448086 */
#define DT_N_S_pcie0_S_i2c_8000_IRQ_NUM 1
#define DT_N_S_pcie0_S_i2c_8000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8000_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_i2c_8000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8000_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_i2c_8000_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_i2c_8000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8000_COMPAT_MATCHES_snps_designware_i2c 1
#define DT_N_S_pcie0_S_i2c_8000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_i2c_8000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_i2c_8000_P_reg {32768 /* 0x8000 */, 1262780550 /* 0x4b448086 */}
#define DT_N_S_pcie0_S_i2c_8000_P_reg_IDX_0 32768
#define DT_N_S_pcie0_S_i2c_8000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8000_P_reg_IDX_1 1262780550
#define DT_N_S_pcie0_S_i2c_8000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_8000, reg, 0) \
	fn(DT_N_S_pcie0_S_i2c_8000, reg, 1)
#define DT_N_S_pcie0_S_i2c_8000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_8000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8000, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_8000_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8000_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_i2c_8000_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_i2c_8000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8000_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_i2c_8000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8000_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_i2c_8000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_8000, interrupts, 0) \
	fn(DT_N_S_pcie0_S_i2c_8000, interrupts, 1) \
	fn(DT_N_S_pcie0_S_i2c_8000, interrupts, 2)
#define DT_N_S_pcie0_S_i2c_8000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_8000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8000, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8000, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_8000_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8000_P_clock_frequency 100000
#define DT_N_S_pcie0_S_i2c_8000_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8000_P_label "I2C_6"
#define DT_N_S_pcie0_S_i2c_8000_P_label_STRING_TOKEN I2C_6
#define DT_N_S_pcie0_S_i2c_8000_P_label_STRING_UPPER_TOKEN I2C_6
#define DT_N_S_pcie0_S_i2c_8000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_8000, label, 0) \
	fn(DT_N_S_pcie0_S_i2c_8000, label, 1) \
	fn(DT_N_S_pcie0_S_i2c_8000, label, 2) \
	fn(DT_N_S_pcie0_S_i2c_8000, label, 3) \
	fn(DT_N_S_pcie0_S_i2c_8000, label, 4)
#define DT_N_S_pcie0_S_i2c_8000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_8000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8000, label, 4, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_8000_P_label_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8000_P_status "disabled"
#define DT_N_S_pcie0_S_i2c_8000_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_8000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_8000_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_i2c_8000_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_8000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_8000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_8000, status, 0) \
	fn(DT_N_S_pcie0_S_i2c_8000, status, 1) \
	fn(DT_N_S_pcie0_S_i2c_8000, status, 2) \
	fn(DT_N_S_pcie0_S_i2c_8000, status, 3) \
	fn(DT_N_S_pcie0_S_i2c_8000, status, 4) \
	fn(DT_N_S_pcie0_S_i2c_8000, status, 5) \
	fn(DT_N_S_pcie0_S_i2c_8000, status, 6) \
	fn(DT_N_S_pcie0_S_i2c_8000, status, 7)
#define DT_N_S_pcie0_S_i2c_8000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_8000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8000, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_8000_P_status_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8000_P_compatible {"snps,designware-i2c"}
#define DT_N_S_pcie0_S_i2c_8000_P_compatible_IDX_0 "snps,designware-i2c"
#define DT_N_S_pcie0_S_i2c_8000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_8000, compatible, 0)
#define DT_N_S_pcie0_S_i2c_8000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_8000, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_8000_P_compatible_LEN 1
#define DT_N_S_pcie0_S_i2c_8000_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8000_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_8000_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_8000_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_8000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8000_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_i2c_8000_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8000_P_wakeup_source 0
#define DT_N_S_pcie0_S_i2c_8000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/i2c@8100
 *
 * Node identifier: DT_N_S_pcie0_S_i2c_8100
 *
 * Binding (compatible = snps,designware-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/snps,designware-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_i2c_8100_PATH "/pcie0/i2c@8100"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_i2c_8100_FULL_NAME "i2c@8100"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_i2c_8100_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_i2c_8100_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_i2c_8100_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_i2c_8100_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_i2c_8100_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_i2c_8100_ORD 10

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_i2c_8100_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_i2c_8100_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_i2c_8100_EXISTS 1
#define DT_N_INST_7_snps_designware_i2c DT_N_S_pcie0_S_i2c_8100
#define DT_N_NODELABEL_i2c7             DT_N_S_pcie0_S_i2c_8100

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_i2c_8100_BUS_pcie 1
#define DT_N_S_pcie0_S_i2c_8100_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_i2c_8100_REG_NUM 1
#define DT_N_S_pcie0_S_i2c_8100_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8100_REG_IDX_0_VAL_ADDRESS 33024 /* 0x8100 */
#define DT_N_S_pcie0_S_i2c_8100_REG_IDX_0_VAL_SIZE 1262846086 /* 0x4b458086 */
#define DT_N_S_pcie0_S_i2c_8100_IRQ_NUM 1
#define DT_N_S_pcie0_S_i2c_8100_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8100_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_i2c_8100_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8100_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8100_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_i2c_8100_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8100_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8100_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_i2c_8100_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8100_COMPAT_MATCHES_snps_designware_i2c 1
#define DT_N_S_pcie0_S_i2c_8100_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_i2c_8100_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_i2c_8100_P_reg {33024 /* 0x8100 */, 1262846086 /* 0x4b458086 */}
#define DT_N_S_pcie0_S_i2c_8100_P_reg_IDX_0 33024
#define DT_N_S_pcie0_S_i2c_8100_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8100_P_reg_IDX_1 1262846086
#define DT_N_S_pcie0_S_i2c_8100_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8100_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_8100, reg, 0) \
	fn(DT_N_S_pcie0_S_i2c_8100, reg, 1)
#define DT_N_S_pcie0_S_i2c_8100_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_8100, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8100, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_8100_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8100_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_i2c_8100_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_i2c_8100_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8100_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_i2c_8100_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8100_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_i2c_8100_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8100_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_8100, interrupts, 0) \
	fn(DT_N_S_pcie0_S_i2c_8100, interrupts, 1) \
	fn(DT_N_S_pcie0_S_i2c_8100, interrupts, 2)
#define DT_N_S_pcie0_S_i2c_8100_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_8100, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8100, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8100, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_8100_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8100_P_clock_frequency 100000
#define DT_N_S_pcie0_S_i2c_8100_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8100_P_label "I2C_7"
#define DT_N_S_pcie0_S_i2c_8100_P_label_STRING_TOKEN I2C_7
#define DT_N_S_pcie0_S_i2c_8100_P_label_STRING_UPPER_TOKEN I2C_7
#define DT_N_S_pcie0_S_i2c_8100_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_8100, label, 0) \
	fn(DT_N_S_pcie0_S_i2c_8100, label, 1) \
	fn(DT_N_S_pcie0_S_i2c_8100, label, 2) \
	fn(DT_N_S_pcie0_S_i2c_8100, label, 3) \
	fn(DT_N_S_pcie0_S_i2c_8100, label, 4)
#define DT_N_S_pcie0_S_i2c_8100_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_8100, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8100, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8100, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8100, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8100, label, 4, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_8100_P_label_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8100_P_status "disabled"
#define DT_N_S_pcie0_S_i2c_8100_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_8100_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_8100_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_i2c_8100_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_8100_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_8100_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_8100, status, 0) \
	fn(DT_N_S_pcie0_S_i2c_8100, status, 1) \
	fn(DT_N_S_pcie0_S_i2c_8100, status, 2) \
	fn(DT_N_S_pcie0_S_i2c_8100, status, 3) \
	fn(DT_N_S_pcie0_S_i2c_8100, status, 4) \
	fn(DT_N_S_pcie0_S_i2c_8100, status, 5) \
	fn(DT_N_S_pcie0_S_i2c_8100, status, 6) \
	fn(DT_N_S_pcie0_S_i2c_8100, status, 7)
#define DT_N_S_pcie0_S_i2c_8100_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_8100, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8100, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8100, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8100, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8100, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8100, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8100, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_8100, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_8100_P_status_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8100_P_compatible {"snps,designware-i2c"}
#define DT_N_S_pcie0_S_i2c_8100_P_compatible_IDX_0 "snps,designware-i2c"
#define DT_N_S_pcie0_S_i2c_8100_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8100_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_8100, compatible, 0)
#define DT_N_S_pcie0_S_i2c_8100_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_8100, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_8100_P_compatible_LEN 1
#define DT_N_S_pcie0_S_i2c_8100_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8100_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_8100_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_8100_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_8100_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8100_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_i2c_8100_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_i2c_8100_P_wakeup_source 0
#define DT_N_S_pcie0_S_i2c_8100_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/i2c@a800
 *
 * Node identifier: DT_N_S_pcie0_S_i2c_a800
 *
 * Binding (compatible = snps,designware-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/snps,designware-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_i2c_a800_PATH "/pcie0/i2c@a800"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_i2c_a800_FULL_NAME "i2c@a800"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_i2c_a800_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_i2c_a800_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_i2c_a800_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_i2c_a800_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_i2c_a800_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_i2c_a800_ORD 11

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_i2c_a800_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_i2c_a800_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_i2c_a800_EXISTS 1
#define DT_N_INST_0_snps_designware_i2c DT_N_S_pcie0_S_i2c_a800
#define DT_N_NODELABEL_i2c0             DT_N_S_pcie0_S_i2c_a800

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_i2c_a800_BUS_pcie 1
#define DT_N_S_pcie0_S_i2c_a800_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_i2c_a800_REG_NUM 1
#define DT_N_S_pcie0_S_i2c_a800_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a800_REG_IDX_0_VAL_ADDRESS 43008 /* 0xa800 */
#define DT_N_S_pcie0_S_i2c_a800_REG_IDX_0_VAL_SIZE 1266188422 /* 0x4b788086 */
#define DT_N_S_pcie0_S_i2c_a800_IRQ_NUM 1
#define DT_N_S_pcie0_S_i2c_a800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a800_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_i2c_a800_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a800_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_i2c_a800_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a800_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_i2c_a800_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a800_COMPAT_MATCHES_snps_designware_i2c 1
#define DT_N_S_pcie0_S_i2c_a800_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_i2c_a800_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_i2c_a800_P_reg {43008 /* 0xa800 */, 1266188422 /* 0x4b788086 */}
#define DT_N_S_pcie0_S_i2c_a800_P_reg_IDX_0 43008
#define DT_N_S_pcie0_S_i2c_a800_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a800_P_reg_IDX_1 1266188422
#define DT_N_S_pcie0_S_i2c_a800_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a800_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_a800, reg, 0) \
	fn(DT_N_S_pcie0_S_i2c_a800, reg, 1)
#define DT_N_S_pcie0_S_i2c_a800_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_a800, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a800, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_a800_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a800_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_i2c_a800_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_i2c_a800_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a800_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_i2c_a800_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a800_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_i2c_a800_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a800_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_a800, interrupts, 0) \
	fn(DT_N_S_pcie0_S_i2c_a800, interrupts, 1) \
	fn(DT_N_S_pcie0_S_i2c_a800, interrupts, 2)
#define DT_N_S_pcie0_S_i2c_a800_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_a800, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a800, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a800, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_a800_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a800_P_clock_frequency 100000
#define DT_N_S_pcie0_S_i2c_a800_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a800_P_label "I2C_0"
#define DT_N_S_pcie0_S_i2c_a800_P_label_STRING_TOKEN I2C_0
#define DT_N_S_pcie0_S_i2c_a800_P_label_STRING_UPPER_TOKEN I2C_0
#define DT_N_S_pcie0_S_i2c_a800_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_a800, label, 0) \
	fn(DT_N_S_pcie0_S_i2c_a800, label, 1) \
	fn(DT_N_S_pcie0_S_i2c_a800, label, 2) \
	fn(DT_N_S_pcie0_S_i2c_a800, label, 3) \
	fn(DT_N_S_pcie0_S_i2c_a800, label, 4)
#define DT_N_S_pcie0_S_i2c_a800_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_a800, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a800, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a800, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a800, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a800, label, 4, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_a800_P_label_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a800_P_status "disabled"
#define DT_N_S_pcie0_S_i2c_a800_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_a800_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_a800_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_i2c_a800_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_a800_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_a800_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_a800, status, 0) \
	fn(DT_N_S_pcie0_S_i2c_a800, status, 1) \
	fn(DT_N_S_pcie0_S_i2c_a800, status, 2) \
	fn(DT_N_S_pcie0_S_i2c_a800, status, 3) \
	fn(DT_N_S_pcie0_S_i2c_a800, status, 4) \
	fn(DT_N_S_pcie0_S_i2c_a800, status, 5) \
	fn(DT_N_S_pcie0_S_i2c_a800, status, 6) \
	fn(DT_N_S_pcie0_S_i2c_a800, status, 7)
#define DT_N_S_pcie0_S_i2c_a800_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_a800, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a800, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a800, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a800, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a800, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a800, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a800, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a800, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_a800_P_status_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a800_P_compatible {"snps,designware-i2c"}
#define DT_N_S_pcie0_S_i2c_a800_P_compatible_IDX_0 "snps,designware-i2c"
#define DT_N_S_pcie0_S_i2c_a800_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a800_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_a800, compatible, 0)
#define DT_N_S_pcie0_S_i2c_a800_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_a800, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_a800_P_compatible_LEN 1
#define DT_N_S_pcie0_S_i2c_a800_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a800_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_a800_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_a800_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_a800_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a800_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_i2c_a800_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a800_P_wakeup_source 0
#define DT_N_S_pcie0_S_i2c_a800_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/i2c@a900
 *
 * Node identifier: DT_N_S_pcie0_S_i2c_a900
 *
 * Binding (compatible = snps,designware-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/snps,designware-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_i2c_a900_PATH "/pcie0/i2c@a900"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_i2c_a900_FULL_NAME "i2c@a900"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_i2c_a900_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_i2c_a900_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_i2c_a900_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_i2c_a900_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_i2c_a900_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_i2c_a900_ORD 12

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_i2c_a900_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_i2c_a900_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_i2c_a900_EXISTS 1
#define DT_N_INST_1_snps_designware_i2c DT_N_S_pcie0_S_i2c_a900
#define DT_N_NODELABEL_i2c1             DT_N_S_pcie0_S_i2c_a900

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_i2c_a900_BUS_pcie 1
#define DT_N_S_pcie0_S_i2c_a900_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_i2c_a900_REG_NUM 1
#define DT_N_S_pcie0_S_i2c_a900_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a900_REG_IDX_0_VAL_ADDRESS 43264 /* 0xa900 */
#define DT_N_S_pcie0_S_i2c_a900_REG_IDX_0_VAL_SIZE 1266253958 /* 0x4b798086 */
#define DT_N_S_pcie0_S_i2c_a900_IRQ_NUM 1
#define DT_N_S_pcie0_S_i2c_a900_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a900_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_i2c_a900_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a900_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a900_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_i2c_a900_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a900_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a900_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_i2c_a900_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a900_COMPAT_MATCHES_snps_designware_i2c 1
#define DT_N_S_pcie0_S_i2c_a900_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_i2c_a900_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_i2c_a900_P_reg {43264 /* 0xa900 */, 1266253958 /* 0x4b798086 */}
#define DT_N_S_pcie0_S_i2c_a900_P_reg_IDX_0 43264
#define DT_N_S_pcie0_S_i2c_a900_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a900_P_reg_IDX_1 1266253958
#define DT_N_S_pcie0_S_i2c_a900_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a900_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_a900, reg, 0) \
	fn(DT_N_S_pcie0_S_i2c_a900, reg, 1)
#define DT_N_S_pcie0_S_i2c_a900_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_a900, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a900, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_a900_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a900_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_i2c_a900_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_i2c_a900_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a900_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_i2c_a900_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a900_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_i2c_a900_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a900_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_a900, interrupts, 0) \
	fn(DT_N_S_pcie0_S_i2c_a900, interrupts, 1) \
	fn(DT_N_S_pcie0_S_i2c_a900, interrupts, 2)
#define DT_N_S_pcie0_S_i2c_a900_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_a900, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a900, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a900, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_a900_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a900_P_clock_frequency 100000
#define DT_N_S_pcie0_S_i2c_a900_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a900_P_label "I2C_1"
#define DT_N_S_pcie0_S_i2c_a900_P_label_STRING_TOKEN I2C_1
#define DT_N_S_pcie0_S_i2c_a900_P_label_STRING_UPPER_TOKEN I2C_1
#define DT_N_S_pcie0_S_i2c_a900_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_a900, label, 0) \
	fn(DT_N_S_pcie0_S_i2c_a900, label, 1) \
	fn(DT_N_S_pcie0_S_i2c_a900, label, 2) \
	fn(DT_N_S_pcie0_S_i2c_a900, label, 3) \
	fn(DT_N_S_pcie0_S_i2c_a900, label, 4)
#define DT_N_S_pcie0_S_i2c_a900_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_a900, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a900, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a900, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a900, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a900, label, 4, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_a900_P_label_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a900_P_status "disabled"
#define DT_N_S_pcie0_S_i2c_a900_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_a900_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_a900_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_i2c_a900_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_a900_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_a900_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_a900, status, 0) \
	fn(DT_N_S_pcie0_S_i2c_a900, status, 1) \
	fn(DT_N_S_pcie0_S_i2c_a900, status, 2) \
	fn(DT_N_S_pcie0_S_i2c_a900, status, 3) \
	fn(DT_N_S_pcie0_S_i2c_a900, status, 4) \
	fn(DT_N_S_pcie0_S_i2c_a900, status, 5) \
	fn(DT_N_S_pcie0_S_i2c_a900, status, 6) \
	fn(DT_N_S_pcie0_S_i2c_a900, status, 7)
#define DT_N_S_pcie0_S_i2c_a900_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_a900, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a900, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a900, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a900, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a900, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a900, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a900, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_a900, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_a900_P_status_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a900_P_compatible {"snps,designware-i2c"}
#define DT_N_S_pcie0_S_i2c_a900_P_compatible_IDX_0 "snps,designware-i2c"
#define DT_N_S_pcie0_S_i2c_a900_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a900_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_a900, compatible, 0)
#define DT_N_S_pcie0_S_i2c_a900_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_a900, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_a900_P_compatible_LEN 1
#define DT_N_S_pcie0_S_i2c_a900_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a900_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_a900_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_a900_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_a900_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a900_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_i2c_a900_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_i2c_a900_P_wakeup_source 0
#define DT_N_S_pcie0_S_i2c_a900_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/i2c@aa00
 *
 * Node identifier: DT_N_S_pcie0_S_i2c_aa00
 *
 * Binding (compatible = snps,designware-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/snps,designware-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_i2c_aa00_PATH "/pcie0/i2c@aa00"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_i2c_aa00_FULL_NAME "i2c@aa00"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_i2c_aa00_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_i2c_aa00_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_i2c_aa00_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_i2c_aa00_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_i2c_aa00_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_i2c_aa00_ORD 13

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_i2c_aa00_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_i2c_aa00_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_i2c_aa00_EXISTS 1
#define DT_N_INST_2_snps_designware_i2c DT_N_S_pcie0_S_i2c_aa00
#define DT_N_NODELABEL_i2c2             DT_N_S_pcie0_S_i2c_aa00

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_i2c_aa00_BUS_pcie 1
#define DT_N_S_pcie0_S_i2c_aa00_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_i2c_aa00_REG_NUM 1
#define DT_N_S_pcie0_S_i2c_aa00_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_aa00_REG_IDX_0_VAL_ADDRESS 43520 /* 0xaa00 */
#define DT_N_S_pcie0_S_i2c_aa00_REG_IDX_0_VAL_SIZE 1266319494 /* 0x4b7a8086 */
#define DT_N_S_pcie0_S_i2c_aa00_IRQ_NUM 1
#define DT_N_S_pcie0_S_i2c_aa00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_aa00_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_i2c_aa00_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_i2c_aa00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_aa00_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_i2c_aa00_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_i2c_aa00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_aa00_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_i2c_aa00_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_i2c_aa00_COMPAT_MATCHES_snps_designware_i2c 1
#define DT_N_S_pcie0_S_i2c_aa00_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_i2c_aa00_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_i2c_aa00_P_reg {43520 /* 0xaa00 */, 1266319494 /* 0x4b7a8086 */}
#define DT_N_S_pcie0_S_i2c_aa00_P_reg_IDX_0 43520
#define DT_N_S_pcie0_S_i2c_aa00_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_aa00_P_reg_IDX_1 1266319494
#define DT_N_S_pcie0_S_i2c_aa00_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_aa00_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_aa00, reg, 0) \
	fn(DT_N_S_pcie0_S_i2c_aa00, reg, 1)
#define DT_N_S_pcie0_S_i2c_aa00_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_aa00, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_aa00, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_aa00_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_i2c_aa00_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_i2c_aa00_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_i2c_aa00_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_aa00_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_i2c_aa00_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_aa00_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_i2c_aa00_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_i2c_aa00_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_aa00, interrupts, 0) \
	fn(DT_N_S_pcie0_S_i2c_aa00, interrupts, 1) \
	fn(DT_N_S_pcie0_S_i2c_aa00, interrupts, 2)
#define DT_N_S_pcie0_S_i2c_aa00_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_aa00, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_aa00, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_aa00, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_aa00_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_i2c_aa00_P_clock_frequency 100000
#define DT_N_S_pcie0_S_i2c_aa00_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_i2c_aa00_P_label "I2C_2"
#define DT_N_S_pcie0_S_i2c_aa00_P_label_STRING_TOKEN I2C_2
#define DT_N_S_pcie0_S_i2c_aa00_P_label_STRING_UPPER_TOKEN I2C_2
#define DT_N_S_pcie0_S_i2c_aa00_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_aa00, label, 0) \
	fn(DT_N_S_pcie0_S_i2c_aa00, label, 1) \
	fn(DT_N_S_pcie0_S_i2c_aa00, label, 2) \
	fn(DT_N_S_pcie0_S_i2c_aa00, label, 3) \
	fn(DT_N_S_pcie0_S_i2c_aa00, label, 4)
#define DT_N_S_pcie0_S_i2c_aa00_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_aa00, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_aa00, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_aa00, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_aa00, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_aa00, label, 4, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_aa00_P_label_EXISTS 1
#define DT_N_S_pcie0_S_i2c_aa00_P_status "disabled"
#define DT_N_S_pcie0_S_i2c_aa00_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_aa00_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_aa00_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_i2c_aa00_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_aa00_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_aa00_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_aa00, status, 0) \
	fn(DT_N_S_pcie0_S_i2c_aa00, status, 1) \
	fn(DT_N_S_pcie0_S_i2c_aa00, status, 2) \
	fn(DT_N_S_pcie0_S_i2c_aa00, status, 3) \
	fn(DT_N_S_pcie0_S_i2c_aa00, status, 4) \
	fn(DT_N_S_pcie0_S_i2c_aa00, status, 5) \
	fn(DT_N_S_pcie0_S_i2c_aa00, status, 6) \
	fn(DT_N_S_pcie0_S_i2c_aa00, status, 7)
#define DT_N_S_pcie0_S_i2c_aa00_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_aa00, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_aa00, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_aa00, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_aa00, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_aa00, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_aa00, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_aa00, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_aa00, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_aa00_P_status_EXISTS 1
#define DT_N_S_pcie0_S_i2c_aa00_P_compatible {"snps,designware-i2c"}
#define DT_N_S_pcie0_S_i2c_aa00_P_compatible_IDX_0 "snps,designware-i2c"
#define DT_N_S_pcie0_S_i2c_aa00_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_aa00_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_aa00, compatible, 0)
#define DT_N_S_pcie0_S_i2c_aa00_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_aa00, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_aa00_P_compatible_LEN 1
#define DT_N_S_pcie0_S_i2c_aa00_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_i2c_aa00_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_aa00_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_aa00_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_aa00_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_aa00_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_i2c_aa00_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_i2c_aa00_P_wakeup_source 0
#define DT_N_S_pcie0_S_i2c_aa00_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/i2c@ab00
 *
 * Node identifier: DT_N_S_pcie0_S_i2c_ab00
 *
 * Binding (compatible = snps,designware-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/snps,designware-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_i2c_ab00_PATH "/pcie0/i2c@ab00"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_i2c_ab00_FULL_NAME "i2c@ab00"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_i2c_ab00_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_i2c_ab00_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_i2c_ab00_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_i2c_ab00_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_i2c_ab00_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_i2c_ab00_ORD 14

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_i2c_ab00_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_i2c_ab00_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_i2c_ab00_EXISTS 1
#define DT_N_INST_3_snps_designware_i2c DT_N_S_pcie0_S_i2c_ab00
#define DT_N_NODELABEL_i2c3             DT_N_S_pcie0_S_i2c_ab00

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_i2c_ab00_BUS_pcie 1
#define DT_N_S_pcie0_S_i2c_ab00_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_i2c_ab00_REG_NUM 1
#define DT_N_S_pcie0_S_i2c_ab00_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_ab00_REG_IDX_0_VAL_ADDRESS 43776 /* 0xab00 */
#define DT_N_S_pcie0_S_i2c_ab00_REG_IDX_0_VAL_SIZE 1266385030 /* 0x4b7b8086 */
#define DT_N_S_pcie0_S_i2c_ab00_IRQ_NUM 1
#define DT_N_S_pcie0_S_i2c_ab00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_ab00_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_i2c_ab00_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_i2c_ab00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_ab00_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_i2c_ab00_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_i2c_ab00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_ab00_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_i2c_ab00_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_i2c_ab00_COMPAT_MATCHES_snps_designware_i2c 1
#define DT_N_S_pcie0_S_i2c_ab00_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_i2c_ab00_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_i2c_ab00_P_reg {43776 /* 0xab00 */, 1266385030 /* 0x4b7b8086 */}
#define DT_N_S_pcie0_S_i2c_ab00_P_reg_IDX_0 43776
#define DT_N_S_pcie0_S_i2c_ab00_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_ab00_P_reg_IDX_1 1266385030
#define DT_N_S_pcie0_S_i2c_ab00_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_ab00_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_ab00, reg, 0) \
	fn(DT_N_S_pcie0_S_i2c_ab00, reg, 1)
#define DT_N_S_pcie0_S_i2c_ab00_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_ab00, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_ab00, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_ab00_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_i2c_ab00_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_i2c_ab00_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_i2c_ab00_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_ab00_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_i2c_ab00_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_ab00_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_i2c_ab00_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_i2c_ab00_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_ab00, interrupts, 0) \
	fn(DT_N_S_pcie0_S_i2c_ab00, interrupts, 1) \
	fn(DT_N_S_pcie0_S_i2c_ab00, interrupts, 2)
#define DT_N_S_pcie0_S_i2c_ab00_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_ab00, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_ab00, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_ab00, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_ab00_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_i2c_ab00_P_clock_frequency 100000
#define DT_N_S_pcie0_S_i2c_ab00_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_i2c_ab00_P_label "I2C_3"
#define DT_N_S_pcie0_S_i2c_ab00_P_label_STRING_TOKEN I2C_3
#define DT_N_S_pcie0_S_i2c_ab00_P_label_STRING_UPPER_TOKEN I2C_3
#define DT_N_S_pcie0_S_i2c_ab00_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_ab00, label, 0) \
	fn(DT_N_S_pcie0_S_i2c_ab00, label, 1) \
	fn(DT_N_S_pcie0_S_i2c_ab00, label, 2) \
	fn(DT_N_S_pcie0_S_i2c_ab00, label, 3) \
	fn(DT_N_S_pcie0_S_i2c_ab00, label, 4)
#define DT_N_S_pcie0_S_i2c_ab00_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_ab00, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_ab00, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_ab00, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_ab00, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_ab00, label, 4, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_ab00_P_label_EXISTS 1
#define DT_N_S_pcie0_S_i2c_ab00_P_status "disabled"
#define DT_N_S_pcie0_S_i2c_ab00_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_ab00_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_ab00_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_i2c_ab00_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_ab00_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_ab00_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_ab00, status, 0) \
	fn(DT_N_S_pcie0_S_i2c_ab00, status, 1) \
	fn(DT_N_S_pcie0_S_i2c_ab00, status, 2) \
	fn(DT_N_S_pcie0_S_i2c_ab00, status, 3) \
	fn(DT_N_S_pcie0_S_i2c_ab00, status, 4) \
	fn(DT_N_S_pcie0_S_i2c_ab00, status, 5) \
	fn(DT_N_S_pcie0_S_i2c_ab00, status, 6) \
	fn(DT_N_S_pcie0_S_i2c_ab00, status, 7)
#define DT_N_S_pcie0_S_i2c_ab00_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_ab00, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_ab00, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_ab00, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_ab00, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_ab00, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_ab00, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_ab00, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_ab00, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_ab00_P_status_EXISTS 1
#define DT_N_S_pcie0_S_i2c_ab00_P_compatible {"snps,designware-i2c"}
#define DT_N_S_pcie0_S_i2c_ab00_P_compatible_IDX_0 "snps,designware-i2c"
#define DT_N_S_pcie0_S_i2c_ab00_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_ab00_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_ab00, compatible, 0)
#define DT_N_S_pcie0_S_i2c_ab00_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_ab00, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_ab00_P_compatible_LEN 1
#define DT_N_S_pcie0_S_i2c_ab00_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_i2c_ab00_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_ab00_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_ab00_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_ab00_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_ab00_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_i2c_ab00_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_i2c_ab00_P_wakeup_source 0
#define DT_N_S_pcie0_S_i2c_ab00_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/i2c@c800
 *
 * Node identifier: DT_N_S_pcie0_S_i2c_c800
 *
 * Binding (compatible = snps,designware-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/snps,designware-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_i2c_c800_PATH "/pcie0/i2c@c800"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_i2c_c800_FULL_NAME "i2c@c800"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_i2c_c800_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_i2c_c800_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_i2c_c800_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_i2c_c800_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_i2c_c800_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_i2c_c800_ORD 15

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_i2c_c800_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_i2c_c800_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_i2c_c800_EXISTS 1
#define DT_N_INST_4_snps_designware_i2c DT_N_S_pcie0_S_i2c_c800
#define DT_N_NODELABEL_i2c4             DT_N_S_pcie0_S_i2c_c800

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_i2c_c800_BUS_pcie 1
#define DT_N_S_pcie0_S_i2c_c800_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_i2c_c800_REG_NUM 1
#define DT_N_S_pcie0_S_i2c_c800_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c800_REG_IDX_0_VAL_ADDRESS 51200 /* 0xc800 */
#define DT_N_S_pcie0_S_i2c_c800_REG_IDX_0_VAL_SIZE 1263239302 /* 0x4b4b8086 */
#define DT_N_S_pcie0_S_i2c_c800_IRQ_NUM 1
#define DT_N_S_pcie0_S_i2c_c800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c800_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_i2c_c800_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c800_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_i2c_c800_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c800_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_i2c_c800_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c800_COMPAT_MATCHES_snps_designware_i2c 1
#define DT_N_S_pcie0_S_i2c_c800_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_i2c_c800_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_i2c_c800_P_reg {51200 /* 0xc800 */, 1263239302 /* 0x4b4b8086 */}
#define DT_N_S_pcie0_S_i2c_c800_P_reg_IDX_0 51200
#define DT_N_S_pcie0_S_i2c_c800_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c800_P_reg_IDX_1 1263239302
#define DT_N_S_pcie0_S_i2c_c800_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c800_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_c800, reg, 0) \
	fn(DT_N_S_pcie0_S_i2c_c800, reg, 1)
#define DT_N_S_pcie0_S_i2c_c800_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_c800, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c800, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_c800_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c800_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_i2c_c800_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_i2c_c800_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c800_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_i2c_c800_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c800_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_i2c_c800_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c800_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_c800, interrupts, 0) \
	fn(DT_N_S_pcie0_S_i2c_c800, interrupts, 1) \
	fn(DT_N_S_pcie0_S_i2c_c800, interrupts, 2)
#define DT_N_S_pcie0_S_i2c_c800_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_c800, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c800, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c800, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_c800_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c800_P_clock_frequency 100000
#define DT_N_S_pcie0_S_i2c_c800_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c800_P_label "I2C_4"
#define DT_N_S_pcie0_S_i2c_c800_P_label_STRING_TOKEN I2C_4
#define DT_N_S_pcie0_S_i2c_c800_P_label_STRING_UPPER_TOKEN I2C_4
#define DT_N_S_pcie0_S_i2c_c800_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_c800, label, 0) \
	fn(DT_N_S_pcie0_S_i2c_c800, label, 1) \
	fn(DT_N_S_pcie0_S_i2c_c800, label, 2) \
	fn(DT_N_S_pcie0_S_i2c_c800, label, 3) \
	fn(DT_N_S_pcie0_S_i2c_c800, label, 4)
#define DT_N_S_pcie0_S_i2c_c800_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_c800, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c800, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c800, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c800, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c800, label, 4, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_c800_P_label_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c800_P_status "disabled"
#define DT_N_S_pcie0_S_i2c_c800_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_c800_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_c800_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_i2c_c800_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_c800_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_c800_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_c800, status, 0) \
	fn(DT_N_S_pcie0_S_i2c_c800, status, 1) \
	fn(DT_N_S_pcie0_S_i2c_c800, status, 2) \
	fn(DT_N_S_pcie0_S_i2c_c800, status, 3) \
	fn(DT_N_S_pcie0_S_i2c_c800, status, 4) \
	fn(DT_N_S_pcie0_S_i2c_c800, status, 5) \
	fn(DT_N_S_pcie0_S_i2c_c800, status, 6) \
	fn(DT_N_S_pcie0_S_i2c_c800, status, 7)
#define DT_N_S_pcie0_S_i2c_c800_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_c800, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c800, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c800, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c800, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c800, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c800, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c800, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c800, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_c800_P_status_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c800_P_compatible {"snps,designware-i2c"}
#define DT_N_S_pcie0_S_i2c_c800_P_compatible_IDX_0 "snps,designware-i2c"
#define DT_N_S_pcie0_S_i2c_c800_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c800_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_c800, compatible, 0)
#define DT_N_S_pcie0_S_i2c_c800_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_c800, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_c800_P_compatible_LEN 1
#define DT_N_S_pcie0_S_i2c_c800_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c800_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_c800_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_c800_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_c800_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c800_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_i2c_c800_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c800_P_wakeup_source 0
#define DT_N_S_pcie0_S_i2c_c800_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/i2c@c900
 *
 * Node identifier: DT_N_S_pcie0_S_i2c_c900
 *
 * Binding (compatible = snps,designware-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/snps,designware-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_i2c_c900_PATH "/pcie0/i2c@c900"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_i2c_c900_FULL_NAME "i2c@c900"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_i2c_c900_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_i2c_c900_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_i2c_c900_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_i2c_c900_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_i2c_c900_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_i2c_c900_ORD 16

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_i2c_c900_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_i2c_c900_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_i2c_c900_EXISTS 1
#define DT_N_INST_5_snps_designware_i2c DT_N_S_pcie0_S_i2c_c900
#define DT_N_NODELABEL_i2c5             DT_N_S_pcie0_S_i2c_c900

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_i2c_c900_BUS_pcie 1
#define DT_N_S_pcie0_S_i2c_c900_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_i2c_c900_REG_NUM 1
#define DT_N_S_pcie0_S_i2c_c900_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c900_REG_IDX_0_VAL_ADDRESS 51456 /* 0xc900 */
#define DT_N_S_pcie0_S_i2c_c900_REG_IDX_0_VAL_SIZE 1263304838 /* 0x4b4c8086 */
#define DT_N_S_pcie0_S_i2c_c900_IRQ_NUM 1
#define DT_N_S_pcie0_S_i2c_c900_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c900_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_i2c_c900_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c900_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c900_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_i2c_c900_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c900_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c900_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_i2c_c900_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c900_COMPAT_MATCHES_snps_designware_i2c 1
#define DT_N_S_pcie0_S_i2c_c900_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_i2c_c900_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_i2c_c900_P_reg {51456 /* 0xc900 */, 1263304838 /* 0x4b4c8086 */}
#define DT_N_S_pcie0_S_i2c_c900_P_reg_IDX_0 51456
#define DT_N_S_pcie0_S_i2c_c900_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c900_P_reg_IDX_1 1263304838
#define DT_N_S_pcie0_S_i2c_c900_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c900_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_c900, reg, 0) \
	fn(DT_N_S_pcie0_S_i2c_c900, reg, 1)
#define DT_N_S_pcie0_S_i2c_c900_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_c900, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c900, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_c900_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c900_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_i2c_c900_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_i2c_c900_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c900_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_i2c_c900_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c900_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_i2c_c900_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c900_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_c900, interrupts, 0) \
	fn(DT_N_S_pcie0_S_i2c_c900, interrupts, 1) \
	fn(DT_N_S_pcie0_S_i2c_c900, interrupts, 2)
#define DT_N_S_pcie0_S_i2c_c900_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_c900, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c900, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c900, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_c900_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c900_P_clock_frequency 100000
#define DT_N_S_pcie0_S_i2c_c900_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c900_P_label "I2C_5"
#define DT_N_S_pcie0_S_i2c_c900_P_label_STRING_TOKEN I2C_5
#define DT_N_S_pcie0_S_i2c_c900_P_label_STRING_UPPER_TOKEN I2C_5
#define DT_N_S_pcie0_S_i2c_c900_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_c900, label, 0) \
	fn(DT_N_S_pcie0_S_i2c_c900, label, 1) \
	fn(DT_N_S_pcie0_S_i2c_c900, label, 2) \
	fn(DT_N_S_pcie0_S_i2c_c900, label, 3) \
	fn(DT_N_S_pcie0_S_i2c_c900, label, 4)
#define DT_N_S_pcie0_S_i2c_c900_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_c900, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c900, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c900, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c900, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c900, label, 4, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_c900_P_label_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c900_P_status "disabled"
#define DT_N_S_pcie0_S_i2c_c900_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_c900_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_c900_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_i2c_c900_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_c900_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_c900_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_c900, status, 0) \
	fn(DT_N_S_pcie0_S_i2c_c900, status, 1) \
	fn(DT_N_S_pcie0_S_i2c_c900, status, 2) \
	fn(DT_N_S_pcie0_S_i2c_c900, status, 3) \
	fn(DT_N_S_pcie0_S_i2c_c900, status, 4) \
	fn(DT_N_S_pcie0_S_i2c_c900, status, 5) \
	fn(DT_N_S_pcie0_S_i2c_c900, status, 6) \
	fn(DT_N_S_pcie0_S_i2c_c900, status, 7)
#define DT_N_S_pcie0_S_i2c_c900_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_c900, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c900, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c900, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c900, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c900, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c900, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c900, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_c900, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_c900_P_status_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c900_P_compatible {"snps,designware-i2c"}
#define DT_N_S_pcie0_S_i2c_c900_P_compatible_IDX_0 "snps,designware-i2c"
#define DT_N_S_pcie0_S_i2c_c900_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c900_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_c900, compatible, 0)
#define DT_N_S_pcie0_S_i2c_c900_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_c900, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_c900_P_compatible_LEN 1
#define DT_N_S_pcie0_S_i2c_c900_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c900_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_c900_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_c900_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_c900_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c900_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_i2c_c900_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_i2c_c900_P_wakeup_source 0
#define DT_N_S_pcie0_S_i2c_c900_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/i2c@d800
 *
 * Node identifier: DT_N_S_pcie0_S_i2c_d800
 *
 * Binding (compatible = snps,designware-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/snps,designware-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_i2c_d800_PATH "/pcie0/i2c@d800"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_i2c_d800_FULL_NAME "i2c@d800"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_i2c_d800_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_i2c_d800_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_i2c_d800_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_i2c_d800_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_i2c_d800_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_i2c_d800_ORD 17

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_i2c_d800_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_i2c_d800_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_i2c_d800_EXISTS 1
#define DT_N_INST_8_snps_designware_i2c DT_N_S_pcie0_S_i2c_d800
#define DT_N_NODELABEL_i2c_pse_0        DT_N_S_pcie0_S_i2c_d800

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_i2c_d800_BUS_pcie 1
#define DT_N_S_pcie0_S_i2c_d800_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_i2c_d800_REG_NUM 1
#define DT_N_S_pcie0_S_i2c_d800_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d800_REG_IDX_0_VAL_ADDRESS 55296 /* 0xd800 */
#define DT_N_S_pcie0_S_i2c_d800_REG_IDX_0_VAL_SIZE 1270448262 /* 0x4bb98086 */
#define DT_N_S_pcie0_S_i2c_d800_IRQ_NUM 1
#define DT_N_S_pcie0_S_i2c_d800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d800_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_i2c_d800_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d800_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_i2c_d800_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d800_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_i2c_d800_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d800_COMPAT_MATCHES_snps_designware_i2c 1
#define DT_N_S_pcie0_S_i2c_d800_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_i2c_d800_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_i2c_d800_P_reg {55296 /* 0xd800 */, 1270448262 /* 0x4bb98086 */}
#define DT_N_S_pcie0_S_i2c_d800_P_reg_IDX_0 55296
#define DT_N_S_pcie0_S_i2c_d800_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d800_P_reg_IDX_1 1270448262
#define DT_N_S_pcie0_S_i2c_d800_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d800_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_d800, reg, 0) \
	fn(DT_N_S_pcie0_S_i2c_d800, reg, 1)
#define DT_N_S_pcie0_S_i2c_d800_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_d800, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d800, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_d800_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d800_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_i2c_d800_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_i2c_d800_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d800_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_i2c_d800_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d800_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_i2c_d800_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d800_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_d800, interrupts, 0) \
	fn(DT_N_S_pcie0_S_i2c_d800, interrupts, 1) \
	fn(DT_N_S_pcie0_S_i2c_d800, interrupts, 2)
#define DT_N_S_pcie0_S_i2c_d800_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_d800, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d800, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d800, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_d800_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d800_P_clock_frequency 100000
#define DT_N_S_pcie0_S_i2c_d800_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d800_P_label "I2C_PSE_0"
#define DT_N_S_pcie0_S_i2c_d800_P_label_STRING_TOKEN I2C_PSE_0
#define DT_N_S_pcie0_S_i2c_d800_P_label_STRING_UPPER_TOKEN I2C_PSE_0
#define DT_N_S_pcie0_S_i2c_d800_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_d800, label, 0) \
	fn(DT_N_S_pcie0_S_i2c_d800, label, 1) \
	fn(DT_N_S_pcie0_S_i2c_d800, label, 2) \
	fn(DT_N_S_pcie0_S_i2c_d800, label, 3) \
	fn(DT_N_S_pcie0_S_i2c_d800, label, 4) \
	fn(DT_N_S_pcie0_S_i2c_d800, label, 5) \
	fn(DT_N_S_pcie0_S_i2c_d800, label, 6) \
	fn(DT_N_S_pcie0_S_i2c_d800, label, 7) \
	fn(DT_N_S_pcie0_S_i2c_d800, label, 8)
#define DT_N_S_pcie0_S_i2c_d800_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_d800, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d800, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d800, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d800, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d800, label, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d800, label, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d800, label, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d800, label, 7, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d800, label, 8, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_d800_P_label_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d800_P_status "disabled"
#define DT_N_S_pcie0_S_i2c_d800_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_d800_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_d800_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_i2c_d800_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_d800_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_d800_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_d800, status, 0) \
	fn(DT_N_S_pcie0_S_i2c_d800, status, 1) \
	fn(DT_N_S_pcie0_S_i2c_d800, status, 2) \
	fn(DT_N_S_pcie0_S_i2c_d800, status, 3) \
	fn(DT_N_S_pcie0_S_i2c_d800, status, 4) \
	fn(DT_N_S_pcie0_S_i2c_d800, status, 5) \
	fn(DT_N_S_pcie0_S_i2c_d800, status, 6) \
	fn(DT_N_S_pcie0_S_i2c_d800, status, 7)
#define DT_N_S_pcie0_S_i2c_d800_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_d800, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d800, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d800, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d800, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d800, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d800, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d800, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d800, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_d800_P_status_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d800_P_compatible {"snps,designware-i2c"}
#define DT_N_S_pcie0_S_i2c_d800_P_compatible_IDX_0 "snps,designware-i2c"
#define DT_N_S_pcie0_S_i2c_d800_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d800_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_d800, compatible, 0)
#define DT_N_S_pcie0_S_i2c_d800_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_d800, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_d800_P_compatible_LEN 1
#define DT_N_S_pcie0_S_i2c_d800_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d800_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_d800_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_d800_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_d800_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d800_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_i2c_d800_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d800_P_wakeup_source 0
#define DT_N_S_pcie0_S_i2c_d800_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/i2c@d900
 *
 * Node identifier: DT_N_S_pcie0_S_i2c_d900
 *
 * Binding (compatible = snps,designware-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/snps,designware-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_i2c_d900_PATH "/pcie0/i2c@d900"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_i2c_d900_FULL_NAME "i2c@d900"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_i2c_d900_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_i2c_d900_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_i2c_d900_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_i2c_d900_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_i2c_d900_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_i2c_d900_ORD 18

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_i2c_d900_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_i2c_d900_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_i2c_d900_EXISTS 1
#define DT_N_INST_9_snps_designware_i2c DT_N_S_pcie0_S_i2c_d900
#define DT_N_NODELABEL_i2c_pse_1        DT_N_S_pcie0_S_i2c_d900

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_i2c_d900_BUS_pcie 1
#define DT_N_S_pcie0_S_i2c_d900_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_i2c_d900_REG_NUM 1
#define DT_N_S_pcie0_S_i2c_d900_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d900_REG_IDX_0_VAL_ADDRESS 55552 /* 0xd900 */
#define DT_N_S_pcie0_S_i2c_d900_REG_IDX_0_VAL_SIZE 1270513798 /* 0x4bba8086 */
#define DT_N_S_pcie0_S_i2c_d900_IRQ_NUM 1
#define DT_N_S_pcie0_S_i2c_d900_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d900_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_i2c_d900_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d900_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d900_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_i2c_d900_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d900_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d900_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_i2c_d900_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d900_COMPAT_MATCHES_snps_designware_i2c 1
#define DT_N_S_pcie0_S_i2c_d900_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_i2c_d900_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_i2c_d900_P_reg {55552 /* 0xd900 */, 1270513798 /* 0x4bba8086 */}
#define DT_N_S_pcie0_S_i2c_d900_P_reg_IDX_0 55552
#define DT_N_S_pcie0_S_i2c_d900_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d900_P_reg_IDX_1 1270513798
#define DT_N_S_pcie0_S_i2c_d900_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d900_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_d900, reg, 0) \
	fn(DT_N_S_pcie0_S_i2c_d900, reg, 1)
#define DT_N_S_pcie0_S_i2c_d900_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_d900, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d900, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_d900_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d900_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_i2c_d900_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_i2c_d900_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d900_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_i2c_d900_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d900_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_i2c_d900_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d900_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_d900, interrupts, 0) \
	fn(DT_N_S_pcie0_S_i2c_d900, interrupts, 1) \
	fn(DT_N_S_pcie0_S_i2c_d900, interrupts, 2)
#define DT_N_S_pcie0_S_i2c_d900_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_d900, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d900, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d900, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_d900_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d900_P_clock_frequency 100000
#define DT_N_S_pcie0_S_i2c_d900_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d900_P_label "I2C_PSE_1"
#define DT_N_S_pcie0_S_i2c_d900_P_label_STRING_TOKEN I2C_PSE_1
#define DT_N_S_pcie0_S_i2c_d900_P_label_STRING_UPPER_TOKEN I2C_PSE_1
#define DT_N_S_pcie0_S_i2c_d900_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_d900, label, 0) \
	fn(DT_N_S_pcie0_S_i2c_d900, label, 1) \
	fn(DT_N_S_pcie0_S_i2c_d900, label, 2) \
	fn(DT_N_S_pcie0_S_i2c_d900, label, 3) \
	fn(DT_N_S_pcie0_S_i2c_d900, label, 4) \
	fn(DT_N_S_pcie0_S_i2c_d900, label, 5) \
	fn(DT_N_S_pcie0_S_i2c_d900, label, 6) \
	fn(DT_N_S_pcie0_S_i2c_d900, label, 7) \
	fn(DT_N_S_pcie0_S_i2c_d900, label, 8)
#define DT_N_S_pcie0_S_i2c_d900_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_d900, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d900, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d900, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d900, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d900, label, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d900, label, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d900, label, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d900, label, 7, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d900, label, 8, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_d900_P_label_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d900_P_status "disabled"
#define DT_N_S_pcie0_S_i2c_d900_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_d900_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_d900_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_i2c_d900_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_d900_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_d900_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_d900, status, 0) \
	fn(DT_N_S_pcie0_S_i2c_d900, status, 1) \
	fn(DT_N_S_pcie0_S_i2c_d900, status, 2) \
	fn(DT_N_S_pcie0_S_i2c_d900, status, 3) \
	fn(DT_N_S_pcie0_S_i2c_d900, status, 4) \
	fn(DT_N_S_pcie0_S_i2c_d900, status, 5) \
	fn(DT_N_S_pcie0_S_i2c_d900, status, 6) \
	fn(DT_N_S_pcie0_S_i2c_d900, status, 7)
#define DT_N_S_pcie0_S_i2c_d900_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_d900, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d900, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d900, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d900, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d900, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d900, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d900, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_d900, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_d900_P_status_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d900_P_compatible {"snps,designware-i2c"}
#define DT_N_S_pcie0_S_i2c_d900_P_compatible_IDX_0 "snps,designware-i2c"
#define DT_N_S_pcie0_S_i2c_d900_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d900_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_d900, compatible, 0)
#define DT_N_S_pcie0_S_i2c_d900_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_d900, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_d900_P_compatible_LEN 1
#define DT_N_S_pcie0_S_i2c_d900_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d900_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_d900_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_d900_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_d900_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d900_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_i2c_d900_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_i2c_d900_P_wakeup_source 0
#define DT_N_S_pcie0_S_i2c_d900_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/i2c@da00
 *
 * Node identifier: DT_N_S_pcie0_S_i2c_da00
 *
 * Binding (compatible = snps,designware-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/snps,designware-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_i2c_da00_PATH "/pcie0/i2c@da00"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_i2c_da00_FULL_NAME "i2c@da00"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_i2c_da00_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_i2c_da00_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_i2c_da00_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_i2c_da00_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_i2c_da00_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_i2c_da00_ORD 19

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_i2c_da00_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_i2c_da00_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_i2c_da00_EXISTS 1
#define DT_N_INST_10_snps_designware_i2c DT_N_S_pcie0_S_i2c_da00
#define DT_N_NODELABEL_i2c_pse_2         DT_N_S_pcie0_S_i2c_da00

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_i2c_da00_BUS_pcie 1
#define DT_N_S_pcie0_S_i2c_da00_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_i2c_da00_REG_NUM 1
#define DT_N_S_pcie0_S_i2c_da00_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_da00_REG_IDX_0_VAL_ADDRESS 55808 /* 0xda00 */
#define DT_N_S_pcie0_S_i2c_da00_REG_IDX_0_VAL_SIZE 1270579334 /* 0x4bbb8086 */
#define DT_N_S_pcie0_S_i2c_da00_IRQ_NUM 1
#define DT_N_S_pcie0_S_i2c_da00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_da00_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_i2c_da00_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_i2c_da00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_da00_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_i2c_da00_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_i2c_da00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_da00_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_i2c_da00_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_i2c_da00_COMPAT_MATCHES_snps_designware_i2c 1
#define DT_N_S_pcie0_S_i2c_da00_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_i2c_da00_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_i2c_da00_P_reg {55808 /* 0xda00 */, 1270579334 /* 0x4bbb8086 */}
#define DT_N_S_pcie0_S_i2c_da00_P_reg_IDX_0 55808
#define DT_N_S_pcie0_S_i2c_da00_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_da00_P_reg_IDX_1 1270579334
#define DT_N_S_pcie0_S_i2c_da00_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_da00_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_da00, reg, 0) \
	fn(DT_N_S_pcie0_S_i2c_da00, reg, 1)
#define DT_N_S_pcie0_S_i2c_da00_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_da00, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_da00, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_da00_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_i2c_da00_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_i2c_da00_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_i2c_da00_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_da00_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_i2c_da00_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_da00_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_i2c_da00_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_i2c_da00_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_da00, interrupts, 0) \
	fn(DT_N_S_pcie0_S_i2c_da00, interrupts, 1) \
	fn(DT_N_S_pcie0_S_i2c_da00, interrupts, 2)
#define DT_N_S_pcie0_S_i2c_da00_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_da00, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_da00, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_da00, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_da00_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_i2c_da00_P_clock_frequency 100000
#define DT_N_S_pcie0_S_i2c_da00_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_i2c_da00_P_label "I2C_PSE_2"
#define DT_N_S_pcie0_S_i2c_da00_P_label_STRING_TOKEN I2C_PSE_2
#define DT_N_S_pcie0_S_i2c_da00_P_label_STRING_UPPER_TOKEN I2C_PSE_2
#define DT_N_S_pcie0_S_i2c_da00_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_da00, label, 0) \
	fn(DT_N_S_pcie0_S_i2c_da00, label, 1) \
	fn(DT_N_S_pcie0_S_i2c_da00, label, 2) \
	fn(DT_N_S_pcie0_S_i2c_da00, label, 3) \
	fn(DT_N_S_pcie0_S_i2c_da00, label, 4) \
	fn(DT_N_S_pcie0_S_i2c_da00, label, 5) \
	fn(DT_N_S_pcie0_S_i2c_da00, label, 6) \
	fn(DT_N_S_pcie0_S_i2c_da00, label, 7) \
	fn(DT_N_S_pcie0_S_i2c_da00, label, 8)
#define DT_N_S_pcie0_S_i2c_da00_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_da00, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_da00, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_da00, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_da00, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_da00, label, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_da00, label, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_da00, label, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_da00, label, 7, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_da00, label, 8, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_da00_P_label_EXISTS 1
#define DT_N_S_pcie0_S_i2c_da00_P_status "disabled"
#define DT_N_S_pcie0_S_i2c_da00_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_da00_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_da00_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_i2c_da00_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_da00_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_da00_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_da00, status, 0) \
	fn(DT_N_S_pcie0_S_i2c_da00, status, 1) \
	fn(DT_N_S_pcie0_S_i2c_da00, status, 2) \
	fn(DT_N_S_pcie0_S_i2c_da00, status, 3) \
	fn(DT_N_S_pcie0_S_i2c_da00, status, 4) \
	fn(DT_N_S_pcie0_S_i2c_da00, status, 5) \
	fn(DT_N_S_pcie0_S_i2c_da00, status, 6) \
	fn(DT_N_S_pcie0_S_i2c_da00, status, 7)
#define DT_N_S_pcie0_S_i2c_da00_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_da00, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_da00, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_da00, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_da00, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_da00, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_da00, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_da00, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_da00, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_da00_P_status_EXISTS 1
#define DT_N_S_pcie0_S_i2c_da00_P_compatible {"snps,designware-i2c"}
#define DT_N_S_pcie0_S_i2c_da00_P_compatible_IDX_0 "snps,designware-i2c"
#define DT_N_S_pcie0_S_i2c_da00_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_da00_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_da00, compatible, 0)
#define DT_N_S_pcie0_S_i2c_da00_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_da00, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_da00_P_compatible_LEN 1
#define DT_N_S_pcie0_S_i2c_da00_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_i2c_da00_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_da00_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_da00_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_da00_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_da00_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_i2c_da00_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_i2c_da00_P_wakeup_source 0
#define DT_N_S_pcie0_S_i2c_da00_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/i2c@db00
 *
 * Node identifier: DT_N_S_pcie0_S_i2c_db00
 *
 * Binding (compatible = snps,designware-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/snps,designware-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_i2c_db00_PATH "/pcie0/i2c@db00"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_i2c_db00_FULL_NAME "i2c@db00"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_i2c_db00_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_i2c_db00_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_i2c_db00_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_i2c_db00_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_i2c_db00_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_i2c_db00_ORD 20

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_i2c_db00_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_i2c_db00_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_i2c_db00_EXISTS 1
#define DT_N_INST_11_snps_designware_i2c DT_N_S_pcie0_S_i2c_db00
#define DT_N_NODELABEL_i2c_pse_3         DT_N_S_pcie0_S_i2c_db00

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_i2c_db00_BUS_pcie 1
#define DT_N_S_pcie0_S_i2c_db00_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_i2c_db00_REG_NUM 1
#define DT_N_S_pcie0_S_i2c_db00_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_db00_REG_IDX_0_VAL_ADDRESS 56064 /* 0xdb00 */
#define DT_N_S_pcie0_S_i2c_db00_REG_IDX_0_VAL_SIZE 1270644870 /* 0x4bbc8086 */
#define DT_N_S_pcie0_S_i2c_db00_IRQ_NUM 1
#define DT_N_S_pcie0_S_i2c_db00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_db00_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_i2c_db00_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_i2c_db00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_db00_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_i2c_db00_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_i2c_db00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_db00_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_i2c_db00_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_i2c_db00_COMPAT_MATCHES_snps_designware_i2c 1
#define DT_N_S_pcie0_S_i2c_db00_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_i2c_db00_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_i2c_db00_P_reg {56064 /* 0xdb00 */, 1270644870 /* 0x4bbc8086 */}
#define DT_N_S_pcie0_S_i2c_db00_P_reg_IDX_0 56064
#define DT_N_S_pcie0_S_i2c_db00_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_db00_P_reg_IDX_1 1270644870
#define DT_N_S_pcie0_S_i2c_db00_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_db00_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_db00, reg, 0) \
	fn(DT_N_S_pcie0_S_i2c_db00, reg, 1)
#define DT_N_S_pcie0_S_i2c_db00_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_db00, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_db00, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_db00_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_i2c_db00_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_i2c_db00_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_i2c_db00_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_db00_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_i2c_db00_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_db00_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_i2c_db00_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_i2c_db00_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_db00, interrupts, 0) \
	fn(DT_N_S_pcie0_S_i2c_db00, interrupts, 1) \
	fn(DT_N_S_pcie0_S_i2c_db00, interrupts, 2)
#define DT_N_S_pcie0_S_i2c_db00_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_db00, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_db00, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_db00, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_db00_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_i2c_db00_P_clock_frequency 100000
#define DT_N_S_pcie0_S_i2c_db00_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_i2c_db00_P_label "I2C_PSE_3"
#define DT_N_S_pcie0_S_i2c_db00_P_label_STRING_TOKEN I2C_PSE_3
#define DT_N_S_pcie0_S_i2c_db00_P_label_STRING_UPPER_TOKEN I2C_PSE_3
#define DT_N_S_pcie0_S_i2c_db00_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_db00, label, 0) \
	fn(DT_N_S_pcie0_S_i2c_db00, label, 1) \
	fn(DT_N_S_pcie0_S_i2c_db00, label, 2) \
	fn(DT_N_S_pcie0_S_i2c_db00, label, 3) \
	fn(DT_N_S_pcie0_S_i2c_db00, label, 4) \
	fn(DT_N_S_pcie0_S_i2c_db00, label, 5) \
	fn(DT_N_S_pcie0_S_i2c_db00, label, 6) \
	fn(DT_N_S_pcie0_S_i2c_db00, label, 7) \
	fn(DT_N_S_pcie0_S_i2c_db00, label, 8)
#define DT_N_S_pcie0_S_i2c_db00_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_db00, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_db00, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_db00, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_db00, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_db00, label, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_db00, label, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_db00, label, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_db00, label, 7, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_db00, label, 8, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_db00_P_label_EXISTS 1
#define DT_N_S_pcie0_S_i2c_db00_P_status "disabled"
#define DT_N_S_pcie0_S_i2c_db00_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_db00_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_db00_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_i2c_db00_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_db00_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_db00_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_db00, status, 0) \
	fn(DT_N_S_pcie0_S_i2c_db00, status, 1) \
	fn(DT_N_S_pcie0_S_i2c_db00, status, 2) \
	fn(DT_N_S_pcie0_S_i2c_db00, status, 3) \
	fn(DT_N_S_pcie0_S_i2c_db00, status, 4) \
	fn(DT_N_S_pcie0_S_i2c_db00, status, 5) \
	fn(DT_N_S_pcie0_S_i2c_db00, status, 6) \
	fn(DT_N_S_pcie0_S_i2c_db00, status, 7)
#define DT_N_S_pcie0_S_i2c_db00_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_db00, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_db00, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_db00, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_db00, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_db00, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_db00, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_db00, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_db00, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_db00_P_status_EXISTS 1
#define DT_N_S_pcie0_S_i2c_db00_P_compatible {"snps,designware-i2c"}
#define DT_N_S_pcie0_S_i2c_db00_P_compatible_IDX_0 "snps,designware-i2c"
#define DT_N_S_pcie0_S_i2c_db00_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_db00_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_db00, compatible, 0)
#define DT_N_S_pcie0_S_i2c_db00_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_db00, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_db00_P_compatible_LEN 1
#define DT_N_S_pcie0_S_i2c_db00_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_i2c_db00_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_db00_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_db00_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_db00_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_db00_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_i2c_db00_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_i2c_db00_P_wakeup_source 0
#define DT_N_S_pcie0_S_i2c_db00_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/i2c@dc00
 *
 * Node identifier: DT_N_S_pcie0_S_i2c_dc00
 *
 * Binding (compatible = snps,designware-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/snps,designware-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_i2c_dc00_PATH "/pcie0/i2c@dc00"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_i2c_dc00_FULL_NAME "i2c@dc00"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_i2c_dc00_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_i2c_dc00_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_i2c_dc00_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_i2c_dc00_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_i2c_dc00_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_i2c_dc00_ORD 21

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_i2c_dc00_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_i2c_dc00_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_i2c_dc00_EXISTS 1
#define DT_N_INST_12_snps_designware_i2c DT_N_S_pcie0_S_i2c_dc00
#define DT_N_NODELABEL_i2c_pse_4         DT_N_S_pcie0_S_i2c_dc00

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_i2c_dc00_BUS_pcie 1
#define DT_N_S_pcie0_S_i2c_dc00_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_i2c_dc00_REG_NUM 1
#define DT_N_S_pcie0_S_i2c_dc00_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dc00_REG_IDX_0_VAL_ADDRESS 56320 /* 0xdc00 */
#define DT_N_S_pcie0_S_i2c_dc00_REG_IDX_0_VAL_SIZE 1270710406 /* 0x4bbd8086 */
#define DT_N_S_pcie0_S_i2c_dc00_IRQ_NUM 1
#define DT_N_S_pcie0_S_i2c_dc00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dc00_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_i2c_dc00_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dc00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dc00_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_i2c_dc00_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dc00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dc00_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_i2c_dc00_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dc00_COMPAT_MATCHES_snps_designware_i2c 1
#define DT_N_S_pcie0_S_i2c_dc00_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_i2c_dc00_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_i2c_dc00_P_reg {56320 /* 0xdc00 */, 1270710406 /* 0x4bbd8086 */}
#define DT_N_S_pcie0_S_i2c_dc00_P_reg_IDX_0 56320
#define DT_N_S_pcie0_S_i2c_dc00_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dc00_P_reg_IDX_1 1270710406
#define DT_N_S_pcie0_S_i2c_dc00_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dc00_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_dc00, reg, 0) \
	fn(DT_N_S_pcie0_S_i2c_dc00, reg, 1)
#define DT_N_S_pcie0_S_i2c_dc00_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_dc00, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dc00, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_dc00_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dc00_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_i2c_dc00_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_i2c_dc00_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dc00_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_i2c_dc00_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dc00_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_i2c_dc00_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dc00_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_dc00, interrupts, 0) \
	fn(DT_N_S_pcie0_S_i2c_dc00, interrupts, 1) \
	fn(DT_N_S_pcie0_S_i2c_dc00, interrupts, 2)
#define DT_N_S_pcie0_S_i2c_dc00_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_dc00, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dc00, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dc00, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_dc00_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dc00_P_clock_frequency 100000
#define DT_N_S_pcie0_S_i2c_dc00_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dc00_P_label "I2C_PSE_4"
#define DT_N_S_pcie0_S_i2c_dc00_P_label_STRING_TOKEN I2C_PSE_4
#define DT_N_S_pcie0_S_i2c_dc00_P_label_STRING_UPPER_TOKEN I2C_PSE_4
#define DT_N_S_pcie0_S_i2c_dc00_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_dc00, label, 0) \
	fn(DT_N_S_pcie0_S_i2c_dc00, label, 1) \
	fn(DT_N_S_pcie0_S_i2c_dc00, label, 2) \
	fn(DT_N_S_pcie0_S_i2c_dc00, label, 3) \
	fn(DT_N_S_pcie0_S_i2c_dc00, label, 4) \
	fn(DT_N_S_pcie0_S_i2c_dc00, label, 5) \
	fn(DT_N_S_pcie0_S_i2c_dc00, label, 6) \
	fn(DT_N_S_pcie0_S_i2c_dc00, label, 7) \
	fn(DT_N_S_pcie0_S_i2c_dc00, label, 8)
#define DT_N_S_pcie0_S_i2c_dc00_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_dc00, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dc00, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dc00, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dc00, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dc00, label, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dc00, label, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dc00, label, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dc00, label, 7, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dc00, label, 8, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_dc00_P_label_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dc00_P_status "disabled"
#define DT_N_S_pcie0_S_i2c_dc00_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_dc00_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_dc00_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_i2c_dc00_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_dc00_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_dc00_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_dc00, status, 0) \
	fn(DT_N_S_pcie0_S_i2c_dc00, status, 1) \
	fn(DT_N_S_pcie0_S_i2c_dc00, status, 2) \
	fn(DT_N_S_pcie0_S_i2c_dc00, status, 3) \
	fn(DT_N_S_pcie0_S_i2c_dc00, status, 4) \
	fn(DT_N_S_pcie0_S_i2c_dc00, status, 5) \
	fn(DT_N_S_pcie0_S_i2c_dc00, status, 6) \
	fn(DT_N_S_pcie0_S_i2c_dc00, status, 7)
#define DT_N_S_pcie0_S_i2c_dc00_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_dc00, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dc00, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dc00, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dc00, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dc00, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dc00, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dc00, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dc00, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_dc00_P_status_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dc00_P_compatible {"snps,designware-i2c"}
#define DT_N_S_pcie0_S_i2c_dc00_P_compatible_IDX_0 "snps,designware-i2c"
#define DT_N_S_pcie0_S_i2c_dc00_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dc00_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_dc00, compatible, 0)
#define DT_N_S_pcie0_S_i2c_dc00_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_dc00, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_dc00_P_compatible_LEN 1
#define DT_N_S_pcie0_S_i2c_dc00_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dc00_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_dc00_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_dc00_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_dc00_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dc00_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_i2c_dc00_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dc00_P_wakeup_source 0
#define DT_N_S_pcie0_S_i2c_dc00_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/i2c@dd00
 *
 * Node identifier: DT_N_S_pcie0_S_i2c_dd00
 *
 * Binding (compatible = snps,designware-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/snps,designware-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_i2c_dd00_PATH "/pcie0/i2c@dd00"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_i2c_dd00_FULL_NAME "i2c@dd00"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_i2c_dd00_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_i2c_dd00_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_i2c_dd00_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_i2c_dd00_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_i2c_dd00_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_i2c_dd00_ORD 22

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_i2c_dd00_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_i2c_dd00_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_i2c_dd00_EXISTS 1
#define DT_N_INST_13_snps_designware_i2c DT_N_S_pcie0_S_i2c_dd00
#define DT_N_NODELABEL_i2c_pse_5         DT_N_S_pcie0_S_i2c_dd00

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_i2c_dd00_BUS_pcie 1
#define DT_N_S_pcie0_S_i2c_dd00_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_i2c_dd00_REG_NUM 1
#define DT_N_S_pcie0_S_i2c_dd00_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dd00_REG_IDX_0_VAL_ADDRESS 56576 /* 0xdd00 */
#define DT_N_S_pcie0_S_i2c_dd00_REG_IDX_0_VAL_SIZE 1270775942 /* 0x4bbe8086 */
#define DT_N_S_pcie0_S_i2c_dd00_IRQ_NUM 1
#define DT_N_S_pcie0_S_i2c_dd00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dd00_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_i2c_dd00_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dd00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dd00_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_i2c_dd00_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dd00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dd00_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_i2c_dd00_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dd00_COMPAT_MATCHES_snps_designware_i2c 1
#define DT_N_S_pcie0_S_i2c_dd00_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_i2c_dd00_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_i2c_dd00_P_reg {56576 /* 0xdd00 */, 1270775942 /* 0x4bbe8086 */}
#define DT_N_S_pcie0_S_i2c_dd00_P_reg_IDX_0 56576
#define DT_N_S_pcie0_S_i2c_dd00_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dd00_P_reg_IDX_1 1270775942
#define DT_N_S_pcie0_S_i2c_dd00_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dd00_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_dd00, reg, 0) \
	fn(DT_N_S_pcie0_S_i2c_dd00, reg, 1)
#define DT_N_S_pcie0_S_i2c_dd00_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_dd00, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dd00, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_dd00_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dd00_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_i2c_dd00_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_i2c_dd00_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dd00_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_i2c_dd00_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dd00_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_i2c_dd00_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dd00_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_dd00, interrupts, 0) \
	fn(DT_N_S_pcie0_S_i2c_dd00, interrupts, 1) \
	fn(DT_N_S_pcie0_S_i2c_dd00, interrupts, 2)
#define DT_N_S_pcie0_S_i2c_dd00_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_dd00, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dd00, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dd00, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_dd00_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dd00_P_clock_frequency 100000
#define DT_N_S_pcie0_S_i2c_dd00_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dd00_P_label "I2C_PSE_5"
#define DT_N_S_pcie0_S_i2c_dd00_P_label_STRING_TOKEN I2C_PSE_5
#define DT_N_S_pcie0_S_i2c_dd00_P_label_STRING_UPPER_TOKEN I2C_PSE_5
#define DT_N_S_pcie0_S_i2c_dd00_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_dd00, label, 0) \
	fn(DT_N_S_pcie0_S_i2c_dd00, label, 1) \
	fn(DT_N_S_pcie0_S_i2c_dd00, label, 2) \
	fn(DT_N_S_pcie0_S_i2c_dd00, label, 3) \
	fn(DT_N_S_pcie0_S_i2c_dd00, label, 4) \
	fn(DT_N_S_pcie0_S_i2c_dd00, label, 5) \
	fn(DT_N_S_pcie0_S_i2c_dd00, label, 6) \
	fn(DT_N_S_pcie0_S_i2c_dd00, label, 7) \
	fn(DT_N_S_pcie0_S_i2c_dd00, label, 8)
#define DT_N_S_pcie0_S_i2c_dd00_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_dd00, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dd00, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dd00, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dd00, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dd00, label, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dd00, label, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dd00, label, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dd00, label, 7, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dd00, label, 8, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_dd00_P_label_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dd00_P_status "disabled"
#define DT_N_S_pcie0_S_i2c_dd00_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_dd00_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_dd00_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_i2c_dd00_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_dd00_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_dd00_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_dd00, status, 0) \
	fn(DT_N_S_pcie0_S_i2c_dd00, status, 1) \
	fn(DT_N_S_pcie0_S_i2c_dd00, status, 2) \
	fn(DT_N_S_pcie0_S_i2c_dd00, status, 3) \
	fn(DT_N_S_pcie0_S_i2c_dd00, status, 4) \
	fn(DT_N_S_pcie0_S_i2c_dd00, status, 5) \
	fn(DT_N_S_pcie0_S_i2c_dd00, status, 6) \
	fn(DT_N_S_pcie0_S_i2c_dd00, status, 7)
#define DT_N_S_pcie0_S_i2c_dd00_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_dd00, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dd00, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dd00, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dd00, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dd00, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dd00, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dd00, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_dd00, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_dd00_P_status_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dd00_P_compatible {"snps,designware-i2c"}
#define DT_N_S_pcie0_S_i2c_dd00_P_compatible_IDX_0 "snps,designware-i2c"
#define DT_N_S_pcie0_S_i2c_dd00_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dd00_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_dd00, compatible, 0)
#define DT_N_S_pcie0_S_i2c_dd00_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_dd00, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_dd00_P_compatible_LEN 1
#define DT_N_S_pcie0_S_i2c_dd00_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dd00_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_dd00_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_dd00_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_dd00_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dd00_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_i2c_dd00_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_i2c_dd00_P_wakeup_source 0
#define DT_N_S_pcie0_S_i2c_dd00_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/i2c@de00
 *
 * Node identifier: DT_N_S_pcie0_S_i2c_de00
 *
 * Binding (compatible = snps,designware-i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/snps,designware-i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_i2c_de00_PATH "/pcie0/i2c@de00"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_i2c_de00_FULL_NAME "i2c@de00"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_i2c_de00_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_i2c_de00_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_i2c_de00_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_i2c_de00_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_i2c_de00_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_i2c_de00_ORD 23

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_i2c_de00_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_i2c_de00_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_i2c_de00_EXISTS 1
#define DT_N_INST_14_snps_designware_i2c DT_N_S_pcie0_S_i2c_de00
#define DT_N_NODELABEL_i2c_pse_6         DT_N_S_pcie0_S_i2c_de00

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_i2c_de00_BUS_pcie 1
#define DT_N_S_pcie0_S_i2c_de00_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_i2c_de00_REG_NUM 1
#define DT_N_S_pcie0_S_i2c_de00_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_de00_REG_IDX_0_VAL_ADDRESS 56832 /* 0xde00 */
#define DT_N_S_pcie0_S_i2c_de00_REG_IDX_0_VAL_SIZE 1270841478 /* 0x4bbf8086 */
#define DT_N_S_pcie0_S_i2c_de00_IRQ_NUM 1
#define DT_N_S_pcie0_S_i2c_de00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_de00_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_i2c_de00_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_i2c_de00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_de00_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_i2c_de00_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_i2c_de00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_de00_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_i2c_de00_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_i2c_de00_COMPAT_MATCHES_snps_designware_i2c 1
#define DT_N_S_pcie0_S_i2c_de00_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_i2c_de00_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_i2c_de00_P_reg {56832 /* 0xde00 */, 1270841478 /* 0x4bbf8086 */}
#define DT_N_S_pcie0_S_i2c_de00_P_reg_IDX_0 56832
#define DT_N_S_pcie0_S_i2c_de00_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_de00_P_reg_IDX_1 1270841478
#define DT_N_S_pcie0_S_i2c_de00_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_de00_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_de00, reg, 0) \
	fn(DT_N_S_pcie0_S_i2c_de00, reg, 1)
#define DT_N_S_pcie0_S_i2c_de00_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_de00, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_de00, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_de00_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_i2c_de00_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_i2c_de00_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_i2c_de00_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_de00_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_i2c_de00_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_i2c_de00_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_i2c_de00_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_i2c_de00_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_de00, interrupts, 0) \
	fn(DT_N_S_pcie0_S_i2c_de00, interrupts, 1) \
	fn(DT_N_S_pcie0_S_i2c_de00, interrupts, 2)
#define DT_N_S_pcie0_S_i2c_de00_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_de00, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_de00, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_de00, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_de00_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_i2c_de00_P_clock_frequency 100000
#define DT_N_S_pcie0_S_i2c_de00_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_i2c_de00_P_label "I2C_PSE_6"
#define DT_N_S_pcie0_S_i2c_de00_P_label_STRING_TOKEN I2C_PSE_6
#define DT_N_S_pcie0_S_i2c_de00_P_label_STRING_UPPER_TOKEN I2C_PSE_6
#define DT_N_S_pcie0_S_i2c_de00_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_de00, label, 0) \
	fn(DT_N_S_pcie0_S_i2c_de00, label, 1) \
	fn(DT_N_S_pcie0_S_i2c_de00, label, 2) \
	fn(DT_N_S_pcie0_S_i2c_de00, label, 3) \
	fn(DT_N_S_pcie0_S_i2c_de00, label, 4) \
	fn(DT_N_S_pcie0_S_i2c_de00, label, 5) \
	fn(DT_N_S_pcie0_S_i2c_de00, label, 6) \
	fn(DT_N_S_pcie0_S_i2c_de00, label, 7) \
	fn(DT_N_S_pcie0_S_i2c_de00, label, 8)
#define DT_N_S_pcie0_S_i2c_de00_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_de00, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_de00, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_de00, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_de00, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_de00, label, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_de00, label, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_de00, label, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_de00, label, 7, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_de00, label, 8, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_de00_P_label_EXISTS 1
#define DT_N_S_pcie0_S_i2c_de00_P_status "disabled"
#define DT_N_S_pcie0_S_i2c_de00_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_de00_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_de00_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_i2c_de00_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_i2c_de00_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_i2c_de00_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_de00, status, 0) \
	fn(DT_N_S_pcie0_S_i2c_de00, status, 1) \
	fn(DT_N_S_pcie0_S_i2c_de00, status, 2) \
	fn(DT_N_S_pcie0_S_i2c_de00, status, 3) \
	fn(DT_N_S_pcie0_S_i2c_de00, status, 4) \
	fn(DT_N_S_pcie0_S_i2c_de00, status, 5) \
	fn(DT_N_S_pcie0_S_i2c_de00, status, 6) \
	fn(DT_N_S_pcie0_S_i2c_de00, status, 7)
#define DT_N_S_pcie0_S_i2c_de00_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_de00, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_de00, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_de00, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_de00, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_de00, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_de00, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_de00, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_i2c_de00, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_de00_P_status_EXISTS 1
#define DT_N_S_pcie0_S_i2c_de00_P_compatible {"snps,designware-i2c"}
#define DT_N_S_pcie0_S_i2c_de00_P_compatible_IDX_0 "snps,designware-i2c"
#define DT_N_S_pcie0_S_i2c_de00_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_de00_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_i2c_de00, compatible, 0)
#define DT_N_S_pcie0_S_i2c_de00_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_i2c_de00, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_i2c_de00_P_compatible_LEN 1
#define DT_N_S_pcie0_S_i2c_de00_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_i2c_de00_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_de00_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_de00_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_i2c_de00_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_i2c_de00_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_i2c_de00_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_i2c_de00_P_wakeup_source 0
#define DT_N_S_pcie0_S_i2c_de00_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/ivshmem@800
 *
 * Node identifier: DT_N_S_pcie0_S_ivshmem_800
 *
 * Binding (compatible = qemu,ivshmem):
 *   $ZEPHYR_BASE/dts/bindings/virtualization/qemu,ivshmem.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_ivshmem_800_PATH "/pcie0/ivshmem@800"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_ivshmem_800_FULL_NAME "ivshmem@800"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_ivshmem_800_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_ivshmem_800_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_ivshmem_800_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_ivshmem_800_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_ivshmem_800_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_ivshmem_800_ORD 24

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_ivshmem_800_REQUIRES_ORDS \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_ivshmem_800_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_ivshmem_800_EXISTS 1
#define DT_N_INST_0_qemu_ivshmem DT_N_S_pcie0_S_ivshmem_800
#define DT_N_NODELABEL_ivshmem0  DT_N_S_pcie0_S_ivshmem_800

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_ivshmem_800_BUS_pcie 1
#define DT_N_S_pcie0_S_ivshmem_800_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_ivshmem_800_REG_NUM 1
#define DT_N_S_pcie0_S_ivshmem_800_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_800_REG_IDX_0_VAL_ADDRESS 2048 /* 0x800 */
#define DT_N_S_pcie0_S_ivshmem_800_REG_IDX_0_VAL_SIZE 286268148 /* 0x11101af4 */
#define DT_N_S_pcie0_S_ivshmem_800_IRQ_NUM 0
#define DT_N_S_pcie0_S_ivshmem_800_COMPAT_MATCHES_qemu_ivshmem 1
#define DT_N_S_pcie0_S_ivshmem_800_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_ivshmem_800_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_ivshmem_800_P_status "okay"
#define DT_N_S_pcie0_S_ivshmem_800_P_status_STRING_TOKEN okay
#define DT_N_S_pcie0_S_ivshmem_800_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_pcie0_S_ivshmem_800_P_status_ENUM_IDX 1
#define DT_N_S_pcie0_S_ivshmem_800_P_status_ENUM_TOKEN okay
#define DT_N_S_pcie0_S_ivshmem_800_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_pcie0_S_ivshmem_800_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_ivshmem_800, status, 0) \
	fn(DT_N_S_pcie0_S_ivshmem_800, status, 1) \
	fn(DT_N_S_pcie0_S_ivshmem_800, status, 2) \
	fn(DT_N_S_pcie0_S_ivshmem_800, status, 3)
#define DT_N_S_pcie0_S_ivshmem_800_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_ivshmem_800, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_800, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_800, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_800, status, 3, __VA_ARGS__)
#define DT_N_S_pcie0_S_ivshmem_800_P_status_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_800_P_compatible {"qemu,ivshmem"}
#define DT_N_S_pcie0_S_ivshmem_800_P_compatible_IDX_0 "qemu,ivshmem"
#define DT_N_S_pcie0_S_ivshmem_800_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_800_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_ivshmem_800, compatible, 0)
#define DT_N_S_pcie0_S_ivshmem_800_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_ivshmem_800, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_ivshmem_800_P_compatible_LEN 1
#define DT_N_S_pcie0_S_ivshmem_800_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_800_P_reg {2048 /* 0x800 */, 286268148 /* 0x11101af4 */}
#define DT_N_S_pcie0_S_ivshmem_800_P_reg_IDX_0 2048
#define DT_N_S_pcie0_S_ivshmem_800_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_800_P_reg_IDX_1 286268148
#define DT_N_S_pcie0_S_ivshmem_800_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_800_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_ivshmem_800, reg, 0) \
	fn(DT_N_S_pcie0_S_ivshmem_800, reg, 1)
#define DT_N_S_pcie0_S_ivshmem_800_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_ivshmem_800, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_800, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_ivshmem_800_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_800_P_label "IVSHMEM_0"
#define DT_N_S_pcie0_S_ivshmem_800_P_label_STRING_TOKEN IVSHMEM_0
#define DT_N_S_pcie0_S_ivshmem_800_P_label_STRING_UPPER_TOKEN IVSHMEM_0
#define DT_N_S_pcie0_S_ivshmem_800_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_ivshmem_800, label, 0) \
	fn(DT_N_S_pcie0_S_ivshmem_800, label, 1) \
	fn(DT_N_S_pcie0_S_ivshmem_800, label, 2) \
	fn(DT_N_S_pcie0_S_ivshmem_800, label, 3) \
	fn(DT_N_S_pcie0_S_ivshmem_800, label, 4) \
	fn(DT_N_S_pcie0_S_ivshmem_800, label, 5) \
	fn(DT_N_S_pcie0_S_ivshmem_800, label, 6) \
	fn(DT_N_S_pcie0_S_ivshmem_800, label, 7) \
	fn(DT_N_S_pcie0_S_ivshmem_800, label, 8)
#define DT_N_S_pcie0_S_ivshmem_800_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_ivshmem_800, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_800, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_800, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_800, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_800, label, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_800, label, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_800, label, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_800, label, 7, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_800, label, 8, __VA_ARGS__)
#define DT_N_S_pcie0_S_ivshmem_800_P_label_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_800_P_wakeup_source 0
#define DT_N_S_pcie0_S_ivshmem_800_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/ivshmem@1000
 *
 * Node identifier: DT_N_S_pcie0_S_ivshmem_1000
 *
 * Binding (compatible = qemu,ivshmem):
 *   $ZEPHYR_BASE/dts/bindings/virtualization/qemu,ivshmem.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_ivshmem_1000_PATH "/pcie0/ivshmem@1000"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_ivshmem_1000_FULL_NAME "ivshmem@1000"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_ivshmem_1000_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_ivshmem_1000_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_ivshmem_1000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_ivshmem_1000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_ivshmem_1000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_ivshmem_1000_ORD 25

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_ivshmem_1000_REQUIRES_ORDS \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_ivshmem_1000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_ivshmem_1000_EXISTS 1
#define DT_N_INST_1_qemu_ivshmem DT_N_S_pcie0_S_ivshmem_1000
#define DT_N_NODELABEL_ivshmem1  DT_N_S_pcie0_S_ivshmem_1000

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_ivshmem_1000_BUS_pcie 1
#define DT_N_S_pcie0_S_ivshmem_1000_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_ivshmem_1000_REG_NUM 1
#define DT_N_S_pcie0_S_ivshmem_1000_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_1000_REG_IDX_0_VAL_ADDRESS 4096 /* 0x1000 */
#define DT_N_S_pcie0_S_ivshmem_1000_REG_IDX_0_VAL_SIZE 286268148 /* 0x11101af4 */
#define DT_N_S_pcie0_S_ivshmem_1000_IRQ_NUM 0
#define DT_N_S_pcie0_S_ivshmem_1000_COMPAT_MATCHES_qemu_ivshmem 1
#define DT_N_S_pcie0_S_ivshmem_1000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_ivshmem_1000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_ivshmem_1000_P_status "okay"
#define DT_N_S_pcie0_S_ivshmem_1000_P_status_STRING_TOKEN okay
#define DT_N_S_pcie0_S_ivshmem_1000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_pcie0_S_ivshmem_1000_P_status_ENUM_IDX 1
#define DT_N_S_pcie0_S_ivshmem_1000_P_status_ENUM_TOKEN okay
#define DT_N_S_pcie0_S_ivshmem_1000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_pcie0_S_ivshmem_1000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_ivshmem_1000, status, 0) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, status, 1) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, status, 2) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, status, 3)
#define DT_N_S_pcie0_S_ivshmem_1000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_ivshmem_1000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, status, 3, __VA_ARGS__)
#define DT_N_S_pcie0_S_ivshmem_1000_P_status_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_1000_P_compatible {"qemu,ivshmem"}
#define DT_N_S_pcie0_S_ivshmem_1000_P_compatible_IDX_0 "qemu,ivshmem"
#define DT_N_S_pcie0_S_ivshmem_1000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_1000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_ivshmem_1000, compatible, 0)
#define DT_N_S_pcie0_S_ivshmem_1000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_ivshmem_1000, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_ivshmem_1000_P_compatible_LEN 1
#define DT_N_S_pcie0_S_ivshmem_1000_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_1000_P_reg {4096 /* 0x1000 */, 286268148 /* 0x11101af4 */}
#define DT_N_S_pcie0_S_ivshmem_1000_P_reg_IDX_0 4096
#define DT_N_S_pcie0_S_ivshmem_1000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_1000_P_reg_IDX_1 286268148
#define DT_N_S_pcie0_S_ivshmem_1000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_1000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_ivshmem_1000, reg, 0) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, reg, 1)
#define DT_N_S_pcie0_S_ivshmem_1000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_ivshmem_1000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_ivshmem_1000_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_1000_P_label "IVSHMEM_1"
#define DT_N_S_pcie0_S_ivshmem_1000_P_label_STRING_TOKEN IVSHMEM_1
#define DT_N_S_pcie0_S_ivshmem_1000_P_label_STRING_UPPER_TOKEN IVSHMEM_1
#define DT_N_S_pcie0_S_ivshmem_1000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_ivshmem_1000, label, 0) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, label, 1) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, label, 2) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, label, 3) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, label, 4) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, label, 5) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, label, 6) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, label, 7) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, label, 8)
#define DT_N_S_pcie0_S_ivshmem_1000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_ivshmem_1000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, label, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, label, 7, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_1000, label, 8, __VA_ARGS__)
#define DT_N_S_pcie0_S_ivshmem_1000_P_label_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_1000_P_wakeup_source 0
#define DT_N_S_pcie0_S_ivshmem_1000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/ivshmem@1800
 *
 * Node identifier: DT_N_S_pcie0_S_ivshmem_1800
 *
 * Binding (compatible = qemu,ivshmem):
 *   $ZEPHYR_BASE/dts/bindings/virtualization/qemu,ivshmem.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_ivshmem_1800_PATH "/pcie0/ivshmem@1800"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_ivshmem_1800_FULL_NAME "ivshmem@1800"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_ivshmem_1800_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_ivshmem_1800_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_ivshmem_1800_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_ivshmem_1800_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_ivshmem_1800_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_ivshmem_1800_ORD 26

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_ivshmem_1800_REQUIRES_ORDS \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_ivshmem_1800_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_ivshmem_1800_EXISTS 1
#define DT_N_INST_2_qemu_ivshmem DT_N_S_pcie0_S_ivshmem_1800
#define DT_N_NODELABEL_ivshmem2  DT_N_S_pcie0_S_ivshmem_1800

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_ivshmem_1800_BUS_pcie 1
#define DT_N_S_pcie0_S_ivshmem_1800_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_ivshmem_1800_REG_NUM 1
#define DT_N_S_pcie0_S_ivshmem_1800_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_1800_REG_IDX_0_VAL_ADDRESS 6144 /* 0x1800 */
#define DT_N_S_pcie0_S_ivshmem_1800_REG_IDX_0_VAL_SIZE 286268148 /* 0x11101af4 */
#define DT_N_S_pcie0_S_ivshmem_1800_IRQ_NUM 0
#define DT_N_S_pcie0_S_ivshmem_1800_COMPAT_MATCHES_qemu_ivshmem 1
#define DT_N_S_pcie0_S_ivshmem_1800_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_ivshmem_1800_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_ivshmem_1800_P_status "okay"
#define DT_N_S_pcie0_S_ivshmem_1800_P_status_STRING_TOKEN okay
#define DT_N_S_pcie0_S_ivshmem_1800_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_pcie0_S_ivshmem_1800_P_status_ENUM_IDX 1
#define DT_N_S_pcie0_S_ivshmem_1800_P_status_ENUM_TOKEN okay
#define DT_N_S_pcie0_S_ivshmem_1800_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_pcie0_S_ivshmem_1800_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_ivshmem_1800, status, 0) \
	fn(DT_N_S_pcie0_S_ivshmem_1800, status, 1) \
	fn(DT_N_S_pcie0_S_ivshmem_1800, status, 2) \
	fn(DT_N_S_pcie0_S_ivshmem_1800, status, 3)
#define DT_N_S_pcie0_S_ivshmem_1800_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_ivshmem_1800, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_1800, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_1800, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_1800, status, 3, __VA_ARGS__)
#define DT_N_S_pcie0_S_ivshmem_1800_P_status_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_1800_P_compatible {"qemu,ivshmem"}
#define DT_N_S_pcie0_S_ivshmem_1800_P_compatible_IDX_0 "qemu,ivshmem"
#define DT_N_S_pcie0_S_ivshmem_1800_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_1800_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_ivshmem_1800, compatible, 0)
#define DT_N_S_pcie0_S_ivshmem_1800_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_ivshmem_1800, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_ivshmem_1800_P_compatible_LEN 1
#define DT_N_S_pcie0_S_ivshmem_1800_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_1800_P_reg {6144 /* 0x1800 */, 286268148 /* 0x11101af4 */}
#define DT_N_S_pcie0_S_ivshmem_1800_P_reg_IDX_0 6144
#define DT_N_S_pcie0_S_ivshmem_1800_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_1800_P_reg_IDX_1 286268148
#define DT_N_S_pcie0_S_ivshmem_1800_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_1800_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_ivshmem_1800, reg, 0) \
	fn(DT_N_S_pcie0_S_ivshmem_1800, reg, 1)
#define DT_N_S_pcie0_S_ivshmem_1800_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_ivshmem_1800, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_1800, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_ivshmem_1800_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_1800_P_label "IVSHMEM"
#define DT_N_S_pcie0_S_ivshmem_1800_P_label_STRING_TOKEN IVSHMEM
#define DT_N_S_pcie0_S_ivshmem_1800_P_label_STRING_UPPER_TOKEN IVSHMEM
#define DT_N_S_pcie0_S_ivshmem_1800_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_ivshmem_1800, label, 0) \
	fn(DT_N_S_pcie0_S_ivshmem_1800, label, 1) \
	fn(DT_N_S_pcie0_S_ivshmem_1800, label, 2) \
	fn(DT_N_S_pcie0_S_ivshmem_1800, label, 3) \
	fn(DT_N_S_pcie0_S_ivshmem_1800, label, 4) \
	fn(DT_N_S_pcie0_S_ivshmem_1800, label, 5) \
	fn(DT_N_S_pcie0_S_ivshmem_1800, label, 6)
#define DT_N_S_pcie0_S_ivshmem_1800_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_ivshmem_1800, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_1800, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_1800, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_1800, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_1800, label, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_1800, label, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_1800, label, 6, __VA_ARGS__)
#define DT_N_S_pcie0_S_ivshmem_1800_P_label_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_1800_P_wakeup_source 0
#define DT_N_S_pcie0_S_ivshmem_1800_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/ivshmem@2000
 *
 * Node identifier: DT_N_S_pcie0_S_ivshmem_2000
 *
 * Binding (compatible = qemu,ivshmem):
 *   $ZEPHYR_BASE/dts/bindings/virtualization/qemu,ivshmem.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_ivshmem_2000_PATH "/pcie0/ivshmem@2000"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_ivshmem_2000_FULL_NAME "ivshmem@2000"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_ivshmem_2000_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_ivshmem_2000_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_ivshmem_2000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_ivshmem_2000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_ivshmem_2000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_ivshmem_2000_ORD 27

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_ivshmem_2000_REQUIRES_ORDS \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_ivshmem_2000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_ivshmem_2000_EXISTS 1
#define DT_N_INST_3_qemu_ivshmem DT_N_S_pcie0_S_ivshmem_2000
#define DT_N_NODELABEL_ivshmem3  DT_N_S_pcie0_S_ivshmem_2000

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_ivshmem_2000_BUS_pcie 1
#define DT_N_S_pcie0_S_ivshmem_2000_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_ivshmem_2000_REG_NUM 1
#define DT_N_S_pcie0_S_ivshmem_2000_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_2000_REG_IDX_0_VAL_ADDRESS 8192 /* 0x2000 */
#define DT_N_S_pcie0_S_ivshmem_2000_REG_IDX_0_VAL_SIZE 286268148 /* 0x11101af4 */
#define DT_N_S_pcie0_S_ivshmem_2000_IRQ_NUM 0
#define DT_N_S_pcie0_S_ivshmem_2000_COMPAT_MATCHES_qemu_ivshmem 1
#define DT_N_S_pcie0_S_ivshmem_2000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_ivshmem_2000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_ivshmem_2000_P_status "okay"
#define DT_N_S_pcie0_S_ivshmem_2000_P_status_STRING_TOKEN okay
#define DT_N_S_pcie0_S_ivshmem_2000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_pcie0_S_ivshmem_2000_P_status_ENUM_IDX 1
#define DT_N_S_pcie0_S_ivshmem_2000_P_status_ENUM_TOKEN okay
#define DT_N_S_pcie0_S_ivshmem_2000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_pcie0_S_ivshmem_2000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_ivshmem_2000, status, 0) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, status, 1) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, status, 2) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, status, 3)
#define DT_N_S_pcie0_S_ivshmem_2000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_ivshmem_2000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, status, 3, __VA_ARGS__)
#define DT_N_S_pcie0_S_ivshmem_2000_P_status_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_2000_P_compatible {"qemu,ivshmem"}
#define DT_N_S_pcie0_S_ivshmem_2000_P_compatible_IDX_0 "qemu,ivshmem"
#define DT_N_S_pcie0_S_ivshmem_2000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_2000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_ivshmem_2000, compatible, 0)
#define DT_N_S_pcie0_S_ivshmem_2000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_ivshmem_2000, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_ivshmem_2000_P_compatible_LEN 1
#define DT_N_S_pcie0_S_ivshmem_2000_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_2000_P_reg {8192 /* 0x2000 */, 286268148 /* 0x11101af4 */}
#define DT_N_S_pcie0_S_ivshmem_2000_P_reg_IDX_0 8192
#define DT_N_S_pcie0_S_ivshmem_2000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_2000_P_reg_IDX_1 286268148
#define DT_N_S_pcie0_S_ivshmem_2000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_2000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_ivshmem_2000, reg, 0) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, reg, 1)
#define DT_N_S_pcie0_S_ivshmem_2000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_ivshmem_2000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_ivshmem_2000_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_2000_P_label "IVSHMEM_3"
#define DT_N_S_pcie0_S_ivshmem_2000_P_label_STRING_TOKEN IVSHMEM_3
#define DT_N_S_pcie0_S_ivshmem_2000_P_label_STRING_UPPER_TOKEN IVSHMEM_3
#define DT_N_S_pcie0_S_ivshmem_2000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_ivshmem_2000, label, 0) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, label, 1) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, label, 2) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, label, 3) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, label, 4) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, label, 5) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, label, 6) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, label, 7) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, label, 8)
#define DT_N_S_pcie0_S_ivshmem_2000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_ivshmem_2000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, label, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, label, 7, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ivshmem_2000, label, 8, __VA_ARGS__)
#define DT_N_S_pcie0_S_ivshmem_2000_P_label_EXISTS 1
#define DT_N_S_pcie0_S_ivshmem_2000_P_wakeup_source 0
#define DT_N_S_pcie0_S_ivshmem_2000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/ptm_root@e000
 *
 * Node identifier: DT_N_S_pcie0_S_ptm_root_e000
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_ptm_root_e000_PATH "/pcie0/ptm_root@e000"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_ptm_root_e000_FULL_NAME "ptm_root@e000"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_ptm_root_e000_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_ptm_root_e000_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_ptm_root_e000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_ptm_root_e000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_ptm_root_e000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_ptm_root_e000_ORD 28

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_ptm_root_e000_REQUIRES_ORDS \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_ptm_root_e000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_ptm_root_e000_EXISTS 1
#define DT_N_INST_0_ptm_root     DT_N_S_pcie0_S_ptm_root_e000
#define DT_N_NODELABEL_ptm_root0 DT_N_S_pcie0_S_ptm_root_e000

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_ptm_root_e000_BUS_pcie 1
#define DT_N_S_pcie0_S_ptm_root_e000_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_ptm_root_e000_REG_NUM 1
#define DT_N_S_pcie0_S_ptm_root_e000_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_ptm_root_e000_REG_IDX_0_VAL_ADDRESS 57344 /* 0xe000 */
#define DT_N_S_pcie0_S_ptm_root_e000_REG_IDX_0_VAL_SIZE 1261994118 /* 0x4b388086 */
#define DT_N_S_pcie0_S_ptm_root_e000_IRQ_NUM 0
#define DT_N_S_pcie0_S_ptm_root_e000_COMPAT_MATCHES_ptm_root 1
#define DT_N_S_pcie0_S_ptm_root_e000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_ptm_root_e000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_ptm_root_e000_P_compatible {"ptm-root"}
#define DT_N_S_pcie0_S_ptm_root_e000_P_compatible_IDX_0 "ptm-root"
#define DT_N_S_pcie0_S_ptm_root_e000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_ptm_root_e000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_ptm_root_e000, compatible, 0)
#define DT_N_S_pcie0_S_ptm_root_e000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_ptm_root_e000, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_ptm_root_e000_P_compatible_LEN 1
#define DT_N_S_pcie0_S_ptm_root_e000_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_ptm_root_e000_P_reg {57344 /* 0xe000 */, 1261994118 /* 0x4b388086 */}
#define DT_N_S_pcie0_S_ptm_root_e000_P_reg_IDX_0 57344
#define DT_N_S_pcie0_S_ptm_root_e000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_ptm_root_e000_P_reg_IDX_1 1261994118
#define DT_N_S_pcie0_S_ptm_root_e000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_ptm_root_e000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_ptm_root_e000, reg, 0) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, reg, 1)
#define DT_N_S_pcie0_S_ptm_root_e000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_ptm_root_e000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_ptm_root_e000_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_ptm_root_e000_P_label "PTM_ROOT_0"
#define DT_N_S_pcie0_S_ptm_root_e000_P_label_STRING_TOKEN PTM_ROOT_0
#define DT_N_S_pcie0_S_ptm_root_e000_P_label_STRING_UPPER_TOKEN PTM_ROOT_0
#define DT_N_S_pcie0_S_ptm_root_e000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_ptm_root_e000, label, 0) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, label, 1) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, label, 2) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, label, 3) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, label, 4) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, label, 5) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, label, 6) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, label, 7) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, label, 8) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, label, 9)
#define DT_N_S_pcie0_S_ptm_root_e000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_ptm_root_e000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, label, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, label, 7, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, label, 8, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, label, 9, __VA_ARGS__)
#define DT_N_S_pcie0_S_ptm_root_e000_P_label_EXISTS 1
#define DT_N_S_pcie0_S_ptm_root_e000_P_status "okay"
#define DT_N_S_pcie0_S_ptm_root_e000_P_status_STRING_TOKEN okay
#define DT_N_S_pcie0_S_ptm_root_e000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_pcie0_S_ptm_root_e000_P_status_ENUM_IDX 1
#define DT_N_S_pcie0_S_ptm_root_e000_P_status_ENUM_TOKEN okay
#define DT_N_S_pcie0_S_ptm_root_e000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_pcie0_S_ptm_root_e000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_ptm_root_e000, status, 0) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, status, 1) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, status, 2) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, status, 3)
#define DT_N_S_pcie0_S_ptm_root_e000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_ptm_root_e000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_ptm_root_e000, status, 3, __VA_ARGS__)
#define DT_N_S_pcie0_S_ptm_root_e000_P_status_EXISTS 1

/*
 * Devicetree node: /pcie0/uart@8800
 *
 * Node identifier: DT_N_S_pcie0_S_uart_8800
 *
 * Binding (compatible = ns16550):
 *   $ZEPHYR_BASE/dts/bindings/serial/ns16550.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_uart_8800_PATH "/pcie0/uart@8800"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_uart_8800_FULL_NAME "uart@8800"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_uart_8800_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_uart_8800_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_uart_8800_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_uart_8800_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_uart_8800_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_uart_8800_ORD 29

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_uart_8800_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_uart_8800_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_uart_8800_EXISTS 1
#define DT_N_INST_5_ns16550       DT_N_S_pcie0_S_uart_8800
#define DT_N_NODELABEL_uart_pse_0 DT_N_S_pcie0_S_uart_8800

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_uart_8800_BUS_pcie 1
#define DT_N_S_pcie0_S_uart_8800_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_uart_8800_REG_NUM 1
#define DT_N_S_pcie0_S_uart_8800_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8800_REG_IDX_0_VAL_ADDRESS 34816 /* 0x8800 */
#define DT_N_S_pcie0_S_uart_8800_REG_IDX_0_VAL_SIZE 1268154502 /* 0x4b968086 */
#define DT_N_S_pcie0_S_uart_8800_IRQ_NUM 1
#define DT_N_S_pcie0_S_uart_8800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8800_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_uart_8800_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_uart_8800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8800_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_uart_8800_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_uart_8800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8800_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_uart_8800_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_uart_8800_COMPAT_MATCHES_ns16550 1
#define DT_N_S_pcie0_S_uart_8800_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_uart_8800_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_uart_8800_P_reg {34816 /* 0x8800 */, 1268154502 /* 0x4b968086 */}
#define DT_N_S_pcie0_S_uart_8800_P_reg_IDX_0 34816
#define DT_N_S_pcie0_S_uart_8800_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8800_P_reg_IDX_1 1268154502
#define DT_N_S_pcie0_S_uart_8800_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_uart_8800_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8800, reg, 0) \
	fn(DT_N_S_pcie0_S_uart_8800, reg, 1)
#define DT_N_S_pcie0_S_uart_8800_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8800, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8800, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8800_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_uart_8800_P_clock_frequency 1843200
#define DT_N_S_pcie0_S_uart_8800_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_uart_8800_P_current_speed 115200
#define DT_N_S_pcie0_S_uart_8800_P_current_speed_EXISTS 1
#define DT_N_S_pcie0_S_uart_8800_P_label "UART_PSE_0"
#define DT_N_S_pcie0_S_uart_8800_P_label_STRING_TOKEN UART_PSE_0
#define DT_N_S_pcie0_S_uart_8800_P_label_STRING_UPPER_TOKEN UART_PSE_0
#define DT_N_S_pcie0_S_uart_8800_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8800, label, 0) \
	fn(DT_N_S_pcie0_S_uart_8800, label, 1) \
	fn(DT_N_S_pcie0_S_uart_8800, label, 2) \
	fn(DT_N_S_pcie0_S_uart_8800, label, 3) \
	fn(DT_N_S_pcie0_S_uart_8800, label, 4) \
	fn(DT_N_S_pcie0_S_uart_8800, label, 5) \
	fn(DT_N_S_pcie0_S_uart_8800, label, 6) \
	fn(DT_N_S_pcie0_S_uart_8800, label, 7) \
	fn(DT_N_S_pcie0_S_uart_8800, label, 8) \
	fn(DT_N_S_pcie0_S_uart_8800, label, 9)
#define DT_N_S_pcie0_S_uart_8800_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8800, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8800, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8800, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8800, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8800, label, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8800, label, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8800, label, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8800, label, 7, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8800, label, 8, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8800, label, 9, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8800_P_label_EXISTS 1
#define DT_N_S_pcie0_S_uart_8800_P_hw_flow_control 0
#define DT_N_S_pcie0_S_uart_8800_P_hw_flow_control_EXISTS 1
#define DT_N_S_pcie0_S_uart_8800_P_status "disabled"
#define DT_N_S_pcie0_S_uart_8800_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_uart_8800_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_uart_8800_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_uart_8800_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_uart_8800_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_uart_8800_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8800, status, 0) \
	fn(DT_N_S_pcie0_S_uart_8800, status, 1) \
	fn(DT_N_S_pcie0_S_uart_8800, status, 2) \
	fn(DT_N_S_pcie0_S_uart_8800, status, 3) \
	fn(DT_N_S_pcie0_S_uart_8800, status, 4) \
	fn(DT_N_S_pcie0_S_uart_8800, status, 5) \
	fn(DT_N_S_pcie0_S_uart_8800, status, 6) \
	fn(DT_N_S_pcie0_S_uart_8800, status, 7)
#define DT_N_S_pcie0_S_uart_8800_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8800, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8800, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8800, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8800, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8800, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8800, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8800, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8800, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8800_P_status_EXISTS 1
#define DT_N_S_pcie0_S_uart_8800_P_compatible {"ns16550"}
#define DT_N_S_pcie0_S_uart_8800_P_compatible_IDX_0 "ns16550"
#define DT_N_S_pcie0_S_uart_8800_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8800_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8800, compatible, 0)
#define DT_N_S_pcie0_S_uart_8800_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8800, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8800_P_compatible_LEN 1
#define DT_N_S_pcie0_S_uart_8800_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_uart_8800_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_uart_8800_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_uart_8800_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8800_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_uart_8800_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_uart_8800_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_uart_8800_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_uart_8800_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8800, interrupts, 0) \
	fn(DT_N_S_pcie0_S_uart_8800, interrupts, 1) \
	fn(DT_N_S_pcie0_S_uart_8800, interrupts, 2)
#define DT_N_S_pcie0_S_uart_8800_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8800, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8800, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8800, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8800_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_uart_8800_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_8800_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_8800_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_8800_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8800_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_uart_8800_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_uart_8800_P_wakeup_source 0
#define DT_N_S_pcie0_S_uart_8800_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/uart@8900
 *
 * Node identifier: DT_N_S_pcie0_S_uart_8900
 *
 * Binding (compatible = ns16550):
 *   $ZEPHYR_BASE/dts/bindings/serial/ns16550.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_uart_8900_PATH "/pcie0/uart@8900"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_uart_8900_FULL_NAME "uart@8900"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_uart_8900_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_uart_8900_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_uart_8900_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_uart_8900_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_uart_8900_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_uart_8900_ORD 30

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_uart_8900_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_uart_8900_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_uart_8900_EXISTS 1
#define DT_N_INST_6_ns16550       DT_N_S_pcie0_S_uart_8900
#define DT_N_NODELABEL_uart_pse_1 DT_N_S_pcie0_S_uart_8900

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_uart_8900_BUS_pcie 1
#define DT_N_S_pcie0_S_uart_8900_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_uart_8900_REG_NUM 1
#define DT_N_S_pcie0_S_uart_8900_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8900_REG_IDX_0_VAL_ADDRESS 35072 /* 0x8900 */
#define DT_N_S_pcie0_S_uart_8900_REG_IDX_0_VAL_SIZE 1268220038 /* 0x4b978086 */
#define DT_N_S_pcie0_S_uart_8900_IRQ_NUM 1
#define DT_N_S_pcie0_S_uart_8900_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8900_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_uart_8900_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_uart_8900_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8900_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_uart_8900_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_uart_8900_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8900_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_uart_8900_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_uart_8900_COMPAT_MATCHES_ns16550 1
#define DT_N_S_pcie0_S_uart_8900_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_uart_8900_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_uart_8900_P_reg {35072 /* 0x8900 */, 1268220038 /* 0x4b978086 */}
#define DT_N_S_pcie0_S_uart_8900_P_reg_IDX_0 35072
#define DT_N_S_pcie0_S_uart_8900_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8900_P_reg_IDX_1 1268220038
#define DT_N_S_pcie0_S_uart_8900_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_uart_8900_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8900, reg, 0) \
	fn(DT_N_S_pcie0_S_uart_8900, reg, 1)
#define DT_N_S_pcie0_S_uart_8900_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8900, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8900, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8900_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_uart_8900_P_clock_frequency 1843200
#define DT_N_S_pcie0_S_uart_8900_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_uart_8900_P_current_speed 115200
#define DT_N_S_pcie0_S_uart_8900_P_current_speed_EXISTS 1
#define DT_N_S_pcie0_S_uart_8900_P_label "UART_PSE_1"
#define DT_N_S_pcie0_S_uart_8900_P_label_STRING_TOKEN UART_PSE_1
#define DT_N_S_pcie0_S_uart_8900_P_label_STRING_UPPER_TOKEN UART_PSE_1
#define DT_N_S_pcie0_S_uart_8900_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8900, label, 0) \
	fn(DT_N_S_pcie0_S_uart_8900, label, 1) \
	fn(DT_N_S_pcie0_S_uart_8900, label, 2) \
	fn(DT_N_S_pcie0_S_uart_8900, label, 3) \
	fn(DT_N_S_pcie0_S_uart_8900, label, 4) \
	fn(DT_N_S_pcie0_S_uart_8900, label, 5) \
	fn(DT_N_S_pcie0_S_uart_8900, label, 6) \
	fn(DT_N_S_pcie0_S_uart_8900, label, 7) \
	fn(DT_N_S_pcie0_S_uart_8900, label, 8) \
	fn(DT_N_S_pcie0_S_uart_8900, label, 9)
#define DT_N_S_pcie0_S_uart_8900_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8900, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8900, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8900, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8900, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8900, label, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8900, label, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8900, label, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8900, label, 7, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8900, label, 8, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8900, label, 9, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8900_P_label_EXISTS 1
#define DT_N_S_pcie0_S_uart_8900_P_hw_flow_control 0
#define DT_N_S_pcie0_S_uart_8900_P_hw_flow_control_EXISTS 1
#define DT_N_S_pcie0_S_uart_8900_P_status "disabled"
#define DT_N_S_pcie0_S_uart_8900_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_uart_8900_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_uart_8900_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_uart_8900_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_uart_8900_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_uart_8900_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8900, status, 0) \
	fn(DT_N_S_pcie0_S_uart_8900, status, 1) \
	fn(DT_N_S_pcie0_S_uart_8900, status, 2) \
	fn(DT_N_S_pcie0_S_uart_8900, status, 3) \
	fn(DT_N_S_pcie0_S_uart_8900, status, 4) \
	fn(DT_N_S_pcie0_S_uart_8900, status, 5) \
	fn(DT_N_S_pcie0_S_uart_8900, status, 6) \
	fn(DT_N_S_pcie0_S_uart_8900, status, 7)
#define DT_N_S_pcie0_S_uart_8900_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8900, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8900, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8900, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8900, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8900, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8900, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8900, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8900, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8900_P_status_EXISTS 1
#define DT_N_S_pcie0_S_uart_8900_P_compatible {"ns16550"}
#define DT_N_S_pcie0_S_uart_8900_P_compatible_IDX_0 "ns16550"
#define DT_N_S_pcie0_S_uart_8900_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8900_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8900, compatible, 0)
#define DT_N_S_pcie0_S_uart_8900_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8900, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8900_P_compatible_LEN 1
#define DT_N_S_pcie0_S_uart_8900_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_uart_8900_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_uart_8900_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_uart_8900_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8900_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_uart_8900_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_uart_8900_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_uart_8900_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_uart_8900_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8900, interrupts, 0) \
	fn(DT_N_S_pcie0_S_uart_8900, interrupts, 1) \
	fn(DT_N_S_pcie0_S_uart_8900, interrupts, 2)
#define DT_N_S_pcie0_S_uart_8900_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8900, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8900, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8900, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8900_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_uart_8900_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_8900_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_8900_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_8900_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8900_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_uart_8900_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_uart_8900_P_wakeup_source 0
#define DT_N_S_pcie0_S_uart_8900_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/uart@8a00
 *
 * Node identifier: DT_N_S_pcie0_S_uart_8a00
 *
 * Binding (compatible = ns16550):
 *   $ZEPHYR_BASE/dts/bindings/serial/ns16550.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_uart_8a00_PATH "/pcie0/uart@8a00"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_uart_8a00_FULL_NAME "uart@8a00"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_uart_8a00_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_uart_8a00_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_uart_8a00_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_uart_8a00_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_uart_8a00_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_uart_8a00_ORD 31

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_uart_8a00_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_uart_8a00_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_uart_8a00_EXISTS 1
#define DT_N_INST_7_ns16550       DT_N_S_pcie0_S_uart_8a00
#define DT_N_NODELABEL_uart_pse_2 DT_N_S_pcie0_S_uart_8a00

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_uart_8a00_BUS_pcie 1
#define DT_N_S_pcie0_S_uart_8a00_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_uart_8a00_REG_NUM 1
#define DT_N_S_pcie0_S_uart_8a00_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8a00_REG_IDX_0_VAL_ADDRESS 35328 /* 0x8a00 */
#define DT_N_S_pcie0_S_uart_8a00_REG_IDX_0_VAL_SIZE 1268285574 /* 0x4b988086 */
#define DT_N_S_pcie0_S_uart_8a00_IRQ_NUM 1
#define DT_N_S_pcie0_S_uart_8a00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8a00_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_uart_8a00_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_uart_8a00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8a00_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_uart_8a00_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_uart_8a00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8a00_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_uart_8a00_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_uart_8a00_COMPAT_MATCHES_ns16550 1
#define DT_N_S_pcie0_S_uart_8a00_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_uart_8a00_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_uart_8a00_P_reg {35328 /* 0x8a00 */, 1268285574 /* 0x4b988086 */}
#define DT_N_S_pcie0_S_uart_8a00_P_reg_IDX_0 35328
#define DT_N_S_pcie0_S_uart_8a00_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8a00_P_reg_IDX_1 1268285574
#define DT_N_S_pcie0_S_uart_8a00_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_uart_8a00_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8a00, reg, 0) \
	fn(DT_N_S_pcie0_S_uart_8a00, reg, 1)
#define DT_N_S_pcie0_S_uart_8a00_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8a00, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8a00, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8a00_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_uart_8a00_P_clock_frequency 1843200
#define DT_N_S_pcie0_S_uart_8a00_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_uart_8a00_P_current_speed 115200
#define DT_N_S_pcie0_S_uart_8a00_P_current_speed_EXISTS 1
#define DT_N_S_pcie0_S_uart_8a00_P_label "UART_PSE_2"
#define DT_N_S_pcie0_S_uart_8a00_P_label_STRING_TOKEN UART_PSE_2
#define DT_N_S_pcie0_S_uart_8a00_P_label_STRING_UPPER_TOKEN UART_PSE_2
#define DT_N_S_pcie0_S_uart_8a00_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8a00, label, 0) \
	fn(DT_N_S_pcie0_S_uart_8a00, label, 1) \
	fn(DT_N_S_pcie0_S_uart_8a00, label, 2) \
	fn(DT_N_S_pcie0_S_uart_8a00, label, 3) \
	fn(DT_N_S_pcie0_S_uart_8a00, label, 4) \
	fn(DT_N_S_pcie0_S_uart_8a00, label, 5) \
	fn(DT_N_S_pcie0_S_uart_8a00, label, 6) \
	fn(DT_N_S_pcie0_S_uart_8a00, label, 7) \
	fn(DT_N_S_pcie0_S_uart_8a00, label, 8) \
	fn(DT_N_S_pcie0_S_uart_8a00, label, 9)
#define DT_N_S_pcie0_S_uart_8a00_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8a00, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8a00, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8a00, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8a00, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8a00, label, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8a00, label, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8a00, label, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8a00, label, 7, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8a00, label, 8, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8a00, label, 9, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8a00_P_label_EXISTS 1
#define DT_N_S_pcie0_S_uart_8a00_P_hw_flow_control 0
#define DT_N_S_pcie0_S_uart_8a00_P_hw_flow_control_EXISTS 1
#define DT_N_S_pcie0_S_uart_8a00_P_status "disabled"
#define DT_N_S_pcie0_S_uart_8a00_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_uart_8a00_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_uart_8a00_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_uart_8a00_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_uart_8a00_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_uart_8a00_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8a00, status, 0) \
	fn(DT_N_S_pcie0_S_uart_8a00, status, 1) \
	fn(DT_N_S_pcie0_S_uart_8a00, status, 2) \
	fn(DT_N_S_pcie0_S_uart_8a00, status, 3) \
	fn(DT_N_S_pcie0_S_uart_8a00, status, 4) \
	fn(DT_N_S_pcie0_S_uart_8a00, status, 5) \
	fn(DT_N_S_pcie0_S_uart_8a00, status, 6) \
	fn(DT_N_S_pcie0_S_uart_8a00, status, 7)
#define DT_N_S_pcie0_S_uart_8a00_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8a00, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8a00, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8a00, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8a00, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8a00, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8a00, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8a00, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8a00, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8a00_P_status_EXISTS 1
#define DT_N_S_pcie0_S_uart_8a00_P_compatible {"ns16550"}
#define DT_N_S_pcie0_S_uart_8a00_P_compatible_IDX_0 "ns16550"
#define DT_N_S_pcie0_S_uart_8a00_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8a00_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8a00, compatible, 0)
#define DT_N_S_pcie0_S_uart_8a00_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8a00, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8a00_P_compatible_LEN 1
#define DT_N_S_pcie0_S_uart_8a00_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_uart_8a00_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_uart_8a00_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_uart_8a00_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8a00_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_uart_8a00_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_uart_8a00_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_uart_8a00_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_uart_8a00_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8a00, interrupts, 0) \
	fn(DT_N_S_pcie0_S_uart_8a00, interrupts, 1) \
	fn(DT_N_S_pcie0_S_uart_8a00, interrupts, 2)
#define DT_N_S_pcie0_S_uart_8a00_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8a00, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8a00, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8a00, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8a00_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_uart_8a00_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_8a00_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_8a00_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_8a00_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8a00_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_uart_8a00_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_uart_8a00_P_wakeup_source 0
#define DT_N_S_pcie0_S_uart_8a00_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/uart@8b00
 *
 * Node identifier: DT_N_S_pcie0_S_uart_8b00
 *
 * Binding (compatible = ns16550):
 *   $ZEPHYR_BASE/dts/bindings/serial/ns16550.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_uart_8b00_PATH "/pcie0/uart@8b00"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_uart_8b00_FULL_NAME "uart@8b00"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_uart_8b00_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_uart_8b00_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_uart_8b00_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_uart_8b00_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_uart_8b00_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_uart_8b00_ORD 32

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_uart_8b00_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_uart_8b00_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_uart_8b00_EXISTS 1
#define DT_N_INST_8_ns16550       DT_N_S_pcie0_S_uart_8b00
#define DT_N_NODELABEL_uart_pse_3 DT_N_S_pcie0_S_uart_8b00

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_uart_8b00_BUS_pcie 1
#define DT_N_S_pcie0_S_uart_8b00_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_uart_8b00_REG_NUM 1
#define DT_N_S_pcie0_S_uart_8b00_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8b00_REG_IDX_0_VAL_ADDRESS 35584 /* 0x8b00 */
#define DT_N_S_pcie0_S_uart_8b00_REG_IDX_0_VAL_SIZE 1268351110 /* 0x4b998086 */
#define DT_N_S_pcie0_S_uart_8b00_IRQ_NUM 1
#define DT_N_S_pcie0_S_uart_8b00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8b00_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_uart_8b00_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_uart_8b00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8b00_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_uart_8b00_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_uart_8b00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8b00_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_uart_8b00_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_uart_8b00_COMPAT_MATCHES_ns16550 1
#define DT_N_S_pcie0_S_uart_8b00_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_uart_8b00_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_uart_8b00_P_reg {35584 /* 0x8b00 */, 1268351110 /* 0x4b998086 */}
#define DT_N_S_pcie0_S_uart_8b00_P_reg_IDX_0 35584
#define DT_N_S_pcie0_S_uart_8b00_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8b00_P_reg_IDX_1 1268351110
#define DT_N_S_pcie0_S_uart_8b00_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_uart_8b00_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8b00, reg, 0) \
	fn(DT_N_S_pcie0_S_uart_8b00, reg, 1)
#define DT_N_S_pcie0_S_uart_8b00_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8b00, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8b00, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8b00_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_uart_8b00_P_clock_frequency 1843200
#define DT_N_S_pcie0_S_uart_8b00_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_uart_8b00_P_current_speed 115200
#define DT_N_S_pcie0_S_uart_8b00_P_current_speed_EXISTS 1
#define DT_N_S_pcie0_S_uart_8b00_P_label "UART_PSE_3"
#define DT_N_S_pcie0_S_uart_8b00_P_label_STRING_TOKEN UART_PSE_3
#define DT_N_S_pcie0_S_uart_8b00_P_label_STRING_UPPER_TOKEN UART_PSE_3
#define DT_N_S_pcie0_S_uart_8b00_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8b00, label, 0) \
	fn(DT_N_S_pcie0_S_uart_8b00, label, 1) \
	fn(DT_N_S_pcie0_S_uart_8b00, label, 2) \
	fn(DT_N_S_pcie0_S_uart_8b00, label, 3) \
	fn(DT_N_S_pcie0_S_uart_8b00, label, 4) \
	fn(DT_N_S_pcie0_S_uart_8b00, label, 5) \
	fn(DT_N_S_pcie0_S_uart_8b00, label, 6) \
	fn(DT_N_S_pcie0_S_uart_8b00, label, 7) \
	fn(DT_N_S_pcie0_S_uart_8b00, label, 8) \
	fn(DT_N_S_pcie0_S_uart_8b00, label, 9)
#define DT_N_S_pcie0_S_uart_8b00_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8b00, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8b00, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8b00, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8b00, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8b00, label, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8b00, label, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8b00, label, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8b00, label, 7, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8b00, label, 8, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8b00, label, 9, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8b00_P_label_EXISTS 1
#define DT_N_S_pcie0_S_uart_8b00_P_hw_flow_control 0
#define DT_N_S_pcie0_S_uart_8b00_P_hw_flow_control_EXISTS 1
#define DT_N_S_pcie0_S_uart_8b00_P_status "disabled"
#define DT_N_S_pcie0_S_uart_8b00_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_uart_8b00_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_uart_8b00_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_uart_8b00_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_uart_8b00_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_uart_8b00_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8b00, status, 0) \
	fn(DT_N_S_pcie0_S_uart_8b00, status, 1) \
	fn(DT_N_S_pcie0_S_uart_8b00, status, 2) \
	fn(DT_N_S_pcie0_S_uart_8b00, status, 3) \
	fn(DT_N_S_pcie0_S_uart_8b00, status, 4) \
	fn(DT_N_S_pcie0_S_uart_8b00, status, 5) \
	fn(DT_N_S_pcie0_S_uart_8b00, status, 6) \
	fn(DT_N_S_pcie0_S_uart_8b00, status, 7)
#define DT_N_S_pcie0_S_uart_8b00_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8b00, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8b00, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8b00, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8b00, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8b00, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8b00, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8b00, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8b00, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8b00_P_status_EXISTS 1
#define DT_N_S_pcie0_S_uart_8b00_P_compatible {"ns16550"}
#define DT_N_S_pcie0_S_uart_8b00_P_compatible_IDX_0 "ns16550"
#define DT_N_S_pcie0_S_uart_8b00_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8b00_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8b00, compatible, 0)
#define DT_N_S_pcie0_S_uart_8b00_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8b00, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8b00_P_compatible_LEN 1
#define DT_N_S_pcie0_S_uart_8b00_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_uart_8b00_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_uart_8b00_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_uart_8b00_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8b00_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_uart_8b00_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_uart_8b00_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_uart_8b00_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_uart_8b00_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8b00, interrupts, 0) \
	fn(DT_N_S_pcie0_S_uart_8b00, interrupts, 1) \
	fn(DT_N_S_pcie0_S_uart_8b00, interrupts, 2)
#define DT_N_S_pcie0_S_uart_8b00_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8b00, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8b00, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8b00, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8b00_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_uart_8b00_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_8b00_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_8b00_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_8b00_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8b00_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_uart_8b00_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_uart_8b00_P_wakeup_source 0
#define DT_N_S_pcie0_S_uart_8b00_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/uart@8c00
 *
 * Node identifier: DT_N_S_pcie0_S_uart_8c00
 *
 * Binding (compatible = ns16550):
 *   $ZEPHYR_BASE/dts/bindings/serial/ns16550.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_uart_8c00_PATH "/pcie0/uart@8c00"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_uart_8c00_FULL_NAME "uart@8c00"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_uart_8c00_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_uart_8c00_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_uart_8c00_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_uart_8c00_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_uart_8c00_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_uart_8c00_ORD 33

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_uart_8c00_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_uart_8c00_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_uart_8c00_EXISTS 1
#define DT_N_INST_9_ns16550       DT_N_S_pcie0_S_uart_8c00
#define DT_N_NODELABEL_uart_pse_4 DT_N_S_pcie0_S_uart_8c00

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_uart_8c00_BUS_pcie 1
#define DT_N_S_pcie0_S_uart_8c00_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_uart_8c00_REG_NUM 1
#define DT_N_S_pcie0_S_uart_8c00_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8c00_REG_IDX_0_VAL_ADDRESS 35840 /* 0x8c00 */
#define DT_N_S_pcie0_S_uart_8c00_REG_IDX_0_VAL_SIZE 1268416646 /* 0x4b9a8086 */
#define DT_N_S_pcie0_S_uart_8c00_IRQ_NUM 1
#define DT_N_S_pcie0_S_uart_8c00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8c00_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_uart_8c00_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_uart_8c00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8c00_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_uart_8c00_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_uart_8c00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8c00_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_uart_8c00_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_uart_8c00_COMPAT_MATCHES_ns16550 1
#define DT_N_S_pcie0_S_uart_8c00_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_uart_8c00_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_uart_8c00_P_reg {35840 /* 0x8c00 */, 1268416646 /* 0x4b9a8086 */}
#define DT_N_S_pcie0_S_uart_8c00_P_reg_IDX_0 35840
#define DT_N_S_pcie0_S_uart_8c00_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8c00_P_reg_IDX_1 1268416646
#define DT_N_S_pcie0_S_uart_8c00_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_uart_8c00_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8c00, reg, 0) \
	fn(DT_N_S_pcie0_S_uart_8c00, reg, 1)
#define DT_N_S_pcie0_S_uart_8c00_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8c00, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8c00, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8c00_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_uart_8c00_P_clock_frequency 1843200
#define DT_N_S_pcie0_S_uart_8c00_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_uart_8c00_P_current_speed 115200
#define DT_N_S_pcie0_S_uart_8c00_P_current_speed_EXISTS 1
#define DT_N_S_pcie0_S_uart_8c00_P_label "UART_PSE_4"
#define DT_N_S_pcie0_S_uart_8c00_P_label_STRING_TOKEN UART_PSE_4
#define DT_N_S_pcie0_S_uart_8c00_P_label_STRING_UPPER_TOKEN UART_PSE_4
#define DT_N_S_pcie0_S_uart_8c00_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8c00, label, 0) \
	fn(DT_N_S_pcie0_S_uart_8c00, label, 1) \
	fn(DT_N_S_pcie0_S_uart_8c00, label, 2) \
	fn(DT_N_S_pcie0_S_uart_8c00, label, 3) \
	fn(DT_N_S_pcie0_S_uart_8c00, label, 4) \
	fn(DT_N_S_pcie0_S_uart_8c00, label, 5) \
	fn(DT_N_S_pcie0_S_uart_8c00, label, 6) \
	fn(DT_N_S_pcie0_S_uart_8c00, label, 7) \
	fn(DT_N_S_pcie0_S_uart_8c00, label, 8) \
	fn(DT_N_S_pcie0_S_uart_8c00, label, 9)
#define DT_N_S_pcie0_S_uart_8c00_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8c00, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8c00, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8c00, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8c00, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8c00, label, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8c00, label, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8c00, label, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8c00, label, 7, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8c00, label, 8, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8c00, label, 9, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8c00_P_label_EXISTS 1
#define DT_N_S_pcie0_S_uart_8c00_P_hw_flow_control 0
#define DT_N_S_pcie0_S_uart_8c00_P_hw_flow_control_EXISTS 1
#define DT_N_S_pcie0_S_uart_8c00_P_status "disabled"
#define DT_N_S_pcie0_S_uart_8c00_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_uart_8c00_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_uart_8c00_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_uart_8c00_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_uart_8c00_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_uart_8c00_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8c00, status, 0) \
	fn(DT_N_S_pcie0_S_uart_8c00, status, 1) \
	fn(DT_N_S_pcie0_S_uart_8c00, status, 2) \
	fn(DT_N_S_pcie0_S_uart_8c00, status, 3) \
	fn(DT_N_S_pcie0_S_uart_8c00, status, 4) \
	fn(DT_N_S_pcie0_S_uart_8c00, status, 5) \
	fn(DT_N_S_pcie0_S_uart_8c00, status, 6) \
	fn(DT_N_S_pcie0_S_uart_8c00, status, 7)
#define DT_N_S_pcie0_S_uart_8c00_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8c00, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8c00, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8c00, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8c00, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8c00, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8c00, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8c00, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8c00, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8c00_P_status_EXISTS 1
#define DT_N_S_pcie0_S_uart_8c00_P_compatible {"ns16550"}
#define DT_N_S_pcie0_S_uart_8c00_P_compatible_IDX_0 "ns16550"
#define DT_N_S_pcie0_S_uart_8c00_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8c00_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8c00, compatible, 0)
#define DT_N_S_pcie0_S_uart_8c00_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8c00, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8c00_P_compatible_LEN 1
#define DT_N_S_pcie0_S_uart_8c00_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_uart_8c00_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_uart_8c00_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_uart_8c00_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8c00_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_uart_8c00_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_uart_8c00_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_uart_8c00_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_uart_8c00_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8c00, interrupts, 0) \
	fn(DT_N_S_pcie0_S_uart_8c00, interrupts, 1) \
	fn(DT_N_S_pcie0_S_uart_8c00, interrupts, 2)
#define DT_N_S_pcie0_S_uart_8c00_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8c00, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8c00, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8c00, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8c00_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_uart_8c00_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_8c00_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_8c00_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_8c00_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8c00_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_uart_8c00_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_uart_8c00_P_wakeup_source 0
#define DT_N_S_pcie0_S_uart_8c00_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/uart@8d00
 *
 * Node identifier: DT_N_S_pcie0_S_uart_8d00
 *
 * Binding (compatible = ns16550):
 *   $ZEPHYR_BASE/dts/bindings/serial/ns16550.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_uart_8d00_PATH "/pcie0/uart@8d00"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_uart_8d00_FULL_NAME "uart@8d00"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_uart_8d00_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_uart_8d00_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_uart_8d00_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_uart_8d00_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_uart_8d00_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_uart_8d00_ORD 34

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_uart_8d00_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_uart_8d00_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_uart_8d00_EXISTS 1
#define DT_N_INST_10_ns16550      DT_N_S_pcie0_S_uart_8d00
#define DT_N_NODELABEL_uart_pse_5 DT_N_S_pcie0_S_uart_8d00

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_uart_8d00_BUS_pcie 1
#define DT_N_S_pcie0_S_uart_8d00_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_uart_8d00_REG_NUM 1
#define DT_N_S_pcie0_S_uart_8d00_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8d00_REG_IDX_0_VAL_ADDRESS 36096 /* 0x8d00 */
#define DT_N_S_pcie0_S_uart_8d00_REG_IDX_0_VAL_SIZE 1268482182 /* 0x4b9b8086 */
#define DT_N_S_pcie0_S_uart_8d00_IRQ_NUM 1
#define DT_N_S_pcie0_S_uart_8d00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8d00_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_uart_8d00_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_uart_8d00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8d00_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_uart_8d00_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_uart_8d00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8d00_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_uart_8d00_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_uart_8d00_COMPAT_MATCHES_ns16550 1
#define DT_N_S_pcie0_S_uart_8d00_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_uart_8d00_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_uart_8d00_P_reg {36096 /* 0x8d00 */, 1268482182 /* 0x4b9b8086 */}
#define DT_N_S_pcie0_S_uart_8d00_P_reg_IDX_0 36096
#define DT_N_S_pcie0_S_uart_8d00_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8d00_P_reg_IDX_1 1268482182
#define DT_N_S_pcie0_S_uart_8d00_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_uart_8d00_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8d00, reg, 0) \
	fn(DT_N_S_pcie0_S_uart_8d00, reg, 1)
#define DT_N_S_pcie0_S_uart_8d00_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8d00, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8d00, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8d00_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_uart_8d00_P_clock_frequency 1843200
#define DT_N_S_pcie0_S_uart_8d00_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_uart_8d00_P_current_speed 115200
#define DT_N_S_pcie0_S_uart_8d00_P_current_speed_EXISTS 1
#define DT_N_S_pcie0_S_uart_8d00_P_label "UART_PSE_5"
#define DT_N_S_pcie0_S_uart_8d00_P_label_STRING_TOKEN UART_PSE_5
#define DT_N_S_pcie0_S_uart_8d00_P_label_STRING_UPPER_TOKEN UART_PSE_5
#define DT_N_S_pcie0_S_uart_8d00_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8d00, label, 0) \
	fn(DT_N_S_pcie0_S_uart_8d00, label, 1) \
	fn(DT_N_S_pcie0_S_uart_8d00, label, 2) \
	fn(DT_N_S_pcie0_S_uart_8d00, label, 3) \
	fn(DT_N_S_pcie0_S_uart_8d00, label, 4) \
	fn(DT_N_S_pcie0_S_uart_8d00, label, 5) \
	fn(DT_N_S_pcie0_S_uart_8d00, label, 6) \
	fn(DT_N_S_pcie0_S_uart_8d00, label, 7) \
	fn(DT_N_S_pcie0_S_uart_8d00, label, 8) \
	fn(DT_N_S_pcie0_S_uart_8d00, label, 9)
#define DT_N_S_pcie0_S_uart_8d00_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8d00, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8d00, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8d00, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8d00, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8d00, label, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8d00, label, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8d00, label, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8d00, label, 7, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8d00, label, 8, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8d00, label, 9, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8d00_P_label_EXISTS 1
#define DT_N_S_pcie0_S_uart_8d00_P_hw_flow_control 0
#define DT_N_S_pcie0_S_uart_8d00_P_hw_flow_control_EXISTS 1
#define DT_N_S_pcie0_S_uart_8d00_P_status "disabled"
#define DT_N_S_pcie0_S_uart_8d00_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_uart_8d00_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_uart_8d00_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_uart_8d00_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_uart_8d00_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_uart_8d00_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8d00, status, 0) \
	fn(DT_N_S_pcie0_S_uart_8d00, status, 1) \
	fn(DT_N_S_pcie0_S_uart_8d00, status, 2) \
	fn(DT_N_S_pcie0_S_uart_8d00, status, 3) \
	fn(DT_N_S_pcie0_S_uart_8d00, status, 4) \
	fn(DT_N_S_pcie0_S_uart_8d00, status, 5) \
	fn(DT_N_S_pcie0_S_uart_8d00, status, 6) \
	fn(DT_N_S_pcie0_S_uart_8d00, status, 7)
#define DT_N_S_pcie0_S_uart_8d00_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8d00, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8d00, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8d00, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8d00, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8d00, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8d00, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8d00, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8d00, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8d00_P_status_EXISTS 1
#define DT_N_S_pcie0_S_uart_8d00_P_compatible {"ns16550"}
#define DT_N_S_pcie0_S_uart_8d00_P_compatible_IDX_0 "ns16550"
#define DT_N_S_pcie0_S_uart_8d00_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8d00_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8d00, compatible, 0)
#define DT_N_S_pcie0_S_uart_8d00_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8d00, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8d00_P_compatible_LEN 1
#define DT_N_S_pcie0_S_uart_8d00_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_uart_8d00_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_uart_8d00_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_uart_8d00_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8d00_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_uart_8d00_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_uart_8d00_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_uart_8d00_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_uart_8d00_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_8d00, interrupts, 0) \
	fn(DT_N_S_pcie0_S_uart_8d00, interrupts, 1) \
	fn(DT_N_S_pcie0_S_uart_8d00, interrupts, 2)
#define DT_N_S_pcie0_S_uart_8d00_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_8d00, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8d00, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_8d00, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_8d00_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_uart_8d00_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_8d00_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_8d00_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_8d00_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_8d00_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_uart_8d00_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_uart_8d00_P_wakeup_source 0
#define DT_N_S_pcie0_S_uart_8d00_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/uart@ca00
 *
 * Node identifier: DT_N_S_pcie0_S_uart_ca00
 *
 * Binding (compatible = ns16550):
 *   $ZEPHYR_BASE/dts/bindings/serial/ns16550.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_uart_ca00_PATH "/pcie0/uart@ca00"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_uart_ca00_FULL_NAME "uart@ca00"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_uart_ca00_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_uart_ca00_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_uart_ca00_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_uart_ca00_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_uart_ca00_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_uart_ca00_ORD 35

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_uart_ca00_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_uart_ca00_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_uart_ca00_EXISTS 1
#define DT_N_INST_4_ns16550  DT_N_S_pcie0_S_uart_ca00
#define DT_N_NODELABEL_uart2 DT_N_S_pcie0_S_uart_ca00

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_uart_ca00_BUS_pcie 1
#define DT_N_S_pcie0_S_uart_ca00_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_uart_ca00_REG_NUM 1
#define DT_N_S_pcie0_S_uart_ca00_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_ca00_REG_IDX_0_VAL_ADDRESS 51712 /* 0xca00 */
#define DT_N_S_pcie0_S_uart_ca00_REG_IDX_0_VAL_SIZE 1263370374 /* 0x4b4d8086 */
#define DT_N_S_pcie0_S_uart_ca00_IRQ_NUM 1
#define DT_N_S_pcie0_S_uart_ca00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_ca00_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_uart_ca00_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_uart_ca00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_ca00_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_uart_ca00_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_uart_ca00_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_ca00_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_uart_ca00_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_uart_ca00_COMPAT_MATCHES_ns16550 1
#define DT_N_S_pcie0_S_uart_ca00_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_uart_ca00_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_uart_ca00_P_reg {51712 /* 0xca00 */, 1263370374 /* 0x4b4d8086 */}
#define DT_N_S_pcie0_S_uart_ca00_P_reg_IDX_0 51712
#define DT_N_S_pcie0_S_uart_ca00_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_ca00_P_reg_IDX_1 1263370374
#define DT_N_S_pcie0_S_uart_ca00_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_uart_ca00_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_ca00, reg, 0) \
	fn(DT_N_S_pcie0_S_uart_ca00, reg, 1)
#define DT_N_S_pcie0_S_uart_ca00_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_ca00, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_ca00, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_ca00_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_uart_ca00_P_clock_frequency 1843200
#define DT_N_S_pcie0_S_uart_ca00_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_uart_ca00_P_current_speed 115200
#define DT_N_S_pcie0_S_uart_ca00_P_current_speed_EXISTS 1
#define DT_N_S_pcie0_S_uart_ca00_P_label "UART_2"
#define DT_N_S_pcie0_S_uart_ca00_P_label_STRING_TOKEN UART_2
#define DT_N_S_pcie0_S_uart_ca00_P_label_STRING_UPPER_TOKEN UART_2
#define DT_N_S_pcie0_S_uart_ca00_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_ca00, label, 0) \
	fn(DT_N_S_pcie0_S_uart_ca00, label, 1) \
	fn(DT_N_S_pcie0_S_uart_ca00, label, 2) \
	fn(DT_N_S_pcie0_S_uart_ca00, label, 3) \
	fn(DT_N_S_pcie0_S_uart_ca00, label, 4) \
	fn(DT_N_S_pcie0_S_uart_ca00, label, 5)
#define DT_N_S_pcie0_S_uart_ca00_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_ca00, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_ca00, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_ca00, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_ca00, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_ca00, label, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_ca00, label, 5, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_ca00_P_label_EXISTS 1
#define DT_N_S_pcie0_S_uart_ca00_P_hw_flow_control 0
#define DT_N_S_pcie0_S_uart_ca00_P_hw_flow_control_EXISTS 1
#define DT_N_S_pcie0_S_uart_ca00_P_status "disabled"
#define DT_N_S_pcie0_S_uart_ca00_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_uart_ca00_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_uart_ca00_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_uart_ca00_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_uart_ca00_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_uart_ca00_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_ca00, status, 0) \
	fn(DT_N_S_pcie0_S_uart_ca00, status, 1) \
	fn(DT_N_S_pcie0_S_uart_ca00, status, 2) \
	fn(DT_N_S_pcie0_S_uart_ca00, status, 3) \
	fn(DT_N_S_pcie0_S_uart_ca00, status, 4) \
	fn(DT_N_S_pcie0_S_uart_ca00, status, 5) \
	fn(DT_N_S_pcie0_S_uart_ca00, status, 6) \
	fn(DT_N_S_pcie0_S_uart_ca00, status, 7)
#define DT_N_S_pcie0_S_uart_ca00_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_ca00, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_ca00, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_ca00, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_ca00, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_ca00, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_ca00, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_ca00, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_ca00, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_ca00_P_status_EXISTS 1
#define DT_N_S_pcie0_S_uart_ca00_P_compatible {"ns16550"}
#define DT_N_S_pcie0_S_uart_ca00_P_compatible_IDX_0 "ns16550"
#define DT_N_S_pcie0_S_uart_ca00_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_ca00_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_ca00, compatible, 0)
#define DT_N_S_pcie0_S_uart_ca00_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_ca00, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_ca00_P_compatible_LEN 1
#define DT_N_S_pcie0_S_uart_ca00_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_uart_ca00_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_uart_ca00_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_uart_ca00_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_ca00_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_uart_ca00_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_uart_ca00_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_uart_ca00_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_uart_ca00_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_ca00, interrupts, 0) \
	fn(DT_N_S_pcie0_S_uart_ca00, interrupts, 1) \
	fn(DT_N_S_pcie0_S_uart_ca00, interrupts, 2)
#define DT_N_S_pcie0_S_uart_ca00_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_ca00, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_ca00, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_ca00, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_ca00_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_uart_ca00_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_ca00_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_ca00_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_ca00_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_ca00_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_uart_ca00_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_uart_ca00_P_wakeup_source 0
#define DT_N_S_pcie0_S_uart_ca00_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/uart@f000
 *
 * Node identifier: DT_N_S_pcie0_S_uart_f000
 *
 * Binding (compatible = ns16550):
 *   $ZEPHYR_BASE/dts/bindings/serial/ns16550.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_uart_f000_PATH "/pcie0/uart@f000"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_uart_f000_FULL_NAME "uart@f000"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_uart_f000_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_uart_f000_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_uart_f000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_uart_f000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_uart_f000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_uart_f000_ORD 36

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_uart_f000_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_uart_f000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_uart_f000_EXISTS 1
#define DT_N_INST_2_ns16550  DT_N_S_pcie0_S_uart_f000
#define DT_N_NODELABEL_uart0 DT_N_S_pcie0_S_uart_f000

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_uart_f000_BUS_pcie 1
#define DT_N_S_pcie0_S_uart_f000_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_uart_f000_REG_NUM 1
#define DT_N_S_pcie0_S_uart_f000_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_f000_REG_IDX_0_VAL_ADDRESS 61440 /* 0xf000 */
#define DT_N_S_pcie0_S_uart_f000_REG_IDX_0_VAL_SIZE 1260945542 /* 0x4b288086 */
#define DT_N_S_pcie0_S_uart_f000_IRQ_NUM 1
#define DT_N_S_pcie0_S_uart_f000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_f000_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_uart_f000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_uart_f000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_f000_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_uart_f000_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_uart_f000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_f000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_uart_f000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_uart_f000_COMPAT_MATCHES_ns16550 1
#define DT_N_S_pcie0_S_uart_f000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_uart_f000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_uart_f000_P_reg {61440 /* 0xf000 */, 1260945542 /* 0x4b288086 */}
#define DT_N_S_pcie0_S_uart_f000_P_reg_IDX_0 61440
#define DT_N_S_pcie0_S_uart_f000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_f000_P_reg_IDX_1 1260945542
#define DT_N_S_pcie0_S_uart_f000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_uart_f000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_f000, reg, 0) \
	fn(DT_N_S_pcie0_S_uart_f000, reg, 1)
#define DT_N_S_pcie0_S_uart_f000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_f000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f000, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_f000_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_uart_f000_P_clock_frequency 1843200
#define DT_N_S_pcie0_S_uart_f000_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_uart_f000_P_current_speed 115200
#define DT_N_S_pcie0_S_uart_f000_P_current_speed_EXISTS 1
#define DT_N_S_pcie0_S_uart_f000_P_label "UART_0"
#define DT_N_S_pcie0_S_uart_f000_P_label_STRING_TOKEN UART_0
#define DT_N_S_pcie0_S_uart_f000_P_label_STRING_UPPER_TOKEN UART_0
#define DT_N_S_pcie0_S_uart_f000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_f000, label, 0) \
	fn(DT_N_S_pcie0_S_uart_f000, label, 1) \
	fn(DT_N_S_pcie0_S_uart_f000, label, 2) \
	fn(DT_N_S_pcie0_S_uart_f000, label, 3) \
	fn(DT_N_S_pcie0_S_uart_f000, label, 4) \
	fn(DT_N_S_pcie0_S_uart_f000, label, 5)
#define DT_N_S_pcie0_S_uart_f000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_f000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f000, label, 5, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_f000_P_label_EXISTS 1
#define DT_N_S_pcie0_S_uart_f000_P_hw_flow_control 0
#define DT_N_S_pcie0_S_uart_f000_P_hw_flow_control_EXISTS 1
#define DT_N_S_pcie0_S_uart_f000_P_status "disabled"
#define DT_N_S_pcie0_S_uart_f000_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_uart_f000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_uart_f000_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_uart_f000_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_uart_f000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_uart_f000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_f000, status, 0) \
	fn(DT_N_S_pcie0_S_uart_f000, status, 1) \
	fn(DT_N_S_pcie0_S_uart_f000, status, 2) \
	fn(DT_N_S_pcie0_S_uart_f000, status, 3) \
	fn(DT_N_S_pcie0_S_uart_f000, status, 4) \
	fn(DT_N_S_pcie0_S_uart_f000, status, 5) \
	fn(DT_N_S_pcie0_S_uart_f000, status, 6) \
	fn(DT_N_S_pcie0_S_uart_f000, status, 7)
#define DT_N_S_pcie0_S_uart_f000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_f000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f000, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_f000_P_status_EXISTS 1
#define DT_N_S_pcie0_S_uart_f000_P_compatible {"ns16550"}
#define DT_N_S_pcie0_S_uart_f000_P_compatible_IDX_0 "ns16550"
#define DT_N_S_pcie0_S_uart_f000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_f000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_f000, compatible, 0)
#define DT_N_S_pcie0_S_uart_f000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_f000, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_f000_P_compatible_LEN 1
#define DT_N_S_pcie0_S_uart_f000_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_uart_f000_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_uart_f000_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_uart_f000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_f000_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_uart_f000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_uart_f000_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_uart_f000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_uart_f000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_f000, interrupts, 0) \
	fn(DT_N_S_pcie0_S_uart_f000, interrupts, 1) \
	fn(DT_N_S_pcie0_S_uart_f000, interrupts, 2)
#define DT_N_S_pcie0_S_uart_f000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_f000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f000, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f000, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_f000_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_uart_f000_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_f000_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_f000_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_f000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_f000_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_uart_f000_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_uart_f000_P_wakeup_source 0
#define DT_N_S_pcie0_S_uart_f000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /pcie0/uart@f100
 *
 * Node identifier: DT_N_S_pcie0_S_uart_f100
 *
 * Binding (compatible = ns16550):
 *   $ZEPHYR_BASE/dts/bindings/serial/ns16550.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_pcie0_S_uart_f100_PATH "/pcie0/uart@f100"

/* Node's name with unit-address: */
#define DT_N_S_pcie0_S_uart_f100_FULL_NAME "uart@f100"

/* Node parent (/pcie0) identifier: */
#define DT_N_S_pcie0_S_uart_f100_PARENT DT_N_S_pcie0
#define DT_N_S_pcie0_S_uart_f100_FOREACH_CHILD(fn) 
#define DT_N_S_pcie0_S_uart_f100_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_pcie0_S_uart_f100_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_pcie0_S_uart_f100_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_pcie0_S_uart_f100_ORD 37

/* Ordinals for what this node depends on directly: */
#define DT_N_S_pcie0_S_uart_f100_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	8, /* /pcie0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_pcie0_S_uart_f100_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_pcie0_S_uart_f100_EXISTS 1
#define DT_N_INST_3_ns16550  DT_N_S_pcie0_S_uart_f100
#define DT_N_NODELABEL_uart1 DT_N_S_pcie0_S_uart_f100

/* Bus info (controller: '/pcie0', type: 'pcie') */
#define DT_N_S_pcie0_S_uart_f100_BUS_pcie 1
#define DT_N_S_pcie0_S_uart_f100_BUS DT_N_S_pcie0

/* Macros for properties that are special in the specification: */
#define DT_N_S_pcie0_S_uart_f100_REG_NUM 1
#define DT_N_S_pcie0_S_uart_f100_REG_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_f100_REG_IDX_0_VAL_ADDRESS 61696 /* 0xf100 */
#define DT_N_S_pcie0_S_uart_f100_REG_IDX_0_VAL_SIZE 1261011078 /* 0x4b298086 */
#define DT_N_S_pcie0_S_uart_f100_IRQ_NUM 1
#define DT_N_S_pcie0_S_uart_f100_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_f100_IRQ_IDX_0_VAL_irq 268435455
#define DT_N_S_pcie0_S_uart_f100_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_pcie0_S_uart_f100_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_f100_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_pcie0_S_uart_f100_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_pcie0_S_uart_f100_IRQ_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_f100_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_pcie0_S_uart_f100_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_pcie0_S_uart_f100_COMPAT_MATCHES_ns16550 1
#define DT_N_S_pcie0_S_uart_f100_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_pcie0_S_uart_f100_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_pcie0_S_uart_f100_P_reg {61696 /* 0xf100 */, 1261011078 /* 0x4b298086 */}
#define DT_N_S_pcie0_S_uart_f100_P_reg_IDX_0 61696
#define DT_N_S_pcie0_S_uart_f100_P_reg_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_f100_P_reg_IDX_1 1261011078
#define DT_N_S_pcie0_S_uart_f100_P_reg_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_uart_f100_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_f100, reg, 0) \
	fn(DT_N_S_pcie0_S_uart_f100, reg, 1)
#define DT_N_S_pcie0_S_uart_f100_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_f100, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f100, reg, 1, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_f100_P_reg_EXISTS 1
#define DT_N_S_pcie0_S_uart_f100_P_clock_frequency 1843200
#define DT_N_S_pcie0_S_uart_f100_P_clock_frequency_EXISTS 1
#define DT_N_S_pcie0_S_uart_f100_P_current_speed 115200
#define DT_N_S_pcie0_S_uart_f100_P_current_speed_EXISTS 1
#define DT_N_S_pcie0_S_uart_f100_P_label "UART_1"
#define DT_N_S_pcie0_S_uart_f100_P_label_STRING_TOKEN UART_1
#define DT_N_S_pcie0_S_uart_f100_P_label_STRING_UPPER_TOKEN UART_1
#define DT_N_S_pcie0_S_uart_f100_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_f100, label, 0) \
	fn(DT_N_S_pcie0_S_uart_f100, label, 1) \
	fn(DT_N_S_pcie0_S_uart_f100, label, 2) \
	fn(DT_N_S_pcie0_S_uart_f100, label, 3) \
	fn(DT_N_S_pcie0_S_uart_f100, label, 4) \
	fn(DT_N_S_pcie0_S_uart_f100, label, 5)
#define DT_N_S_pcie0_S_uart_f100_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_f100, label, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f100, label, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f100, label, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f100, label, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f100, label, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f100, label, 5, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_f100_P_label_EXISTS 1
#define DT_N_S_pcie0_S_uart_f100_P_hw_flow_control 0
#define DT_N_S_pcie0_S_uart_f100_P_hw_flow_control_EXISTS 1
#define DT_N_S_pcie0_S_uart_f100_P_status "disabled"
#define DT_N_S_pcie0_S_uart_f100_P_status_STRING_TOKEN disabled
#define DT_N_S_pcie0_S_uart_f100_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_uart_f100_P_status_ENUM_IDX 2
#define DT_N_S_pcie0_S_uart_f100_P_status_ENUM_TOKEN disabled
#define DT_N_S_pcie0_S_uart_f100_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_pcie0_S_uart_f100_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_f100, status, 0) \
	fn(DT_N_S_pcie0_S_uart_f100, status, 1) \
	fn(DT_N_S_pcie0_S_uart_f100, status, 2) \
	fn(DT_N_S_pcie0_S_uart_f100, status, 3) \
	fn(DT_N_S_pcie0_S_uart_f100, status, 4) \
	fn(DT_N_S_pcie0_S_uart_f100, status, 5) \
	fn(DT_N_S_pcie0_S_uart_f100, status, 6) \
	fn(DT_N_S_pcie0_S_uart_f100, status, 7)
#define DT_N_S_pcie0_S_uart_f100_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_f100, status, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f100, status, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f100, status, 2, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f100, status, 3, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f100, status, 4, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f100, status, 5, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f100, status, 6, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f100, status, 7, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_f100_P_status_EXISTS 1
#define DT_N_S_pcie0_S_uart_f100_P_compatible {"ns16550"}
#define DT_N_S_pcie0_S_uart_f100_P_compatible_IDX_0 "ns16550"
#define DT_N_S_pcie0_S_uart_f100_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_f100_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_f100, compatible, 0)
#define DT_N_S_pcie0_S_uart_f100_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_f100, compatible, 0, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_f100_P_compatible_LEN 1
#define DT_N_S_pcie0_S_uart_f100_P_compatible_EXISTS 1
#define DT_N_S_pcie0_S_uart_f100_P_interrupts {268435455 /* 0xfffffff */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_pcie0_S_uart_f100_P_interrupts_IDX_0 268435455
#define DT_N_S_pcie0_S_uart_f100_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_f100_P_interrupts_IDX_1 41216
#define DT_N_S_pcie0_S_uart_f100_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_pcie0_S_uart_f100_P_interrupts_IDX_2 3
#define DT_N_S_pcie0_S_uart_f100_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_pcie0_S_uart_f100_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_pcie0_S_uart_f100, interrupts, 0) \
	fn(DT_N_S_pcie0_S_uart_f100, interrupts, 1) \
	fn(DT_N_S_pcie0_S_uart_f100, interrupts, 2)
#define DT_N_S_pcie0_S_uart_f100_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_pcie0_S_uart_f100, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f100, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_pcie0_S_uart_f100, interrupts, 2, __VA_ARGS__)
#define DT_N_S_pcie0_S_uart_f100_P_interrupts_EXISTS 1
#define DT_N_S_pcie0_S_uart_f100_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_f100_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_f100_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_pcie0_S_uart_f100_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_pcie0_S_uart_f100_P_interrupt_parent_LEN 1
#define DT_N_S_pcie0_S_uart_f100_P_interrupt_parent_EXISTS 1
#define DT_N_S_pcie0_S_uart_f100_P_wakeup_source 0
#define DT_N_S_pcie0_S_uart_f100_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc
 *
 * Node identifier: DT_N_S_soc
 */

/* Node's full path: */
#define DT_N_S_soc_PATH "/soc"

/* Node's name with unit-address: */
#define DT_N_S_soc_FULL_NAME "soc"

/* Node parent (/) identifier: */
#define DT_N_S_soc_PARENT DT_N
#define DT_N_S_soc_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_vtd_fed91000) fn(DT_N_S_soc_S_uart_3f8) fn(DT_N_S_soc_S_uart_2f8) fn(DT_N_S_soc_S_uart_fe040000) fn(DT_N_S_soc_S_uart_fe042000) fn(DT_N_S_soc_S_gpio_fd6e0700) fn(DT_N_S_soc_S_gpio_fd6e08a0) fn(DT_N_S_soc_S_gpio_fd6e09a0) fn(DT_N_S_soc_S_gpio_fd6d0700) fn(DT_N_S_soc_S_gpio_fd6d0800) fn(DT_N_S_soc_S_gpio_fd6d0980) fn(DT_N_S_soc_S_gpio_fd6d0ad0) fn(DT_N_S_soc_S_gpio_fd6d0c50) fn(DT_N_S_soc_S_gpio_fd6b0810) fn(DT_N_S_soc_S_gpio_fd6b0830) fn(DT_N_S_soc_S_gpio_fd6b09b0) fn(DT_N_S_soc_S_gpio_fd6a0700) fn(DT_N_S_soc_S_gpio_fd6a0880) fn(DT_N_S_soc_S_gpio_fd6a0a70) fn(DT_N_S_soc_S_gpio_fd690700) fn(DT_N_S_soc_S_hpet_fed00000)
#define DT_N_S_soc_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_vtd_fed91000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_3f8, __VA_ARGS__) fn(DT_N_S_soc_S_uart_2f8, __VA_ARGS__) fn(DT_N_S_soc_S_uart_fe040000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_fe042000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6e0700, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6e08a0, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6e09a0, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6d0700, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6d0800, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6d0980, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6d0ad0, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6d0c50, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6b0810, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6b0830, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6b09b0, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6a0700, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6a0880, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6a0a70, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd690700, __VA_ARGS__) fn(DT_N_S_soc_S_hpet_fed00000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_vtd_fed91000) fn(DT_N_S_soc_S_uart_3f8) fn(DT_N_S_soc_S_uart_2f8) fn(DT_N_S_soc_S_gpio_fd6e0700) fn(DT_N_S_soc_S_gpio_fd6e08a0) fn(DT_N_S_soc_S_gpio_fd6e09a0) fn(DT_N_S_soc_S_gpio_fd6d0700) fn(DT_N_S_soc_S_gpio_fd6d0800) fn(DT_N_S_soc_S_gpio_fd6d0980) fn(DT_N_S_soc_S_gpio_fd6d0ad0) fn(DT_N_S_soc_S_gpio_fd6d0c50) fn(DT_N_S_soc_S_gpio_fd6b0810) fn(DT_N_S_soc_S_gpio_fd6b0830) fn(DT_N_S_soc_S_gpio_fd6b09b0) fn(DT_N_S_soc_S_gpio_fd6a0700) fn(DT_N_S_soc_S_gpio_fd6a0880) fn(DT_N_S_soc_S_gpio_fd6a0a70) fn(DT_N_S_soc_S_gpio_fd690700) 
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_vtd_fed91000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_3f8, __VA_ARGS__) fn(DT_N_S_soc_S_uart_2f8, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6e0700, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6e08a0, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6e09a0, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6d0700, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6d0800, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6d0980, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6d0ad0, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6d0c50, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6b0810, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6b0830, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6b09b0, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6a0700, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6a0880, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6a0a70, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd690700, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_ORD 38

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_SUPPORTS_ORDS \
	39, /* /soc/gpio@fd690700 */ \
	40, /* /soc/gpio@fd6a0700 */ \
	41, /* /soc/gpio@fd6a0880 */ \
	42, /* /soc/gpio@fd6a0a70 */ \
	43, /* /soc/gpio@fd6b0810 */ \
	44, /* /soc/gpio@fd6b0830 */ \
	45, /* /soc/gpio@fd6b09b0 */ \
	46, /* /soc/gpio@fd6d0700 */ \
	47, /* /soc/gpio@fd6d0800 */ \
	48, /* /soc/gpio@fd6d0980 */ \
	49, /* /soc/gpio@fd6d0ad0 */ \
	50, /* /soc/gpio@fd6d0c50 */ \
	51, /* /soc/gpio@fd6e0700 */ \
	52, /* /soc/gpio@fd6e08a0 */ \
	53, /* /soc/gpio@fd6e09a0 */ \
	54, /* /soc/hpet@fed00000 */ \
	55, /* /soc/uart@2f8 */ \
	56, /* /soc/uart@3f8 */ \
	57, /* /soc/uart@fe040000 */ \
	58, /* /soc/uart@fe042000 */ \
	59, /* /soc/vtd@fed91000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_EXISTS 1
#define DT_N_INST_0_simple_bus DT_N_S_soc

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_REG_NUM 0
#define DT_N_S_soc_IRQ_NUM 0
#define DT_N_S_soc_COMPAT_MATCHES_simple_bus 1
#define DT_N_S_soc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_P_compatible {"simple-bus"}
#define DT_N_S_soc_P_compatible_IDX_0 "simple-bus"
#define DT_N_S_soc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_LEN 1
#define DT_N_S_soc_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/gpio@fd690700
 *
 * Node identifier: DT_N_S_soc_S_gpio_fd690700
 *
 * Binding (compatible = intel,gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/intel,gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_fd690700_PATH "/soc/gpio@fd690700"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_fd690700_FULL_NAME "gpio@fd690700"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_fd690700_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_fd690700_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_fd690700_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_fd690700_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_fd690700_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_fd690700_ORD 39

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_fd690700_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	38, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_fd690700_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_fd690700_EXISTS 1
#define DT_N_INST_14_intel_gpio DT_N_S_soc_S_gpio_fd690700
#define DT_N_NODELABEL_gpio_5_r DT_N_S_soc_S_gpio_fd690700

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_fd690700_REG_NUM 1
#define DT_N_S_soc_S_gpio_fd690700_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_REG_IDX_0_VAL_ADDRESS 4251518720 /* 0xfd690700 */
#define DT_N_S_soc_S_gpio_fd690700_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_fd690700_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_fd690700_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_IRQ_IDX_0_VAL_irq 14
#define DT_N_S_soc_S_gpio_fd690700_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_soc_S_gpio_fd690700_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_fd690700_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_COMPAT_MATCHES_intel_gpio 1
#define DT_N_S_soc_S_gpio_fd690700_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_fd690700_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_fd690700_P_reg {4251518720 /* 0xfd690700 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_fd690700_P_reg_IDX_0 4251518720
#define DT_N_S_soc_S_gpio_fd690700_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_fd690700_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd690700, reg, 0) \
	fn(DT_N_S_soc_S_gpio_fd690700, reg, 1)
#define DT_N_S_soc_S_gpio_fd690700_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd690700, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd690700, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd690700_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_P_label "GPIO_COM_5_R"
#define DT_N_S_soc_S_gpio_fd690700_P_label_STRING_TOKEN GPIO_COM_5_R
#define DT_N_S_soc_S_gpio_fd690700_P_label_STRING_UPPER_TOKEN GPIO_COM_5_R
#define DT_N_S_soc_S_gpio_fd690700_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd690700, label, 0) \
	fn(DT_N_S_soc_S_gpio_fd690700, label, 1) \
	fn(DT_N_S_soc_S_gpio_fd690700, label, 2) \
	fn(DT_N_S_soc_S_gpio_fd690700, label, 3) \
	fn(DT_N_S_soc_S_gpio_fd690700, label, 4) \
	fn(DT_N_S_soc_S_gpio_fd690700, label, 5) \
	fn(DT_N_S_soc_S_gpio_fd690700, label, 6) \
	fn(DT_N_S_soc_S_gpio_fd690700, label, 7) \
	fn(DT_N_S_soc_S_gpio_fd690700, label, 8) \
	fn(DT_N_S_soc_S_gpio_fd690700, label, 9) \
	fn(DT_N_S_soc_S_gpio_fd690700, label, 10) \
	fn(DT_N_S_soc_S_gpio_fd690700, label, 11)
#define DT_N_S_soc_S_gpio_fd690700_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd690700, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd690700, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd690700, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd690700, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd690700, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd690700, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd690700, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd690700, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd690700, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd690700, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd690700, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd690700, label, 11, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd690700_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_P_group_index 0
#define DT_N_S_soc_S_gpio_fd690700_P_group_index_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_P_interrupts {14 /* 0xe */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_fd690700_P_interrupts_IDX_0 14
#define DT_N_S_soc_S_gpio_fd690700_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_P_interrupts_IDX_1 41216
#define DT_N_S_soc_S_gpio_fd690700_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_P_interrupts_IDX_2 3
#define DT_N_S_soc_S_gpio_fd690700_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd690700, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_fd690700, interrupts, 1) \
	fn(DT_N_S_soc_S_gpio_fd690700, interrupts, 2)
#define DT_N_S_soc_S_gpio_fd690700_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd690700, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd690700, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd690700, interrupts, 2, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd690700_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_P_ngpios 8
#define DT_N_S_soc_S_gpio_fd690700_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_P_pin_offset 0
#define DT_N_S_soc_S_gpio_fd690700_P_pin_offset_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_fd690700_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_P_status "okay"
#define DT_N_S_soc_S_gpio_fd690700_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_fd690700_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd690700_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_fd690700_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_fd690700_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd690700_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd690700, status, 0) \
	fn(DT_N_S_soc_S_gpio_fd690700, status, 1) \
	fn(DT_N_S_soc_S_gpio_fd690700, status, 2) \
	fn(DT_N_S_soc_S_gpio_fd690700, status, 3)
#define DT_N_S_soc_S_gpio_fd690700_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd690700, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd690700, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd690700, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd690700, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd690700_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_P_compatible {"intel,gpio"}
#define DT_N_S_soc_S_gpio_fd690700_P_compatible_IDX_0 "intel,gpio"
#define DT_N_S_soc_S_gpio_fd690700_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd690700, compatible, 0)
#define DT_N_S_soc_S_gpio_fd690700_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd690700, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd690700_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_fd690700_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd690700_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd690700_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd690700_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpio_fd690700_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpio_fd690700_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_fd690700_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@fd6a0700
 *
 * Node identifier: DT_N_S_soc_S_gpio_fd6a0700
 *
 * Binding (compatible = intel,gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/intel,gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_fd6a0700_PATH "/soc/gpio@fd6a0700"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_fd6a0700_FULL_NAME "gpio@fd6a0700"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_fd6a0700_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_fd6a0700_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_fd6a0700_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_fd6a0700_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_fd6a0700_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_fd6a0700_ORD 40

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_fd6a0700_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	38, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_fd6a0700_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_fd6a0700_EXISTS 1
#define DT_N_INST_11_intel_gpio DT_N_S_soc_S_gpio_fd6a0700
#define DT_N_NODELABEL_gpio_4_c DT_N_S_soc_S_gpio_fd6a0700

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_fd6a0700_REG_NUM 1
#define DT_N_S_soc_S_gpio_fd6a0700_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_REG_IDX_0_VAL_ADDRESS 4251584256 /* 0xfd6a0700 */
#define DT_N_S_soc_S_gpio_fd6a0700_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_fd6a0700_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_fd6a0700_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_IRQ_IDX_0_VAL_irq 14
#define DT_N_S_soc_S_gpio_fd6a0700_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_soc_S_gpio_fd6a0700_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_fd6a0700_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_COMPAT_MATCHES_intel_gpio 1
#define DT_N_S_soc_S_gpio_fd6a0700_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_fd6a0700_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_fd6a0700_P_reg {4251584256 /* 0xfd6a0700 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_fd6a0700_P_reg_IDX_0 4251584256
#define DT_N_S_soc_S_gpio_fd6a0700_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_fd6a0700_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6a0700, reg, 0) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, reg, 1)
#define DT_N_S_soc_S_gpio_fd6a0700_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6a0700, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6a0700_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_P_label "GPIO_COM_4_C"
#define DT_N_S_soc_S_gpio_fd6a0700_P_label_STRING_TOKEN GPIO_COM_4_C
#define DT_N_S_soc_S_gpio_fd6a0700_P_label_STRING_UPPER_TOKEN GPIO_COM_4_C
#define DT_N_S_soc_S_gpio_fd6a0700_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6a0700, label, 0) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, label, 1) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, label, 2) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, label, 3) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, label, 4) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, label, 5) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, label, 6) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, label, 7) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, label, 8) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, label, 9) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, label, 10) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, label, 11)
#define DT_N_S_soc_S_gpio_fd6a0700_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6a0700, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, label, 11, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6a0700_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_P_group_index 0
#define DT_N_S_soc_S_gpio_fd6a0700_P_group_index_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_P_interrupts {14 /* 0xe */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_fd6a0700_P_interrupts_IDX_0 14
#define DT_N_S_soc_S_gpio_fd6a0700_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_P_interrupts_IDX_1 41216
#define DT_N_S_soc_S_gpio_fd6a0700_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_P_interrupts_IDX_2 3
#define DT_N_S_soc_S_gpio_fd6a0700_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6a0700, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, interrupts, 1) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, interrupts, 2)
#define DT_N_S_soc_S_gpio_fd6a0700_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6a0700, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, interrupts, 2, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6a0700_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_P_ngpios 24
#define DT_N_S_soc_S_gpio_fd6a0700_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_P_pin_offset 0
#define DT_N_S_soc_S_gpio_fd6a0700_P_pin_offset_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_fd6a0700_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_P_status "okay"
#define DT_N_S_soc_S_gpio_fd6a0700_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6a0700_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6a0700_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_fd6a0700_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6a0700_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6a0700_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6a0700, status, 0) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, status, 1) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, status, 2) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, status, 3)
#define DT_N_S_soc_S_gpio_fd6a0700_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6a0700, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0700, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6a0700_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_P_compatible {"intel,gpio"}
#define DT_N_S_soc_S_gpio_fd6a0700_P_compatible_IDX_0 "intel,gpio"
#define DT_N_S_soc_S_gpio_fd6a0700_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6a0700, compatible, 0)
#define DT_N_S_soc_S_gpio_fd6a0700_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6a0700, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6a0700_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_fd6a0700_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6a0700_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6a0700_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6a0700_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpio_fd6a0700_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0700_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_fd6a0700_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@fd6a0880
 *
 * Node identifier: DT_N_S_soc_S_gpio_fd6a0880
 *
 * Binding (compatible = intel,gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/intel,gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_fd6a0880_PATH "/soc/gpio@fd6a0880"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_fd6a0880_FULL_NAME "gpio@fd6a0880"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_fd6a0880_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_fd6a0880_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_fd6a0880_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_fd6a0880_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_fd6a0880_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_fd6a0880_ORD 41

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_fd6a0880_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	38, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_fd6a0880_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_fd6a0880_EXISTS 1
#define DT_N_INST_12_intel_gpio DT_N_S_soc_S_gpio_fd6a0880
#define DT_N_NODELABEL_gpio_4_f DT_N_S_soc_S_gpio_fd6a0880

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_fd6a0880_REG_NUM 1
#define DT_N_S_soc_S_gpio_fd6a0880_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_REG_IDX_0_VAL_ADDRESS 4251584640 /* 0xfd6a0880 */
#define DT_N_S_soc_S_gpio_fd6a0880_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_fd6a0880_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_fd6a0880_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_IRQ_IDX_0_VAL_irq 14
#define DT_N_S_soc_S_gpio_fd6a0880_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_soc_S_gpio_fd6a0880_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_fd6a0880_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_COMPAT_MATCHES_intel_gpio 1
#define DT_N_S_soc_S_gpio_fd6a0880_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_fd6a0880_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_fd6a0880_P_reg {4251584640 /* 0xfd6a0880 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_fd6a0880_P_reg_IDX_0 4251584640
#define DT_N_S_soc_S_gpio_fd6a0880_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_fd6a0880_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6a0880, reg, 0) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, reg, 1)
#define DT_N_S_soc_S_gpio_fd6a0880_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6a0880, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6a0880_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_P_label "GPIO_COM_4_F"
#define DT_N_S_soc_S_gpio_fd6a0880_P_label_STRING_TOKEN GPIO_COM_4_F
#define DT_N_S_soc_S_gpio_fd6a0880_P_label_STRING_UPPER_TOKEN GPIO_COM_4_F
#define DT_N_S_soc_S_gpio_fd6a0880_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6a0880, label, 0) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, label, 1) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, label, 2) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, label, 3) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, label, 4) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, label, 5) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, label, 6) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, label, 7) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, label, 8) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, label, 9) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, label, 10) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, label, 11)
#define DT_N_S_soc_S_gpio_fd6a0880_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6a0880, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, label, 11, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6a0880_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_P_group_index 1
#define DT_N_S_soc_S_gpio_fd6a0880_P_group_index_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_P_interrupts {14 /* 0xe */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_fd6a0880_P_interrupts_IDX_0 14
#define DT_N_S_soc_S_gpio_fd6a0880_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_P_interrupts_IDX_1 41216
#define DT_N_S_soc_S_gpio_fd6a0880_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_P_interrupts_IDX_2 3
#define DT_N_S_soc_S_gpio_fd6a0880_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6a0880, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, interrupts, 1) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, interrupts, 2)
#define DT_N_S_soc_S_gpio_fd6a0880_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6a0880, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, interrupts, 2, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6a0880_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_P_ngpios 24
#define DT_N_S_soc_S_gpio_fd6a0880_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_P_pin_offset 24
#define DT_N_S_soc_S_gpio_fd6a0880_P_pin_offset_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_fd6a0880_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_P_status "okay"
#define DT_N_S_soc_S_gpio_fd6a0880_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6a0880_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6a0880_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_fd6a0880_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6a0880_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6a0880_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6a0880, status, 0) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, status, 1) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, status, 2) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, status, 3)
#define DT_N_S_soc_S_gpio_fd6a0880_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6a0880, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0880, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6a0880_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_P_compatible {"intel,gpio"}
#define DT_N_S_soc_S_gpio_fd6a0880_P_compatible_IDX_0 "intel,gpio"
#define DT_N_S_soc_S_gpio_fd6a0880_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6a0880, compatible, 0)
#define DT_N_S_soc_S_gpio_fd6a0880_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6a0880, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6a0880_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_fd6a0880_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6a0880_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6a0880_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6a0880_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpio_fd6a0880_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0880_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_fd6a0880_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@fd6a0a70
 *
 * Node identifier: DT_N_S_soc_S_gpio_fd6a0a70
 *
 * Binding (compatible = intel,gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/intel,gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_fd6a0a70_PATH "/soc/gpio@fd6a0a70"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_fd6a0a70_FULL_NAME "gpio@fd6a0a70"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_fd6a0a70_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_fd6a0a70_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_fd6a0a70_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_fd6a0a70_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_fd6a0a70_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_fd6a0a70_ORD 42

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_fd6a0a70_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	38, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_fd6a0a70_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_fd6a0a70_EXISTS 1
#define DT_N_INST_13_intel_gpio DT_N_S_soc_S_gpio_fd6a0a70
#define DT_N_NODELABEL_gpio_4_e DT_N_S_soc_S_gpio_fd6a0a70

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_fd6a0a70_REG_NUM 1
#define DT_N_S_soc_S_gpio_fd6a0a70_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_REG_IDX_0_VAL_ADDRESS 4251585136 /* 0xfd6a0a70 */
#define DT_N_S_soc_S_gpio_fd6a0a70_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_fd6a0a70_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_fd6a0a70_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_IRQ_IDX_0_VAL_irq 14
#define DT_N_S_soc_S_gpio_fd6a0a70_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_soc_S_gpio_fd6a0a70_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_fd6a0a70_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_COMPAT_MATCHES_intel_gpio 1
#define DT_N_S_soc_S_gpio_fd6a0a70_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_fd6a0a70_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_fd6a0a70_P_reg {4251585136 /* 0xfd6a0a70 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_fd6a0a70_P_reg_IDX_0 4251585136
#define DT_N_S_soc_S_gpio_fd6a0a70_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_fd6a0a70_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6a0a70, reg, 0) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, reg, 1)
#define DT_N_S_soc_S_gpio_fd6a0a70_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6a0a70, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6a0a70_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_P_label "GPIO_COM_4_E"
#define DT_N_S_soc_S_gpio_fd6a0a70_P_label_STRING_TOKEN GPIO_COM_4_E
#define DT_N_S_soc_S_gpio_fd6a0a70_P_label_STRING_UPPER_TOKEN GPIO_COM_4_E
#define DT_N_S_soc_S_gpio_fd6a0a70_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 0) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 1) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 2) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 3) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 4) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 5) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 6) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 7) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 8) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 9) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 10) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 11)
#define DT_N_S_soc_S_gpio_fd6a0a70_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, label, 11, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6a0a70_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_P_group_index 3
#define DT_N_S_soc_S_gpio_fd6a0a70_P_group_index_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_P_interrupts {14 /* 0xe */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_fd6a0a70_P_interrupts_IDX_0 14
#define DT_N_S_soc_S_gpio_fd6a0a70_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_P_interrupts_IDX_1 41216
#define DT_N_S_soc_S_gpio_fd6a0a70_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_P_interrupts_IDX_2 3
#define DT_N_S_soc_S_gpio_fd6a0a70_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6a0a70, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, interrupts, 1) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, interrupts, 2)
#define DT_N_S_soc_S_gpio_fd6a0a70_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6a0a70, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, interrupts, 2, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6a0a70_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_P_ngpios 24
#define DT_N_S_soc_S_gpio_fd6a0a70_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_P_pin_offset 57
#define DT_N_S_soc_S_gpio_fd6a0a70_P_pin_offset_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_fd6a0a70_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_P_status "okay"
#define DT_N_S_soc_S_gpio_fd6a0a70_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6a0a70_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6a0a70_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_fd6a0a70_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6a0a70_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6a0a70_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6a0a70, status, 0) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, status, 1) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, status, 2) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, status, 3)
#define DT_N_S_soc_S_gpio_fd6a0a70_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6a0a70, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6a0a70, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6a0a70_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_P_compatible {"intel,gpio"}
#define DT_N_S_soc_S_gpio_fd6a0a70_P_compatible_IDX_0 "intel,gpio"
#define DT_N_S_soc_S_gpio_fd6a0a70_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6a0a70, compatible, 0)
#define DT_N_S_soc_S_gpio_fd6a0a70_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6a0a70, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6a0a70_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_fd6a0a70_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6a0a70_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6a0a70_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6a0a70_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpio_fd6a0a70_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6a0a70_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_fd6a0a70_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@fd6b0810
 *
 * Node identifier: DT_N_S_soc_S_gpio_fd6b0810
 *
 * Binding (compatible = intel,gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/intel,gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_fd6b0810_PATH "/soc/gpio@fd6b0810"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_fd6b0810_FULL_NAME "gpio@fd6b0810"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_fd6b0810_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_fd6b0810_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_fd6b0810_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_fd6b0810_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_fd6b0810_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_fd6b0810_ORD 43

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_fd6b0810_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	38, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_fd6b0810_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_fd6b0810_EXISTS 1
#define DT_N_INST_8_intel_gpio  DT_N_S_soc_S_gpio_fd6b0810
#define DT_N_NODELABEL_gpio_3_s DT_N_S_soc_S_gpio_fd6b0810

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_fd6b0810_REG_NUM 1
#define DT_N_S_soc_S_gpio_fd6b0810_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_REG_IDX_0_VAL_ADDRESS 4251650064 /* 0xfd6b0810 */
#define DT_N_S_soc_S_gpio_fd6b0810_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_fd6b0810_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_fd6b0810_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_IRQ_IDX_0_VAL_irq 14
#define DT_N_S_soc_S_gpio_fd6b0810_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_soc_S_gpio_fd6b0810_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_fd6b0810_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_COMPAT_MATCHES_intel_gpio 1
#define DT_N_S_soc_S_gpio_fd6b0810_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_fd6b0810_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_fd6b0810_P_reg {4251650064 /* 0xfd6b0810 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_fd6b0810_P_reg_IDX_0 4251650064
#define DT_N_S_soc_S_gpio_fd6b0810_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_fd6b0810_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6b0810, reg, 0) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, reg, 1)
#define DT_N_S_soc_S_gpio_fd6b0810_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6b0810, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6b0810_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_P_label "GPIO_COM_3_S"
#define DT_N_S_soc_S_gpio_fd6b0810_P_label_STRING_TOKEN GPIO_COM_3_S
#define DT_N_S_soc_S_gpio_fd6b0810_P_label_STRING_UPPER_TOKEN GPIO_COM_3_S
#define DT_N_S_soc_S_gpio_fd6b0810_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6b0810, label, 0) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, label, 1) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, label, 2) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, label, 3) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, label, 4) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, label, 5) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, label, 6) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, label, 7) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, label, 8) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, label, 9) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, label, 10) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, label, 11)
#define DT_N_S_soc_S_gpio_fd6b0810_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6b0810, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, label, 11, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6b0810_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_P_group_index 1
#define DT_N_S_soc_S_gpio_fd6b0810_P_group_index_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_P_interrupts {14 /* 0xe */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_fd6b0810_P_interrupts_IDX_0 14
#define DT_N_S_soc_S_gpio_fd6b0810_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_P_interrupts_IDX_1 41216
#define DT_N_S_soc_S_gpio_fd6b0810_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_P_interrupts_IDX_2 3
#define DT_N_S_soc_S_gpio_fd6b0810_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6b0810, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, interrupts, 1) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, interrupts, 2)
#define DT_N_S_soc_S_gpio_fd6b0810_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6b0810, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, interrupts, 2, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6b0810_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_P_ngpios 2
#define DT_N_S_soc_S_gpio_fd6b0810_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_P_pin_offset 17
#define DT_N_S_soc_S_gpio_fd6b0810_P_pin_offset_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_fd6b0810_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_P_status "okay"
#define DT_N_S_soc_S_gpio_fd6b0810_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6b0810_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6b0810_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_fd6b0810_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6b0810_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6b0810_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6b0810, status, 0) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, status, 1) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, status, 2) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, status, 3)
#define DT_N_S_soc_S_gpio_fd6b0810_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6b0810, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0810, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6b0810_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_P_compatible {"intel,gpio"}
#define DT_N_S_soc_S_gpio_fd6b0810_P_compatible_IDX_0 "intel,gpio"
#define DT_N_S_soc_S_gpio_fd6b0810_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6b0810, compatible, 0)
#define DT_N_S_soc_S_gpio_fd6b0810_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6b0810, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6b0810_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_fd6b0810_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6b0810_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6b0810_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6b0810_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpio_fd6b0810_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0810_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_fd6b0810_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@fd6b0830
 *
 * Node identifier: DT_N_S_soc_S_gpio_fd6b0830
 *
 * Binding (compatible = intel,gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/intel,gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_fd6b0830_PATH "/soc/gpio@fd6b0830"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_fd6b0830_FULL_NAME "gpio@fd6b0830"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_fd6b0830_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_fd6b0830_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_fd6b0830_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_fd6b0830_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_fd6b0830_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_fd6b0830_ORD 44

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_fd6b0830_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	38, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_fd6b0830_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_fd6b0830_EXISTS 1
#define DT_N_INST_9_intel_gpio  DT_N_S_soc_S_gpio_fd6b0830
#define DT_N_NODELABEL_gpio_3_a DT_N_S_soc_S_gpio_fd6b0830

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_fd6b0830_REG_NUM 1
#define DT_N_S_soc_S_gpio_fd6b0830_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_REG_IDX_0_VAL_ADDRESS 4251650096 /* 0xfd6b0830 */
#define DT_N_S_soc_S_gpio_fd6b0830_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_fd6b0830_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_fd6b0830_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_IRQ_IDX_0_VAL_irq 14
#define DT_N_S_soc_S_gpio_fd6b0830_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_soc_S_gpio_fd6b0830_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_fd6b0830_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_COMPAT_MATCHES_intel_gpio 1
#define DT_N_S_soc_S_gpio_fd6b0830_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_fd6b0830_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_fd6b0830_P_reg {4251650096 /* 0xfd6b0830 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_fd6b0830_P_reg_IDX_0 4251650096
#define DT_N_S_soc_S_gpio_fd6b0830_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_fd6b0830_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6b0830, reg, 0) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, reg, 1)
#define DT_N_S_soc_S_gpio_fd6b0830_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6b0830, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6b0830_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_P_label "GPIO_COM_3_A"
#define DT_N_S_soc_S_gpio_fd6b0830_P_label_STRING_TOKEN GPIO_COM_3_A
#define DT_N_S_soc_S_gpio_fd6b0830_P_label_STRING_UPPER_TOKEN GPIO_COM_3_A
#define DT_N_S_soc_S_gpio_fd6b0830_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6b0830, label, 0) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, label, 1) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, label, 2) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, label, 3) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, label, 4) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, label, 5) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, label, 6) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, label, 7) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, label, 8) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, label, 9) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, label, 10) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, label, 11)
#define DT_N_S_soc_S_gpio_fd6b0830_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6b0830, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, label, 11, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6b0830_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_P_group_index 2
#define DT_N_S_soc_S_gpio_fd6b0830_P_group_index_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_P_interrupts {14 /* 0xe */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_fd6b0830_P_interrupts_IDX_0 14
#define DT_N_S_soc_S_gpio_fd6b0830_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_P_interrupts_IDX_1 41216
#define DT_N_S_soc_S_gpio_fd6b0830_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_P_interrupts_IDX_2 3
#define DT_N_S_soc_S_gpio_fd6b0830_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6b0830, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, interrupts, 1) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, interrupts, 2)
#define DT_N_S_soc_S_gpio_fd6b0830_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6b0830, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, interrupts, 2, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6b0830_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_P_ngpios 24
#define DT_N_S_soc_S_gpio_fd6b0830_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_P_pin_offset 25
#define DT_N_S_soc_S_gpio_fd6b0830_P_pin_offset_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_fd6b0830_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_P_status "okay"
#define DT_N_S_soc_S_gpio_fd6b0830_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6b0830_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6b0830_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_fd6b0830_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6b0830_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6b0830_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6b0830, status, 0) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, status, 1) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, status, 2) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, status, 3)
#define DT_N_S_soc_S_gpio_fd6b0830_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6b0830, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b0830, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6b0830_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_P_compatible {"intel,gpio"}
#define DT_N_S_soc_S_gpio_fd6b0830_P_compatible_IDX_0 "intel,gpio"
#define DT_N_S_soc_S_gpio_fd6b0830_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6b0830, compatible, 0)
#define DT_N_S_soc_S_gpio_fd6b0830_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6b0830, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6b0830_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_fd6b0830_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6b0830_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6b0830_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6b0830_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpio_fd6b0830_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b0830_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_fd6b0830_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@fd6b09b0
 *
 * Node identifier: DT_N_S_soc_S_gpio_fd6b09b0
 *
 * Binding (compatible = intel,gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/intel,gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_fd6b09b0_PATH "/soc/gpio@fd6b09b0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_fd6b09b0_FULL_NAME "gpio@fd6b09b0"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_fd6b09b0_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_fd6b09b0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_fd6b09b0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_fd6b09b0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_fd6b09b0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_fd6b09b0_ORD 45

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_fd6b09b0_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	38, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_fd6b09b0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_fd6b09b0_EXISTS 1
#define DT_N_INST_10_intel_gpio  DT_N_S_soc_S_gpio_fd6b09b0
#define DT_N_NODELABEL_gpio_3_vg DT_N_S_soc_S_gpio_fd6b09b0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_fd6b09b0_REG_NUM 1
#define DT_N_S_soc_S_gpio_fd6b09b0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_REG_IDX_0_VAL_ADDRESS 4251650480 /* 0xfd6b09b0 */
#define DT_N_S_soc_S_gpio_fd6b09b0_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_fd6b09b0_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_fd6b09b0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_IRQ_IDX_0_VAL_irq 14
#define DT_N_S_soc_S_gpio_fd6b09b0_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_soc_S_gpio_fd6b09b0_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_fd6b09b0_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_COMPAT_MATCHES_intel_gpio 1
#define DT_N_S_soc_S_gpio_fd6b09b0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_fd6b09b0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_fd6b09b0_P_reg {4251650480 /* 0xfd6b09b0 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_fd6b09b0_P_reg_IDX_0 4251650480
#define DT_N_S_soc_S_gpio_fd6b09b0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_fd6b09b0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6b09b0, reg, 0) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, reg, 1)
#define DT_N_S_soc_S_gpio_fd6b09b0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6b09b0, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6b09b0_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_P_label "GPIO_COM_3_vG"
#define DT_N_S_soc_S_gpio_fd6b09b0_P_label_STRING_TOKEN GPIO_COM_3_vG
#define DT_N_S_soc_S_gpio_fd6b09b0_P_label_STRING_UPPER_TOKEN GPIO_COM_3_VG
#define DT_N_S_soc_S_gpio_fd6b09b0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 0) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 1) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 2) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 3) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 4) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 5) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 6) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 7) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 8) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 9) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 10) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 11) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 12)
#define DT_N_S_soc_S_gpio_fd6b09b0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, label, 12, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6b09b0_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_P_group_index 3
#define DT_N_S_soc_S_gpio_fd6b09b0_P_group_index_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_P_interrupts {14 /* 0xe */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_fd6b09b0_P_interrupts_IDX_0 14
#define DT_N_S_soc_S_gpio_fd6b09b0_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_P_interrupts_IDX_1 41216
#define DT_N_S_soc_S_gpio_fd6b09b0_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_P_interrupts_IDX_2 3
#define DT_N_S_soc_S_gpio_fd6b09b0_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6b09b0, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, interrupts, 1) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, interrupts, 2)
#define DT_N_S_soc_S_gpio_fd6b09b0_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6b09b0, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, interrupts, 2, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6b09b0_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_P_ngpios 4
#define DT_N_S_soc_S_gpio_fd6b09b0_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_P_pin_offset 49
#define DT_N_S_soc_S_gpio_fd6b09b0_P_pin_offset_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_fd6b09b0_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_P_status "okay"
#define DT_N_S_soc_S_gpio_fd6b09b0_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6b09b0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6b09b0_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_fd6b09b0_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6b09b0_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6b09b0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6b09b0, status, 0) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, status, 1) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, status, 2) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, status, 3)
#define DT_N_S_soc_S_gpio_fd6b09b0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6b09b0, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6b09b0, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6b09b0_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_P_compatible {"intel,gpio"}
#define DT_N_S_soc_S_gpio_fd6b09b0_P_compatible_IDX_0 "intel,gpio"
#define DT_N_S_soc_S_gpio_fd6b09b0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6b09b0, compatible, 0)
#define DT_N_S_soc_S_gpio_fd6b09b0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6b09b0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6b09b0_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_fd6b09b0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6b09b0_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6b09b0_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6b09b0_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpio_fd6b09b0_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6b09b0_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_fd6b09b0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@fd6d0700
 *
 * Node identifier: DT_N_S_soc_S_gpio_fd6d0700
 *
 * Binding (compatible = intel,gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/intel,gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_fd6d0700_PATH "/soc/gpio@fd6d0700"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_fd6d0700_FULL_NAME "gpio@fd6d0700"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_fd6d0700_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_fd6d0700_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_fd6d0700_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_fd6d0700_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_fd6d0700_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_fd6d0700_ORD 46

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_fd6d0700_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	38, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_fd6d0700_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_fd6d0700_EXISTS 1
#define DT_N_INST_3_intel_gpio  DT_N_S_soc_S_gpio_fd6d0700
#define DT_N_NODELABEL_gpio_1_v DT_N_S_soc_S_gpio_fd6d0700

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_fd6d0700_REG_NUM 1
#define DT_N_S_soc_S_gpio_fd6d0700_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_REG_IDX_0_VAL_ADDRESS 4251780864 /* 0xfd6d0700 */
#define DT_N_S_soc_S_gpio_fd6d0700_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_fd6d0700_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_fd6d0700_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_IRQ_IDX_0_VAL_irq 14
#define DT_N_S_soc_S_gpio_fd6d0700_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_soc_S_gpio_fd6d0700_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_fd6d0700_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_COMPAT_MATCHES_intel_gpio 1
#define DT_N_S_soc_S_gpio_fd6d0700_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_fd6d0700_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_fd6d0700_P_reg {4251780864 /* 0xfd6d0700 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_fd6d0700_P_reg_IDX_0 4251780864
#define DT_N_S_soc_S_gpio_fd6d0700_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_fd6d0700_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0700, reg, 0) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, reg, 1)
#define DT_N_S_soc_S_gpio_fd6d0700_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0700, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0700_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_P_label "GPIO_COM_1_V"
#define DT_N_S_soc_S_gpio_fd6d0700_P_label_STRING_TOKEN GPIO_COM_1_V
#define DT_N_S_soc_S_gpio_fd6d0700_P_label_STRING_UPPER_TOKEN GPIO_COM_1_V
#define DT_N_S_soc_S_gpio_fd6d0700_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0700, label, 0) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, label, 1) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, label, 2) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, label, 3) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, label, 4) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, label, 5) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, label, 6) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, label, 7) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, label, 8) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, label, 9) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, label, 10) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, label, 11)
#define DT_N_S_soc_S_gpio_fd6d0700_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0700, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, label, 11, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0700_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_P_group_index 0
#define DT_N_S_soc_S_gpio_fd6d0700_P_group_index_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_P_interrupts {14 /* 0xe */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_fd6d0700_P_interrupts_IDX_0 14
#define DT_N_S_soc_S_gpio_fd6d0700_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_P_interrupts_IDX_1 41216
#define DT_N_S_soc_S_gpio_fd6d0700_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_P_interrupts_IDX_2 3
#define DT_N_S_soc_S_gpio_fd6d0700_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0700, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, interrupts, 1) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, interrupts, 2)
#define DT_N_S_soc_S_gpio_fd6d0700_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0700, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, interrupts, 2, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0700_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_P_ngpios 16
#define DT_N_S_soc_S_gpio_fd6d0700_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_P_pin_offset 0
#define DT_N_S_soc_S_gpio_fd6d0700_P_pin_offset_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_fd6d0700_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_P_status "okay"
#define DT_N_S_soc_S_gpio_fd6d0700_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6d0700_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6d0700_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_fd6d0700_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6d0700_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6d0700_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0700, status, 0) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, status, 1) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, status, 2) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, status, 3)
#define DT_N_S_soc_S_gpio_fd6d0700_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0700, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0700, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0700_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_P_compatible {"intel,gpio"}
#define DT_N_S_soc_S_gpio_fd6d0700_P_compatible_IDX_0 "intel,gpio"
#define DT_N_S_soc_S_gpio_fd6d0700_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0700, compatible, 0)
#define DT_N_S_soc_S_gpio_fd6d0700_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0700, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0700_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_fd6d0700_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6d0700_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6d0700_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6d0700_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpio_fd6d0700_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0700_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_fd6d0700_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@fd6d0800
 *
 * Node identifier: DT_N_S_soc_S_gpio_fd6d0800
 *
 * Binding (compatible = intel,gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/intel,gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_fd6d0800_PATH "/soc/gpio@fd6d0800"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_fd6d0800_FULL_NAME "gpio@fd6d0800"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_fd6d0800_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_fd6d0800_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_fd6d0800_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_fd6d0800_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_fd6d0800_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_fd6d0800_ORD 47

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_fd6d0800_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	38, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_fd6d0800_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_fd6d0800_EXISTS 1
#define DT_N_INST_4_intel_gpio  DT_N_S_soc_S_gpio_fd6d0800
#define DT_N_NODELABEL_gpio_1_h DT_N_S_soc_S_gpio_fd6d0800

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_fd6d0800_REG_NUM 1
#define DT_N_S_soc_S_gpio_fd6d0800_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_REG_IDX_0_VAL_ADDRESS 4251781120 /* 0xfd6d0800 */
#define DT_N_S_soc_S_gpio_fd6d0800_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_fd6d0800_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_fd6d0800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_IRQ_IDX_0_VAL_irq 14
#define DT_N_S_soc_S_gpio_fd6d0800_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_soc_S_gpio_fd6d0800_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_fd6d0800_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_COMPAT_MATCHES_intel_gpio 1
#define DT_N_S_soc_S_gpio_fd6d0800_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_fd6d0800_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_fd6d0800_P_reg {4251781120 /* 0xfd6d0800 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_fd6d0800_P_reg_IDX_0 4251781120
#define DT_N_S_soc_S_gpio_fd6d0800_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_fd6d0800_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0800, reg, 0) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, reg, 1)
#define DT_N_S_soc_S_gpio_fd6d0800_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0800, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0800_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_P_label "GPIO_COM_1_H"
#define DT_N_S_soc_S_gpio_fd6d0800_P_label_STRING_TOKEN GPIO_COM_1_H
#define DT_N_S_soc_S_gpio_fd6d0800_P_label_STRING_UPPER_TOKEN GPIO_COM_1_H
#define DT_N_S_soc_S_gpio_fd6d0800_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0800, label, 0) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, label, 1) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, label, 2) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, label, 3) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, label, 4) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, label, 5) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, label, 6) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, label, 7) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, label, 8) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, label, 9) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, label, 10) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, label, 11)
#define DT_N_S_soc_S_gpio_fd6d0800_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0800, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, label, 11, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0800_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_P_group_index 1
#define DT_N_S_soc_S_gpio_fd6d0800_P_group_index_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_P_interrupts {14 /* 0xe */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_fd6d0800_P_interrupts_IDX_0 14
#define DT_N_S_soc_S_gpio_fd6d0800_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_P_interrupts_IDX_1 41216
#define DT_N_S_soc_S_gpio_fd6d0800_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_P_interrupts_IDX_2 3
#define DT_N_S_soc_S_gpio_fd6d0800_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0800, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, interrupts, 1) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, interrupts, 2)
#define DT_N_S_soc_S_gpio_fd6d0800_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0800, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, interrupts, 2, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0800_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_P_ngpios 24
#define DT_N_S_soc_S_gpio_fd6d0800_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_P_pin_offset 16
#define DT_N_S_soc_S_gpio_fd6d0800_P_pin_offset_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_fd6d0800_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_P_status "okay"
#define DT_N_S_soc_S_gpio_fd6d0800_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6d0800_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6d0800_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_fd6d0800_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6d0800_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6d0800_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0800, status, 0) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, status, 1) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, status, 2) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, status, 3)
#define DT_N_S_soc_S_gpio_fd6d0800_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0800, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0800, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0800_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_P_compatible {"intel,gpio"}
#define DT_N_S_soc_S_gpio_fd6d0800_P_compatible_IDX_0 "intel,gpio"
#define DT_N_S_soc_S_gpio_fd6d0800_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0800, compatible, 0)
#define DT_N_S_soc_S_gpio_fd6d0800_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0800_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_fd6d0800_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6d0800_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6d0800_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6d0800_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpio_fd6d0800_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0800_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_fd6d0800_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@fd6d0980
 *
 * Node identifier: DT_N_S_soc_S_gpio_fd6d0980
 *
 * Binding (compatible = intel,gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/intel,gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_fd6d0980_PATH "/soc/gpio@fd6d0980"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_fd6d0980_FULL_NAME "gpio@fd6d0980"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_fd6d0980_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_fd6d0980_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_fd6d0980_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_fd6d0980_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_fd6d0980_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_fd6d0980_ORD 48

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_fd6d0980_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	38, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_fd6d0980_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_fd6d0980_EXISTS 1
#define DT_N_INST_5_intel_gpio  DT_N_S_soc_S_gpio_fd6d0980
#define DT_N_NODELABEL_gpio_1_d DT_N_S_soc_S_gpio_fd6d0980

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_fd6d0980_REG_NUM 1
#define DT_N_S_soc_S_gpio_fd6d0980_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_REG_IDX_0_VAL_ADDRESS 4251781504 /* 0xfd6d0980 */
#define DT_N_S_soc_S_gpio_fd6d0980_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_fd6d0980_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_fd6d0980_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_IRQ_IDX_0_VAL_irq 14
#define DT_N_S_soc_S_gpio_fd6d0980_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_soc_S_gpio_fd6d0980_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_fd6d0980_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_COMPAT_MATCHES_intel_gpio 1
#define DT_N_S_soc_S_gpio_fd6d0980_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_fd6d0980_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_fd6d0980_P_reg {4251781504 /* 0xfd6d0980 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_fd6d0980_P_reg_IDX_0 4251781504
#define DT_N_S_soc_S_gpio_fd6d0980_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_fd6d0980_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0980, reg, 0) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, reg, 1)
#define DT_N_S_soc_S_gpio_fd6d0980_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0980, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0980_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_P_label "GPIO_COM_1_D"
#define DT_N_S_soc_S_gpio_fd6d0980_P_label_STRING_TOKEN GPIO_COM_1_D
#define DT_N_S_soc_S_gpio_fd6d0980_P_label_STRING_UPPER_TOKEN GPIO_COM_1_D
#define DT_N_S_soc_S_gpio_fd6d0980_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0980, label, 0) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, label, 1) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, label, 2) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, label, 3) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, label, 4) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, label, 5) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, label, 6) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, label, 7) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, label, 8) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, label, 9) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, label, 10) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, label, 11)
#define DT_N_S_soc_S_gpio_fd6d0980_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0980, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, label, 11, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0980_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_P_group_index 2
#define DT_N_S_soc_S_gpio_fd6d0980_P_group_index_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_P_interrupts {14 /* 0xe */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_fd6d0980_P_interrupts_IDX_0 14
#define DT_N_S_soc_S_gpio_fd6d0980_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_P_interrupts_IDX_1 41216
#define DT_N_S_soc_S_gpio_fd6d0980_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_P_interrupts_IDX_2 3
#define DT_N_S_soc_S_gpio_fd6d0980_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0980, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, interrupts, 1) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, interrupts, 2)
#define DT_N_S_soc_S_gpio_fd6d0980_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0980, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, interrupts, 2, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0980_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_P_ngpios 20
#define DT_N_S_soc_S_gpio_fd6d0980_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_P_pin_offset 40
#define DT_N_S_soc_S_gpio_fd6d0980_P_pin_offset_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_fd6d0980_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_P_status "okay"
#define DT_N_S_soc_S_gpio_fd6d0980_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6d0980_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6d0980_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_fd6d0980_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6d0980_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6d0980_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0980, status, 0) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, status, 1) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, status, 2) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, status, 3)
#define DT_N_S_soc_S_gpio_fd6d0980_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0980, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0980, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0980_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_P_compatible {"intel,gpio"}
#define DT_N_S_soc_S_gpio_fd6d0980_P_compatible_IDX_0 "intel,gpio"
#define DT_N_S_soc_S_gpio_fd6d0980_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0980, compatible, 0)
#define DT_N_S_soc_S_gpio_fd6d0980_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0980, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0980_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_fd6d0980_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6d0980_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6d0980_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6d0980_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpio_fd6d0980_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0980_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_fd6d0980_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@fd6d0ad0
 *
 * Node identifier: DT_N_S_soc_S_gpio_fd6d0ad0
 *
 * Binding (compatible = intel,gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/intel,gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_fd6d0ad0_PATH "/soc/gpio@fd6d0ad0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_fd6d0ad0_FULL_NAME "gpio@fd6d0ad0"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_fd6d0ad0_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_fd6d0ad0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_fd6d0ad0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_fd6d0ad0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_fd6d0ad0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_fd6d0ad0_ORD 49

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_fd6d0ad0_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	38, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_fd6d0ad0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_fd6d0ad0_EXISTS 1
#define DT_N_INST_6_intel_gpio  DT_N_S_soc_S_gpio_fd6d0ad0
#define DT_N_NODELABEL_gpio_1_u DT_N_S_soc_S_gpio_fd6d0ad0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_fd6d0ad0_REG_NUM 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_REG_IDX_0_VAL_ADDRESS 4251781840 /* 0xfd6d0ad0 */
#define DT_N_S_soc_S_gpio_fd6d0ad0_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_fd6d0ad0_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_IRQ_IDX_0_VAL_irq 14
#define DT_N_S_soc_S_gpio_fd6d0ad0_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_soc_S_gpio_fd6d0ad0_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_fd6d0ad0_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_COMPAT_MATCHES_intel_gpio 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_fd6d0ad0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_reg {4251781840 /* 0xfd6d0ad0 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_reg_IDX_0 4251781840
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0ad0, reg, 0) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, reg, 1)
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0ad0, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_label "GPIO_COM_1_U"
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_label_STRING_TOKEN GPIO_COM_1_U
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_label_STRING_UPPER_TOKEN GPIO_COM_1_U
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 0) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 1) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 2) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 3) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 4) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 5) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 6) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 7) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 8) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 9) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 10) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 11)
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, label, 11, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_group_index 3
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_group_index_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_interrupts {14 /* 0xe */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_interrupts_IDX_0 14
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_interrupts_IDX_1 41216
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_interrupts_IDX_2 3
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0ad0, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, interrupts, 1) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, interrupts, 2)
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0ad0, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, interrupts, 2, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_ngpios 20
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_pin_offset 61
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_pin_offset_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_status "okay"
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0ad0, status, 0) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, status, 1) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, status, 2) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, status, 3)
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0ad0, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0ad0, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_compatible {"intel,gpio"}
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_compatible_IDX_0 "intel,gpio"
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0ad0, compatible, 0)
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0ad0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_fd6d0ad0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@fd6d0c50
 *
 * Node identifier: DT_N_S_soc_S_gpio_fd6d0c50
 *
 * Binding (compatible = intel,gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/intel,gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_fd6d0c50_PATH "/soc/gpio@fd6d0c50"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_fd6d0c50_FULL_NAME "gpio@fd6d0c50"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_fd6d0c50_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_fd6d0c50_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_fd6d0c50_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_fd6d0c50_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_fd6d0c50_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_fd6d0c50_ORD 50

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_fd6d0c50_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	38, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_fd6d0c50_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_fd6d0c50_EXISTS 1
#define DT_N_INST_7_intel_gpio   DT_N_S_soc_S_gpio_fd6d0c50
#define DT_N_NODELABEL_gpio_1_vg DT_N_S_soc_S_gpio_fd6d0c50

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_fd6d0c50_REG_NUM 1
#define DT_N_S_soc_S_gpio_fd6d0c50_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_REG_IDX_0_VAL_ADDRESS 4251782224 /* 0xfd6d0c50 */
#define DT_N_S_soc_S_gpio_fd6d0c50_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_fd6d0c50_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_fd6d0c50_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_IRQ_IDX_0_VAL_irq 14
#define DT_N_S_soc_S_gpio_fd6d0c50_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_soc_S_gpio_fd6d0c50_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_fd6d0c50_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_COMPAT_MATCHES_intel_gpio 1
#define DT_N_S_soc_S_gpio_fd6d0c50_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_fd6d0c50_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_fd6d0c50_P_reg {4251782224 /* 0xfd6d0c50 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_fd6d0c50_P_reg_IDX_0 4251782224
#define DT_N_S_soc_S_gpio_fd6d0c50_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_fd6d0c50_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0c50, reg, 0) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, reg, 1)
#define DT_N_S_soc_S_gpio_fd6d0c50_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0c50, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0c50_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_P_label "GPIO_COM_1_vG"
#define DT_N_S_soc_S_gpio_fd6d0c50_P_label_STRING_TOKEN GPIO_COM_1_vG
#define DT_N_S_soc_S_gpio_fd6d0c50_P_label_STRING_UPPER_TOKEN GPIO_COM_1_VG
#define DT_N_S_soc_S_gpio_fd6d0c50_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 0) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 1) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 2) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 3) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 4) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 5) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 6) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 7) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 8) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 9) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 10) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 11) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 12)
#define DT_N_S_soc_S_gpio_fd6d0c50_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, label, 12, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0c50_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_P_group_index 4
#define DT_N_S_soc_S_gpio_fd6d0c50_P_group_index_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_P_interrupts {14 /* 0xe */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_fd6d0c50_P_interrupts_IDX_0 14
#define DT_N_S_soc_S_gpio_fd6d0c50_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_P_interrupts_IDX_1 41216
#define DT_N_S_soc_S_gpio_fd6d0c50_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_P_interrupts_IDX_2 3
#define DT_N_S_soc_S_gpio_fd6d0c50_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0c50, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, interrupts, 1) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, interrupts, 2)
#define DT_N_S_soc_S_gpio_fd6d0c50_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0c50, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, interrupts, 2, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0c50_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_P_ngpios 28
#define DT_N_S_soc_S_gpio_fd6d0c50_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_P_pin_offset 85
#define DT_N_S_soc_S_gpio_fd6d0c50_P_pin_offset_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_fd6d0c50_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_P_status "okay"
#define DT_N_S_soc_S_gpio_fd6d0c50_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6d0c50_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6d0c50_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_fd6d0c50_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6d0c50_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6d0c50_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0c50, status, 0) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, status, 1) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, status, 2) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, status, 3)
#define DT_N_S_soc_S_gpio_fd6d0c50_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0c50, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6d0c50, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0c50_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_P_compatible {"intel,gpio"}
#define DT_N_S_soc_S_gpio_fd6d0c50_P_compatible_IDX_0 "intel,gpio"
#define DT_N_S_soc_S_gpio_fd6d0c50_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6d0c50, compatible, 0)
#define DT_N_S_soc_S_gpio_fd6d0c50_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6d0c50, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6d0c50_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_fd6d0c50_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6d0c50_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6d0c50_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6d0c50_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpio_fd6d0c50_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6d0c50_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_fd6d0c50_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@fd6e0700
 *
 * Node identifier: DT_N_S_soc_S_gpio_fd6e0700
 *
 * Binding (compatible = intel,gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/intel,gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_fd6e0700_PATH "/soc/gpio@fd6e0700"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_fd6e0700_FULL_NAME "gpio@fd6e0700"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_fd6e0700_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_fd6e0700_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_fd6e0700_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_fd6e0700_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_fd6e0700_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_fd6e0700_ORD 51

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_fd6e0700_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	38, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_fd6e0700_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_fd6e0700_EXISTS 1
#define DT_N_INST_0_intel_gpio  DT_N_S_soc_S_gpio_fd6e0700
#define DT_N_NODELABEL_gpio_0_b DT_N_S_soc_S_gpio_fd6e0700

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_fd6e0700_REG_NUM 1
#define DT_N_S_soc_S_gpio_fd6e0700_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_REG_IDX_0_VAL_ADDRESS 4251846400 /* 0xfd6e0700 */
#define DT_N_S_soc_S_gpio_fd6e0700_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_fd6e0700_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_fd6e0700_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_IRQ_IDX_0_VAL_irq 14
#define DT_N_S_soc_S_gpio_fd6e0700_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_soc_S_gpio_fd6e0700_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_fd6e0700_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_COMPAT_MATCHES_intel_gpio 1
#define DT_N_S_soc_S_gpio_fd6e0700_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_fd6e0700_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_fd6e0700_P_reg {4251846400 /* 0xfd6e0700 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_fd6e0700_P_reg_IDX_0 4251846400
#define DT_N_S_soc_S_gpio_fd6e0700_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_fd6e0700_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6e0700, reg, 0) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, reg, 1)
#define DT_N_S_soc_S_gpio_fd6e0700_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6e0700, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6e0700_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_P_label "GPIO_COM_0_B"
#define DT_N_S_soc_S_gpio_fd6e0700_P_label_STRING_TOKEN GPIO_COM_0_B
#define DT_N_S_soc_S_gpio_fd6e0700_P_label_STRING_UPPER_TOKEN GPIO_COM_0_B
#define DT_N_S_soc_S_gpio_fd6e0700_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6e0700, label, 0) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, label, 1) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, label, 2) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, label, 3) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, label, 4) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, label, 5) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, label, 6) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, label, 7) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, label, 8) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, label, 9) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, label, 10) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, label, 11)
#define DT_N_S_soc_S_gpio_fd6e0700_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6e0700, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, label, 11, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6e0700_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_P_group_index 0
#define DT_N_S_soc_S_gpio_fd6e0700_P_group_index_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_P_interrupts {14 /* 0xe */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_fd6e0700_P_interrupts_IDX_0 14
#define DT_N_S_soc_S_gpio_fd6e0700_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_P_interrupts_IDX_1 41216
#define DT_N_S_soc_S_gpio_fd6e0700_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_P_interrupts_IDX_2 3
#define DT_N_S_soc_S_gpio_fd6e0700_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6e0700, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, interrupts, 1) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, interrupts, 2)
#define DT_N_S_soc_S_gpio_fd6e0700_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6e0700, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, interrupts, 2, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6e0700_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_P_ngpios 24
#define DT_N_S_soc_S_gpio_fd6e0700_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_P_pin_offset 0
#define DT_N_S_soc_S_gpio_fd6e0700_P_pin_offset_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_fd6e0700_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_P_status "okay"
#define DT_N_S_soc_S_gpio_fd6e0700_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6e0700_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6e0700_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_fd6e0700_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6e0700_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6e0700_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6e0700, status, 0) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, status, 1) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, status, 2) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, status, 3)
#define DT_N_S_soc_S_gpio_fd6e0700_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6e0700, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e0700, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6e0700_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_P_compatible {"intel,gpio"}
#define DT_N_S_soc_S_gpio_fd6e0700_P_compatible_IDX_0 "intel,gpio"
#define DT_N_S_soc_S_gpio_fd6e0700_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6e0700, compatible, 0)
#define DT_N_S_soc_S_gpio_fd6e0700_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6e0700, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6e0700_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_fd6e0700_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6e0700_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6e0700_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6e0700_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpio_fd6e0700_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e0700_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_fd6e0700_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@fd6e08a0
 *
 * Node identifier: DT_N_S_soc_S_gpio_fd6e08a0
 *
 * Binding (compatible = intel,gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/intel,gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_fd6e08a0_PATH "/soc/gpio@fd6e08a0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_fd6e08a0_FULL_NAME "gpio@fd6e08a0"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_fd6e08a0_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_fd6e08a0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_fd6e08a0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_fd6e08a0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_fd6e08a0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_fd6e08a0_ORD 52

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_fd6e08a0_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	38, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_fd6e08a0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_fd6e08a0_EXISTS 1
#define DT_N_INST_1_intel_gpio  DT_N_S_soc_S_gpio_fd6e08a0
#define DT_N_NODELABEL_gpio_0_t DT_N_S_soc_S_gpio_fd6e08a0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_fd6e08a0_REG_NUM 1
#define DT_N_S_soc_S_gpio_fd6e08a0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_REG_IDX_0_VAL_ADDRESS 4251846816 /* 0xfd6e08a0 */
#define DT_N_S_soc_S_gpio_fd6e08a0_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_fd6e08a0_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_fd6e08a0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_IRQ_IDX_0_VAL_irq 14
#define DT_N_S_soc_S_gpio_fd6e08a0_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_soc_S_gpio_fd6e08a0_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_fd6e08a0_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_COMPAT_MATCHES_intel_gpio 1
#define DT_N_S_soc_S_gpio_fd6e08a0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_fd6e08a0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_fd6e08a0_P_reg {4251846816 /* 0xfd6e08a0 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_fd6e08a0_P_reg_IDX_0 4251846816
#define DT_N_S_soc_S_gpio_fd6e08a0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_fd6e08a0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6e08a0, reg, 0) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, reg, 1)
#define DT_N_S_soc_S_gpio_fd6e08a0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6e08a0, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6e08a0_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_P_label "GPIO_COM_0_T"
#define DT_N_S_soc_S_gpio_fd6e08a0_P_label_STRING_TOKEN GPIO_COM_0_T
#define DT_N_S_soc_S_gpio_fd6e08a0_P_label_STRING_UPPER_TOKEN GPIO_COM_0_T
#define DT_N_S_soc_S_gpio_fd6e08a0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 0) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 1) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 2) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 3) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 4) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 5) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 6) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 7) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 8) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 9) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 10) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 11)
#define DT_N_S_soc_S_gpio_fd6e08a0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, label, 11, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6e08a0_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_P_group_index 1
#define DT_N_S_soc_S_gpio_fd6e08a0_P_group_index_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_P_interrupts {14 /* 0xe */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_fd6e08a0_P_interrupts_IDX_0 14
#define DT_N_S_soc_S_gpio_fd6e08a0_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_P_interrupts_IDX_1 41216
#define DT_N_S_soc_S_gpio_fd6e08a0_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_P_interrupts_IDX_2 3
#define DT_N_S_soc_S_gpio_fd6e08a0_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6e08a0, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, interrupts, 1) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, interrupts, 2)
#define DT_N_S_soc_S_gpio_fd6e08a0_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6e08a0, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, interrupts, 2, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6e08a0_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_P_ngpios 16
#define DT_N_S_soc_S_gpio_fd6e08a0_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_P_pin_offset 26
#define DT_N_S_soc_S_gpio_fd6e08a0_P_pin_offset_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_fd6e08a0_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_P_status "okay"
#define DT_N_S_soc_S_gpio_fd6e08a0_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6e08a0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6e08a0_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_fd6e08a0_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6e08a0_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6e08a0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6e08a0, status, 0) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, status, 1) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, status, 2) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, status, 3)
#define DT_N_S_soc_S_gpio_fd6e08a0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6e08a0, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e08a0, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6e08a0_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_P_compatible {"intel,gpio"}
#define DT_N_S_soc_S_gpio_fd6e08a0_P_compatible_IDX_0 "intel,gpio"
#define DT_N_S_soc_S_gpio_fd6e08a0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6e08a0, compatible, 0)
#define DT_N_S_soc_S_gpio_fd6e08a0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6e08a0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6e08a0_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_fd6e08a0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6e08a0_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6e08a0_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6e08a0_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpio_fd6e08a0_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e08a0_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_fd6e08a0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@fd6e09a0
 *
 * Node identifier: DT_N_S_soc_S_gpio_fd6e09a0
 *
 * Binding (compatible = intel,gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/intel,gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_fd6e09a0_PATH "/soc/gpio@fd6e09a0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_fd6e09a0_FULL_NAME "gpio@fd6e09a0"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_fd6e09a0_PARENT DT_N_S_soc
#define DT_N_S_soc_S_gpio_fd6e09a0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_fd6e09a0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_fd6e09a0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_fd6e09a0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_fd6e09a0_ORD 53

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_fd6e09a0_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	38, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_fd6e09a0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_fd6e09a0_EXISTS 1
#define DT_N_INST_2_intel_gpio  DT_N_S_soc_S_gpio_fd6e09a0
#define DT_N_NODELABEL_gpio_0_g DT_N_S_soc_S_gpio_fd6e09a0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_fd6e09a0_REG_NUM 1
#define DT_N_S_soc_S_gpio_fd6e09a0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_REG_IDX_0_VAL_ADDRESS 4251847072 /* 0xfd6e09a0 */
#define DT_N_S_soc_S_gpio_fd6e09a0_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_fd6e09a0_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_fd6e09a0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_IRQ_IDX_0_VAL_irq 14
#define DT_N_S_soc_S_gpio_fd6e09a0_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_soc_S_gpio_fd6e09a0_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_fd6e09a0_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_COMPAT_MATCHES_intel_gpio 1
#define DT_N_S_soc_S_gpio_fd6e09a0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_fd6e09a0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_fd6e09a0_P_reg {4251847072 /* 0xfd6e09a0 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_fd6e09a0_P_reg_IDX_0 4251847072
#define DT_N_S_soc_S_gpio_fd6e09a0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_fd6e09a0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6e09a0, reg, 0) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, reg, 1)
#define DT_N_S_soc_S_gpio_fd6e09a0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6e09a0, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6e09a0_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_P_label "GPIO_COM_0_G"
#define DT_N_S_soc_S_gpio_fd6e09a0_P_label_STRING_TOKEN GPIO_COM_0_G
#define DT_N_S_soc_S_gpio_fd6e09a0_P_label_STRING_UPPER_TOKEN GPIO_COM_0_G
#define DT_N_S_soc_S_gpio_fd6e09a0_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 0) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 1) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 2) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 3) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 4) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 5) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 6) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 7) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 8) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 9) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 10) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 11)
#define DT_N_S_soc_S_gpio_fd6e09a0_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, label, 11, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6e09a0_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_P_group_index 2
#define DT_N_S_soc_S_gpio_fd6e09a0_P_group_index_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_P_interrupts {14 /* 0xe */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_fd6e09a0_P_interrupts_IDX_0 14
#define DT_N_S_soc_S_gpio_fd6e09a0_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_P_interrupts_IDX_1 41216
#define DT_N_S_soc_S_gpio_fd6e09a0_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_P_interrupts_IDX_2 3
#define DT_N_S_soc_S_gpio_fd6e09a0_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6e09a0, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, interrupts, 1) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, interrupts, 2)
#define DT_N_S_soc_S_gpio_fd6e09a0_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6e09a0, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, interrupts, 2, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6e09a0_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_P_ngpios 24
#define DT_N_S_soc_S_gpio_fd6e09a0_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_P_pin_offset 42
#define DT_N_S_soc_S_gpio_fd6e09a0_P_pin_offset_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_fd6e09a0_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_P_status "okay"
#define DT_N_S_soc_S_gpio_fd6e09a0_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6e09a0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6e09a0_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_fd6e09a0_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_fd6e09a0_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_fd6e09a0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6e09a0, status, 0) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, status, 1) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, status, 2) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, status, 3)
#define DT_N_S_soc_S_gpio_fd6e09a0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6e09a0, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_fd6e09a0, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6e09a0_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_P_compatible {"intel,gpio"}
#define DT_N_S_soc_S_gpio_fd6e09a0_P_compatible_IDX_0 "intel,gpio"
#define DT_N_S_soc_S_gpio_fd6e09a0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_fd6e09a0, compatible, 0)
#define DT_N_S_soc_S_gpio_fd6e09a0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_fd6e09a0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_fd6e09a0_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_fd6e09a0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6e09a0_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6e09a0_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_gpio_fd6e09a0_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpio_fd6e09a0_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpio_fd6e09a0_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_fd6e09a0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/hpet@fed00000
 *
 * Node identifier: DT_N_S_soc_S_hpet_fed00000
 *
 * Binding (compatible = intel,hpet):
 *   $ZEPHYR_BASE/dts/bindings/timer/intel,hpet.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_hpet_fed00000_PATH "/soc/hpet@fed00000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_hpet_fed00000_FULL_NAME "hpet@fed00000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_hpet_fed00000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_hpet_fed00000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_hpet_fed00000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_hpet_fed00000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_hpet_fed00000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_hpet_fed00000_ORD 54

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_hpet_fed00000_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	38, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_hpet_fed00000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_hpet_fed00000_EXISTS 1
#define DT_N_INST_0_intel_hpet DT_N_S_soc_S_hpet_fed00000
#define DT_N_NODELABEL_hpet    DT_N_S_soc_S_hpet_fed00000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_hpet_fed00000_REG_NUM 1
#define DT_N_S_soc_S_hpet_fed00000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_REG_IDX_0_VAL_ADDRESS 4275044352 /* 0xfed00000 */
#define DT_N_S_soc_S_hpet_fed00000_REG_IDX_0_VAL_SIZE 1024 /* 0x400 */
#define DT_N_S_soc_S_hpet_fed00000_IRQ_NUM 1
#define DT_N_S_soc_S_hpet_fed00000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_IRQ_IDX_0_VAL_irq 2
#define DT_N_S_soc_S_hpet_fed00000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_IRQ_IDX_0_VAL_sense 0
#define DT_N_S_soc_S_hpet_fed00000_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_IRQ_IDX_0_VAL_priority 4
#define DT_N_S_soc_S_hpet_fed00000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_COMPAT_MATCHES_intel_hpet 1
#define DT_N_S_soc_S_hpet_fed00000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_hpet_fed00000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_hpet_fed00000_P_reg {4275044352 /* 0xfed00000 */, 1024 /* 0x400 */}
#define DT_N_S_soc_S_hpet_fed00000_P_reg_IDX_0 4275044352
#define DT_N_S_soc_S_hpet_fed00000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_reg_IDX_1 1024
#define DT_N_S_soc_S_hpet_fed00000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_hpet_fed00000, reg, 0) \
	fn(DT_N_S_soc_S_hpet_fed00000, reg, 1)
#define DT_N_S_soc_S_hpet_fed00000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_hpet_fed00000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_hpet_fed00000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_hpet_fed00000_P_reg_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_interrupts {2 /* 0x2 */, 0 /* 0x0 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_hpet_fed00000_P_interrupts_IDX_0 2
#define DT_N_S_soc_S_hpet_fed00000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_hpet_fed00000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_interrupts_IDX_2 4
#define DT_N_S_soc_S_hpet_fed00000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_hpet_fed00000, interrupts, 0) \
	fn(DT_N_S_soc_S_hpet_fed00000, interrupts, 1) \
	fn(DT_N_S_soc_S_hpet_fed00000, interrupts, 2)
#define DT_N_S_soc_S_hpet_fed00000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_hpet_fed00000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_hpet_fed00000, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_hpet_fed00000, interrupts, 2, __VA_ARGS__)
#define DT_N_S_soc_S_hpet_fed00000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_status "disabled"
#define DT_N_S_soc_S_hpet_fed00000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_hpet_fed00000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_hpet_fed00000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_hpet_fed00000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_hpet_fed00000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_hpet_fed00000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_hpet_fed00000, status, 0) \
	fn(DT_N_S_soc_S_hpet_fed00000, status, 1) \
	fn(DT_N_S_soc_S_hpet_fed00000, status, 2) \
	fn(DT_N_S_soc_S_hpet_fed00000, status, 3) \
	fn(DT_N_S_soc_S_hpet_fed00000, status, 4) \
	fn(DT_N_S_soc_S_hpet_fed00000, status, 5) \
	fn(DT_N_S_soc_S_hpet_fed00000, status, 6) \
	fn(DT_N_S_soc_S_hpet_fed00000, status, 7)
#define DT_N_S_soc_S_hpet_fed00000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_hpet_fed00000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_hpet_fed00000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_hpet_fed00000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_hpet_fed00000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_hpet_fed00000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_hpet_fed00000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_hpet_fed00000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_hpet_fed00000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_hpet_fed00000_P_status_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_compatible {"intel,hpet"}
#define DT_N_S_soc_S_hpet_fed00000_P_compatible_IDX_0 "intel,hpet"
#define DT_N_S_soc_S_hpet_fed00000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_hpet_fed00000, compatible, 0)
#define DT_N_S_soc_S_hpet_fed00000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_hpet_fed00000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_hpet_fed00000_P_compatible_LEN 1
#define DT_N_S_soc_S_hpet_fed00000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_hpet_fed00000_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_hpet_fed00000_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_hpet_fed00000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_hpet_fed00000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_label "HPET"
#define DT_N_S_soc_S_hpet_fed00000_P_label_STRING_TOKEN HPET
#define DT_N_S_soc_S_hpet_fed00000_P_label_STRING_UPPER_TOKEN HPET
#define DT_N_S_soc_S_hpet_fed00000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_hpet_fed00000, label, 0) \
	fn(DT_N_S_soc_S_hpet_fed00000, label, 1) \
	fn(DT_N_S_soc_S_hpet_fed00000, label, 2) \
	fn(DT_N_S_soc_S_hpet_fed00000, label, 3)
#define DT_N_S_soc_S_hpet_fed00000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_hpet_fed00000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_hpet_fed00000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_hpet_fed00000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_hpet_fed00000, label, 3, __VA_ARGS__)
#define DT_N_S_soc_S_hpet_fed00000_P_label_EXISTS 1
#define DT_N_S_soc_S_hpet_fed00000_P_wakeup_source 0
#define DT_N_S_soc_S_hpet_fed00000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/uart@2f8
 *
 * Node identifier: DT_N_S_soc_S_uart_2f8
 *
 * Binding (compatible = ns16550):
 *   $ZEPHYR_BASE/dts/bindings/serial/ns16550.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_2f8_PATH "/soc/uart@2f8"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_2f8_FULL_NAME "uart@2f8"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_2f8_PARENT DT_N_S_soc
#define DT_N_S_soc_S_uart_2f8_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_2f8_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_2f8_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_2f8_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_2f8_ORD 55

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_2f8_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	38, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_2f8_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_2f8_EXISTS 1
#define DT_N_ALIAS_uart_1        DT_N_S_soc_S_uart_2f8
#define DT_N_INST_1_ns16550      DT_N_S_soc_S_uart_2f8
#define DT_N_NODELABEL_uart1_leg DT_N_S_soc_S_uart_2f8

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_2f8_REG_NUM 1
#define DT_N_S_soc_S_uart_2f8_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_REG_IDX_0_VAL_ADDRESS 760 /* 0x2f8 */
#define DT_N_S_soc_S_uart_2f8_REG_IDX_0_VAL_SIZE 256 /* 0x100 */
#define DT_N_S_soc_S_uart_2f8_IRQ_NUM 1
#define DT_N_S_soc_S_uart_2f8_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_IRQ_IDX_0_VAL_irq 3
#define DT_N_S_soc_S_uart_2f8_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_IRQ_IDX_0_VAL_sense 256
#define DT_N_S_soc_S_uart_2f8_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_uart_2f8_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_COMPAT_MATCHES_ns16550 1
#define DT_N_S_soc_S_uart_2f8_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_2f8_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_2f8_P_reg {760 /* 0x2f8 */, 256 /* 0x100 */}
#define DT_N_S_soc_S_uart_2f8_P_reg_IDX_0 760
#define DT_N_S_soc_S_uart_2f8_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_reg_IDX_1 256
#define DT_N_S_soc_S_uart_2f8_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_2f8, reg, 0) \
	fn(DT_N_S_soc_S_uart_2f8, reg, 1)
#define DT_N_S_soc_S_uart_2f8_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_2f8, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_2f8, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_clock_frequency 1843200
#define DT_N_S_soc_S_uart_2f8_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_current_speed 115200
#define DT_N_S_soc_S_uart_2f8_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_label "UART_1_LEG"
#define DT_N_S_soc_S_uart_2f8_P_label_STRING_TOKEN UART_1_LEG
#define DT_N_S_soc_S_uart_2f8_P_label_STRING_UPPER_TOKEN UART_1_LEG
#define DT_N_S_soc_S_uart_2f8_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_2f8, label, 0) \
	fn(DT_N_S_soc_S_uart_2f8, label, 1) \
	fn(DT_N_S_soc_S_uart_2f8, label, 2) \
	fn(DT_N_S_soc_S_uart_2f8, label, 3) \
	fn(DT_N_S_soc_S_uart_2f8, label, 4) \
	fn(DT_N_S_soc_S_uart_2f8, label, 5) \
	fn(DT_N_S_soc_S_uart_2f8, label, 6) \
	fn(DT_N_S_soc_S_uart_2f8, label, 7) \
	fn(DT_N_S_soc_S_uart_2f8, label, 8) \
	fn(DT_N_S_soc_S_uart_2f8, label, 9)
#define DT_N_S_soc_S_uart_2f8_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_2f8, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_2f8, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_2f8, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_2f8, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_2f8, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_2f8, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_2f8, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_2f8, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_2f8, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_2f8, label, 9, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_P_label_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_2f8_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_status "okay"
#define DT_N_S_soc_S_uart_2f8_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_uart_2f8_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_2f8_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_uart_2f8_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_uart_2f8_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_2f8_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_2f8, status, 0) \
	fn(DT_N_S_soc_S_uart_2f8, status, 1) \
	fn(DT_N_S_soc_S_uart_2f8, status, 2) \
	fn(DT_N_S_soc_S_uart_2f8, status, 3)
#define DT_N_S_soc_S_uart_2f8_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_2f8, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_2f8, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_2f8, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_2f8, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_compatible {"ns16550"}
#define DT_N_S_soc_S_uart_2f8_P_compatible_IDX_0 "ns16550"
#define DT_N_S_soc_S_uart_2f8_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_2f8, compatible, 0)
#define DT_N_S_soc_S_uart_2f8_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_2f8, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_2f8_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_interrupts {3 /* 0x3 */, 256 /* 0x100 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_uart_2f8_P_interrupts_IDX_0 3
#define DT_N_S_soc_S_uart_2f8_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_interrupts_IDX_1 256
#define DT_N_S_soc_S_uart_2f8_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_interrupts_IDX_2 3
#define DT_N_S_soc_S_uart_2f8_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_2f8, interrupts, 0) \
	fn(DT_N_S_soc_S_uart_2f8, interrupts, 1) \
	fn(DT_N_S_soc_S_uart_2f8, interrupts, 2)
#define DT_N_S_soc_S_uart_2f8_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_2f8, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_2f8, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_2f8, interrupts, 2, __VA_ARGS__)
#define DT_N_S_soc_S_uart_2f8_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_uart_2f8_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_uart_2f8_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_uart_2f8_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_uart_2f8_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_uart_2f8_P_wakeup_source 0
#define DT_N_S_soc_S_uart_2f8_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/uart@3f8
 *
 * Node identifier: DT_N_S_soc_S_uart_3f8
 *
 * Binding (compatible = ns16550):
 *   $ZEPHYR_BASE/dts/bindings/serial/ns16550.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_3f8_PATH "/soc/uart@3f8"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_3f8_FULL_NAME "uart@3f8"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_3f8_PARENT DT_N_S_soc
#define DT_N_S_soc_S_uart_3f8_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_3f8_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_3f8_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_3f8_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_3f8_ORD 56

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_3f8_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	38, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_3f8_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_3f8_EXISTS 1
#define DT_N_ALIAS_uart_0        DT_N_S_soc_S_uart_3f8
#define DT_N_INST_0_ns16550      DT_N_S_soc_S_uart_3f8
#define DT_N_NODELABEL_uart0_leg DT_N_S_soc_S_uart_3f8

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_3f8_REG_NUM 1
#define DT_N_S_soc_S_uart_3f8_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_REG_IDX_0_VAL_ADDRESS 1016 /* 0x3f8 */
#define DT_N_S_soc_S_uart_3f8_REG_IDX_0_VAL_SIZE 256 /* 0x100 */
#define DT_N_S_soc_S_uart_3f8_IRQ_NUM 1
#define DT_N_S_soc_S_uart_3f8_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_IRQ_IDX_0_VAL_irq 4
#define DT_N_S_soc_S_uart_3f8_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_IRQ_IDX_0_VAL_sense 256
#define DT_N_S_soc_S_uart_3f8_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_uart_3f8_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_COMPAT_MATCHES_ns16550 1
#define DT_N_S_soc_S_uart_3f8_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_3f8_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_3f8_P_reg {1016 /* 0x3f8 */, 256 /* 0x100 */}
#define DT_N_S_soc_S_uart_3f8_P_reg_IDX_0 1016
#define DT_N_S_soc_S_uart_3f8_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_reg_IDX_1 256
#define DT_N_S_soc_S_uart_3f8_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3f8, reg, 0) \
	fn(DT_N_S_soc_S_uart_3f8, reg, 1)
#define DT_N_S_soc_S_uart_3f8_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3f8, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3f8, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3f8_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_clock_frequency 1843200
#define DT_N_S_soc_S_uart_3f8_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_current_speed 115200
#define DT_N_S_soc_S_uart_3f8_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_label "UART_0_LEG"
#define DT_N_S_soc_S_uart_3f8_P_label_STRING_TOKEN UART_0_LEG
#define DT_N_S_soc_S_uart_3f8_P_label_STRING_UPPER_TOKEN UART_0_LEG
#define DT_N_S_soc_S_uart_3f8_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3f8, label, 0) \
	fn(DT_N_S_soc_S_uart_3f8, label, 1) \
	fn(DT_N_S_soc_S_uart_3f8, label, 2) \
	fn(DT_N_S_soc_S_uart_3f8, label, 3) \
	fn(DT_N_S_soc_S_uart_3f8, label, 4) \
	fn(DT_N_S_soc_S_uart_3f8, label, 5) \
	fn(DT_N_S_soc_S_uart_3f8, label, 6) \
	fn(DT_N_S_soc_S_uart_3f8, label, 7) \
	fn(DT_N_S_soc_S_uart_3f8, label, 8) \
	fn(DT_N_S_soc_S_uart_3f8, label, 9)
#define DT_N_S_soc_S_uart_3f8_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3f8, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3f8, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3f8, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3f8, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3f8, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3f8, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3f8, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3f8, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3f8, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3f8, label, 9, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3f8_P_label_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_3f8_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_status "okay"
#define DT_N_S_soc_S_uart_3f8_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_uart_3f8_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_3f8_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_uart_3f8_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_uart_3f8_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_3f8_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3f8, status, 0) \
	fn(DT_N_S_soc_S_uart_3f8, status, 1) \
	fn(DT_N_S_soc_S_uart_3f8, status, 2) \
	fn(DT_N_S_soc_S_uart_3f8, status, 3)
#define DT_N_S_soc_S_uart_3f8_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3f8, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3f8, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3f8, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3f8, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3f8_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_compatible {"ns16550"}
#define DT_N_S_soc_S_uart_3f8_P_compatible_IDX_0 "ns16550"
#define DT_N_S_soc_S_uart_3f8_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3f8, compatible, 0)
#define DT_N_S_soc_S_uart_3f8_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3f8, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3f8_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_3f8_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_interrupts {4 /* 0x4 */, 256 /* 0x100 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_uart_3f8_P_interrupts_IDX_0 4
#define DT_N_S_soc_S_uart_3f8_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_interrupts_IDX_1 256
#define DT_N_S_soc_S_uart_3f8_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_interrupts_IDX_2 3
#define DT_N_S_soc_S_uart_3f8_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_3f8, interrupts, 0) \
	fn(DT_N_S_soc_S_uart_3f8, interrupts, 1) \
	fn(DT_N_S_soc_S_uart_3f8, interrupts, 2)
#define DT_N_S_soc_S_uart_3f8_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_3f8, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3f8, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_3f8, interrupts, 2, __VA_ARGS__)
#define DT_N_S_soc_S_uart_3f8_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_uart_3f8_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_uart_3f8_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_uart_3f8_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_uart_3f8_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_uart_3f8_P_wakeup_source 0
#define DT_N_S_soc_S_uart_3f8_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/uart@fe040000
 *
 * Node identifier: DT_N_S_soc_S_uart_fe040000
 *
 * Binding (compatible = ns16550):
 *   $ZEPHYR_BASE/dts/bindings/serial/ns16550.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_fe040000_PATH "/soc/uart@fe040000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_fe040000_FULL_NAME "uart@fe040000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_fe040000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_uart_fe040000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_fe040000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_fe040000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_fe040000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_fe040000_ORD 57

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_fe040000_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	38, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_fe040000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_fe040000_EXISTS 1
#define DT_N_INST_11_ns16550       DT_N_S_soc_S_uart_fe040000
#define DT_N_NODELABEL_uart1_fixed DT_N_S_soc_S_uart_fe040000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_fe040000_REG_NUM 1
#define DT_N_S_soc_S_uart_fe040000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_REG_IDX_0_VAL_ADDRESS 4261675008 /* 0xfe040000 */
#define DT_N_S_soc_S_uart_fe040000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_uart_fe040000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_fe040000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_IRQ_IDX_0_VAL_irq 3
#define DT_N_S_soc_S_uart_fe040000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_soc_S_uart_fe040000_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_uart_fe040000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_COMPAT_MATCHES_ns16550 1
#define DT_N_S_soc_S_uart_fe040000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_fe040000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_fe040000_P_reg {4261675008 /* 0xfe040000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_uart_fe040000_P_reg_IDX_0 4261675008
#define DT_N_S_soc_S_uart_fe040000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_uart_fe040000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_fe040000, reg, 0) \
	fn(DT_N_S_soc_S_uart_fe040000, reg, 1)
#define DT_N_S_soc_S_uart_fe040000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_fe040000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe040000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_fe040000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_P_reg_shift 0
#define DT_N_S_soc_S_uart_fe040000_P_reg_shift_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_P_clock_frequency 1843200
#define DT_N_S_soc_S_uart_fe040000_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_P_current_speed 115200
#define DT_N_S_soc_S_uart_fe040000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_P_label "UART_1_FIXED"
#define DT_N_S_soc_S_uart_fe040000_P_label_STRING_TOKEN UART_1_FIXED
#define DT_N_S_soc_S_uart_fe040000_P_label_STRING_UPPER_TOKEN UART_1_FIXED
#define DT_N_S_soc_S_uart_fe040000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_fe040000, label, 0) \
	fn(DT_N_S_soc_S_uart_fe040000, label, 1) \
	fn(DT_N_S_soc_S_uart_fe040000, label, 2) \
	fn(DT_N_S_soc_S_uart_fe040000, label, 3) \
	fn(DT_N_S_soc_S_uart_fe040000, label, 4) \
	fn(DT_N_S_soc_S_uart_fe040000, label, 5) \
	fn(DT_N_S_soc_S_uart_fe040000, label, 6) \
	fn(DT_N_S_soc_S_uart_fe040000, label, 7) \
	fn(DT_N_S_soc_S_uart_fe040000, label, 8) \
	fn(DT_N_S_soc_S_uart_fe040000, label, 9) \
	fn(DT_N_S_soc_S_uart_fe040000, label, 10) \
	fn(DT_N_S_soc_S_uart_fe040000, label, 11)
#define DT_N_S_soc_S_uart_fe040000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_fe040000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe040000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe040000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe040000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe040000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe040000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe040000, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe040000, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe040000, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe040000, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe040000, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe040000, label, 11, __VA_ARGS__)
#define DT_N_S_soc_S_uart_fe040000_P_label_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_fe040000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_P_status "disabled"
#define DT_N_S_soc_S_uart_fe040000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_uart_fe040000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_fe040000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_uart_fe040000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_uart_fe040000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_fe040000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_fe040000, status, 0) \
	fn(DT_N_S_soc_S_uart_fe040000, status, 1) \
	fn(DT_N_S_soc_S_uart_fe040000, status, 2) \
	fn(DT_N_S_soc_S_uart_fe040000, status, 3) \
	fn(DT_N_S_soc_S_uart_fe040000, status, 4) \
	fn(DT_N_S_soc_S_uart_fe040000, status, 5) \
	fn(DT_N_S_soc_S_uart_fe040000, status, 6) \
	fn(DT_N_S_soc_S_uart_fe040000, status, 7)
#define DT_N_S_soc_S_uart_fe040000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_fe040000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe040000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe040000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe040000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe040000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe040000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe040000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe040000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_uart_fe040000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_P_compatible {"ns16550"}
#define DT_N_S_soc_S_uart_fe040000_P_compatible_IDX_0 "ns16550"
#define DT_N_S_soc_S_uart_fe040000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_fe040000, compatible, 0)
#define DT_N_S_soc_S_uart_fe040000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_fe040000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_fe040000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_fe040000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_P_interrupts {3 /* 0x3 */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_uart_fe040000_P_interrupts_IDX_0 3
#define DT_N_S_soc_S_uart_fe040000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_P_interrupts_IDX_1 41216
#define DT_N_S_soc_S_uart_fe040000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_P_interrupts_IDX_2 3
#define DT_N_S_soc_S_uart_fe040000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_fe040000, interrupts, 0) \
	fn(DT_N_S_soc_S_uart_fe040000, interrupts, 1) \
	fn(DT_N_S_soc_S_uart_fe040000, interrupts, 2)
#define DT_N_S_soc_S_uart_fe040000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_fe040000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe040000, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe040000, interrupts, 2, __VA_ARGS__)
#define DT_N_S_soc_S_uart_fe040000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_uart_fe040000_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_uart_fe040000_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_uart_fe040000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_uart_fe040000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_uart_fe040000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_fe040000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/uart@fe042000
 *
 * Node identifier: DT_N_S_soc_S_uart_fe042000
 *
 * Binding (compatible = ns16550):
 *   $ZEPHYR_BASE/dts/bindings/serial/ns16550.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_fe042000_PATH "/soc/uart@fe042000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_fe042000_FULL_NAME "uart@fe042000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_fe042000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_uart_fe042000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_fe042000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_fe042000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_fe042000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_fe042000_ORD 58

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_fe042000_REQUIRES_ORDS \
	7, /* /ioapic@fec00000 */ \
	38, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_fe042000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_fe042000_EXISTS 1
#define DT_N_INST_12_ns16550       DT_N_S_soc_S_uart_fe042000
#define DT_N_NODELABEL_uart2_fixed DT_N_S_soc_S_uart_fe042000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_fe042000_REG_NUM 1
#define DT_N_S_soc_S_uart_fe042000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_REG_IDX_0_VAL_ADDRESS 4261683200 /* 0xfe042000 */
#define DT_N_S_soc_S_uart_fe042000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_uart_fe042000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_fe042000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_IRQ_IDX_0_VAL_irq 4
#define DT_N_S_soc_S_uart_fe042000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_IRQ_IDX_0_VAL_sense 41216
#define DT_N_S_soc_S_uart_fe042000_IRQ_IDX_0_VAL_sense_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_uart_fe042000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_COMPAT_MATCHES_ns16550 1
#define DT_N_S_soc_S_uart_fe042000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_fe042000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_fe042000_P_reg {4261683200 /* 0xfe042000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_uart_fe042000_P_reg_IDX_0 4261683200
#define DT_N_S_soc_S_uart_fe042000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_uart_fe042000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_fe042000, reg, 0) \
	fn(DT_N_S_soc_S_uart_fe042000, reg, 1)
#define DT_N_S_soc_S_uart_fe042000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_fe042000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe042000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_fe042000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_P_reg_shift 0
#define DT_N_S_soc_S_uart_fe042000_P_reg_shift_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_P_clock_frequency 1843200
#define DT_N_S_soc_S_uart_fe042000_P_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_P_current_speed 115200
#define DT_N_S_soc_S_uart_fe042000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_P_label "UART_2_FIXED"
#define DT_N_S_soc_S_uart_fe042000_P_label_STRING_TOKEN UART_2_FIXED
#define DT_N_S_soc_S_uart_fe042000_P_label_STRING_UPPER_TOKEN UART_2_FIXED
#define DT_N_S_soc_S_uart_fe042000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_fe042000, label, 0) \
	fn(DT_N_S_soc_S_uart_fe042000, label, 1) \
	fn(DT_N_S_soc_S_uart_fe042000, label, 2) \
	fn(DT_N_S_soc_S_uart_fe042000, label, 3) \
	fn(DT_N_S_soc_S_uart_fe042000, label, 4) \
	fn(DT_N_S_soc_S_uart_fe042000, label, 5) \
	fn(DT_N_S_soc_S_uart_fe042000, label, 6) \
	fn(DT_N_S_soc_S_uart_fe042000, label, 7) \
	fn(DT_N_S_soc_S_uart_fe042000, label, 8) \
	fn(DT_N_S_soc_S_uart_fe042000, label, 9) \
	fn(DT_N_S_soc_S_uart_fe042000, label, 10) \
	fn(DT_N_S_soc_S_uart_fe042000, label, 11)
#define DT_N_S_soc_S_uart_fe042000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_fe042000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe042000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe042000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe042000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe042000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe042000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe042000, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe042000, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe042000, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe042000, label, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe042000, label, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe042000, label, 11, __VA_ARGS__)
#define DT_N_S_soc_S_uart_fe042000_P_label_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_fe042000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_P_status "disabled"
#define DT_N_S_soc_S_uart_fe042000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_uart_fe042000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_fe042000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_uart_fe042000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_uart_fe042000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_uart_fe042000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_fe042000, status, 0) \
	fn(DT_N_S_soc_S_uart_fe042000, status, 1) \
	fn(DT_N_S_soc_S_uart_fe042000, status, 2) \
	fn(DT_N_S_soc_S_uart_fe042000, status, 3) \
	fn(DT_N_S_soc_S_uart_fe042000, status, 4) \
	fn(DT_N_S_soc_S_uart_fe042000, status, 5) \
	fn(DT_N_S_soc_S_uart_fe042000, status, 6) \
	fn(DT_N_S_soc_S_uart_fe042000, status, 7)
#define DT_N_S_soc_S_uart_fe042000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_fe042000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe042000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe042000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe042000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe042000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe042000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe042000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe042000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_uart_fe042000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_P_compatible {"ns16550"}
#define DT_N_S_soc_S_uart_fe042000_P_compatible_IDX_0 "ns16550"
#define DT_N_S_soc_S_uart_fe042000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_fe042000, compatible, 0)
#define DT_N_S_soc_S_uart_fe042000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_fe042000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_fe042000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_fe042000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_P_interrupts {4 /* 0x4 */, 41216 /* 0xa100 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_uart_fe042000_P_interrupts_IDX_0 4
#define DT_N_S_soc_S_uart_fe042000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_P_interrupts_IDX_1 41216
#define DT_N_S_soc_S_uart_fe042000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_P_interrupts_IDX_2 3
#define DT_N_S_soc_S_uart_fe042000_P_interrupts_IDX_2_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_fe042000, interrupts, 0) \
	fn(DT_N_S_soc_S_uart_fe042000, interrupts, 1) \
	fn(DT_N_S_soc_S_uart_fe042000, interrupts, 2)
#define DT_N_S_soc_S_uart_fe042000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_fe042000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe042000, interrupts, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_fe042000, interrupts, 2, __VA_ARGS__)
#define DT_N_S_soc_S_uart_fe042000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_P_interrupt_parent DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_uart_fe042000_P_interrupt_parent_IDX_0 DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_uart_fe042000_P_interrupt_parent_IDX_0_PH DT_N_S_ioapic_fec00000
#define DT_N_S_soc_S_uart_fe042000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_uart_fe042000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_uart_fe042000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_fe042000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/vtd@fed91000
 *
 * Node identifier: DT_N_S_soc_S_vtd_fed91000
 *
 * Binding (compatible = intel,vt-d):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/intel,vt-d.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_vtd_fed91000_PATH "/soc/vtd@fed91000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_vtd_fed91000_FULL_NAME "vtd@fed91000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_vtd_fed91000_PARENT DT_N_S_soc
#define DT_N_S_soc_S_vtd_fed91000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_vtd_fed91000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_vtd_fed91000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_vtd_fed91000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_vtd_fed91000_ORD 59

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_vtd_fed91000_REQUIRES_ORDS \
	38, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_vtd_fed91000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_vtd_fed91000_EXISTS 1
#define DT_N_INST_0_intel_vt_d DT_N_S_soc_S_vtd_fed91000
#define DT_N_NODELABEL_vtd     DT_N_S_soc_S_vtd_fed91000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_vtd_fed91000_REG_NUM 1
#define DT_N_S_soc_S_vtd_fed91000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_vtd_fed91000_REG_IDX_0_VAL_ADDRESS 4275638272 /* 0xfed91000 */
#define DT_N_S_soc_S_vtd_fed91000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_vtd_fed91000_IRQ_NUM 0
#define DT_N_S_soc_S_vtd_fed91000_COMPAT_MATCHES_intel_vt_d 1
#define DT_N_S_soc_S_vtd_fed91000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_vtd_fed91000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_vtd_fed91000_P_reg {4275638272 /* 0xfed91000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_vtd_fed91000_P_reg_IDX_0 4275638272
#define DT_N_S_soc_S_vtd_fed91000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_vtd_fed91000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_vtd_fed91000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_vtd_fed91000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_vtd_fed91000, reg, 0) \
	fn(DT_N_S_soc_S_vtd_fed91000, reg, 1)
#define DT_N_S_soc_S_vtd_fed91000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_vtd_fed91000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_vtd_fed91000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_vtd_fed91000_P_reg_EXISTS 1
#define DT_N_S_soc_S_vtd_fed91000_P_label "VTD_0"
#define DT_N_S_soc_S_vtd_fed91000_P_label_STRING_TOKEN VTD_0
#define DT_N_S_soc_S_vtd_fed91000_P_label_STRING_UPPER_TOKEN VTD_0
#define DT_N_S_soc_S_vtd_fed91000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_vtd_fed91000, label, 0) \
	fn(DT_N_S_soc_S_vtd_fed91000, label, 1) \
	fn(DT_N_S_soc_S_vtd_fed91000, label, 2) \
	fn(DT_N_S_soc_S_vtd_fed91000, label, 3) \
	fn(DT_N_S_soc_S_vtd_fed91000, label, 4)
#define DT_N_S_soc_S_vtd_fed91000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_vtd_fed91000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_vtd_fed91000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_vtd_fed91000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_vtd_fed91000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_vtd_fed91000, label, 4, __VA_ARGS__)
#define DT_N_S_soc_S_vtd_fed91000_P_label_EXISTS 1
#define DT_N_S_soc_S_vtd_fed91000_P_status "okay"
#define DT_N_S_soc_S_vtd_fed91000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_vtd_fed91000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_vtd_fed91000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_vtd_fed91000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_vtd_fed91000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_vtd_fed91000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_vtd_fed91000, status, 0) \
	fn(DT_N_S_soc_S_vtd_fed91000, status, 1) \
	fn(DT_N_S_soc_S_vtd_fed91000, status, 2) \
	fn(DT_N_S_soc_S_vtd_fed91000, status, 3)
#define DT_N_S_soc_S_vtd_fed91000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_vtd_fed91000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_vtd_fed91000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_vtd_fed91000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_vtd_fed91000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_vtd_fed91000_P_status_EXISTS 1
#define DT_N_S_soc_S_vtd_fed91000_P_compatible {"intel,vt-d"}
#define DT_N_S_soc_S_vtd_fed91000_P_compatible_IDX_0 "intel,vt-d"
#define DT_N_S_soc_S_vtd_fed91000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_vtd_fed91000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_vtd_fed91000, compatible, 0)
#define DT_N_S_soc_S_vtd_fed91000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_vtd_fed91000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_vtd_fed91000_P_compatible_LEN 1
#define DT_N_S_soc_S_vtd_fed91000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_vtd_fed91000_P_wakeup_source 0
#define DT_N_S_soc_S_vtd_fed91000_P_wakeup_source_EXISTS 1

/*
 * Chosen nodes
 */
#define DT_CHOSEN_zephyr_sram              DT_N_S_memory_0
#define DT_CHOSEN_zephyr_sram_EXISTS       1
#define DT_CHOSEN_zephyr_console           DT_N_S_soc_S_uart_3f8
#define DT_CHOSEN_zephyr_console_EXISTS    1
#define DT_CHOSEN_zephyr_shell_uart        DT_N_S_soc_S_uart_3f8
#define DT_CHOSEN_zephyr_shell_uart_EXISTS 1

/*
 * Macros for compatibles with status "okay" nodes
 */
#define DT_COMPAT_HAS_OKAY_acrn_ehl_seco 1
#define DT_COMPAT_HAS_OKAY_intel_elkhart_lake 1
#define DT_COMPAT_HAS_OKAY_intel_ioapic 1
#define DT_COMPAT_HAS_OKAY_intel_pcie 1
#define DT_COMPAT_HAS_OKAY_ptm_root 1
#define DT_COMPAT_HAS_OKAY_qemu_ivshmem 1
#define DT_COMPAT_HAS_OKAY_simple_bus 1
#define DT_COMPAT_HAS_OKAY_intel_vt_d 1
#define DT_COMPAT_HAS_OKAY_ns16550 1
#define DT_COMPAT_HAS_OKAY_intel_gpio 1

/*
 * Macros for status "okay" instances of each compatible
 */
#define DT_N_INST_acrn_ehl_seco_NUM_OKAY 1
#define DT_N_INST_intel_elkhart_lake_NUM_OKAY 1
#define DT_N_INST_intel_ioapic_NUM_OKAY 1
#define DT_N_INST_intel_pcie_NUM_OKAY 1
#define DT_N_INST_ptm_root_NUM_OKAY 1
#define DT_N_INST_qemu_ivshmem_NUM_OKAY 4
#define DT_N_INST_simple_bus_NUM_OKAY 1
#define DT_N_INST_intel_vt_d_NUM_OKAY 1
#define DT_N_INST_ns16550_NUM_OKAY 2
#define DT_N_INST_intel_gpio_NUM_OKAY 15
#define DT_FOREACH_OKAY_acrn_ehl_seco(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_acrn_ehl_seco(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_acrn_ehl_seco(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_acrn_ehl_seco(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_intel_elkhart_lake(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_FOREACH_OKAY_VARGS_intel_elkhart_lake(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_intel_elkhart_lake(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_intel_elkhart_lake(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_intel_ioapic(fn) fn(DT_N_S_ioapic_fec00000)
#define DT_FOREACH_OKAY_VARGS_intel_ioapic(fn, ...) fn(DT_N_S_ioapic_fec00000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_intel_ioapic(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_intel_ioapic(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_intel_pcie(fn) fn(DT_N_S_pcie0)
#define DT_FOREACH_OKAY_VARGS_intel_pcie(fn, ...) fn(DT_N_S_pcie0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_intel_pcie(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_intel_pcie(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_ptm_root(fn) fn(DT_N_S_pcie0_S_ptm_root_e000)
#define DT_FOREACH_OKAY_VARGS_ptm_root(fn, ...) fn(DT_N_S_pcie0_S_ptm_root_e000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_ptm_root(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_ptm_root(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_qemu_ivshmem(fn) fn(DT_N_S_pcie0_S_ivshmem_800) fn(DT_N_S_pcie0_S_ivshmem_1000) fn(DT_N_S_pcie0_S_ivshmem_1800) fn(DT_N_S_pcie0_S_ivshmem_2000)
#define DT_FOREACH_OKAY_VARGS_qemu_ivshmem(fn, ...) fn(DT_N_S_pcie0_S_ivshmem_800, __VA_ARGS__) fn(DT_N_S_pcie0_S_ivshmem_1000, __VA_ARGS__) fn(DT_N_S_pcie0_S_ivshmem_1800, __VA_ARGS__) fn(DT_N_S_pcie0_S_ivshmem_2000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_qemu_ivshmem(fn) fn(0) fn(1) fn(2) fn(3)
#define DT_FOREACH_OKAY_INST_VARGS_qemu_ivshmem(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__) fn(2, __VA_ARGS__) fn(3, __VA_ARGS__)
#define DT_FOREACH_OKAY_simple_bus(fn) fn(DT_N_S_soc)
#define DT_FOREACH_OKAY_VARGS_simple_bus(fn, ...) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_simple_bus(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_simple_bus(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_intel_vt_d(fn) fn(DT_N_S_soc_S_vtd_fed91000)
#define DT_FOREACH_OKAY_VARGS_intel_vt_d(fn, ...) fn(DT_N_S_soc_S_vtd_fed91000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_intel_vt_d(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_intel_vt_d(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_ns16550(fn) fn(DT_N_S_soc_S_uart_3f8) fn(DT_N_S_soc_S_uart_2f8)
#define DT_FOREACH_OKAY_VARGS_ns16550(fn, ...) fn(DT_N_S_soc_S_uart_3f8, __VA_ARGS__) fn(DT_N_S_soc_S_uart_2f8, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_ns16550(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_ns16550(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_intel_gpio(fn) fn(DT_N_S_soc_S_gpio_fd6e0700) fn(DT_N_S_soc_S_gpio_fd6e08a0) fn(DT_N_S_soc_S_gpio_fd6e09a0) fn(DT_N_S_soc_S_gpio_fd6d0700) fn(DT_N_S_soc_S_gpio_fd6d0800) fn(DT_N_S_soc_S_gpio_fd6d0980) fn(DT_N_S_soc_S_gpio_fd6d0ad0) fn(DT_N_S_soc_S_gpio_fd6d0c50) fn(DT_N_S_soc_S_gpio_fd6b0810) fn(DT_N_S_soc_S_gpio_fd6b0830) fn(DT_N_S_soc_S_gpio_fd6b09b0) fn(DT_N_S_soc_S_gpio_fd6a0700) fn(DT_N_S_soc_S_gpio_fd6a0880) fn(DT_N_S_soc_S_gpio_fd6a0a70) fn(DT_N_S_soc_S_gpio_fd690700)
#define DT_FOREACH_OKAY_VARGS_intel_gpio(fn, ...) fn(DT_N_S_soc_S_gpio_fd6e0700, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6e08a0, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6e09a0, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6d0700, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6d0800, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6d0980, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6d0ad0, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6d0c50, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6b0810, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6b0830, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6b09b0, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6a0700, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6a0880, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd6a0a70, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_fd690700, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_intel_gpio(fn) fn(0) fn(1) fn(2) fn(3) fn(4) fn(5) fn(6) fn(7) fn(8) fn(9) fn(10) fn(11) fn(12) fn(13) fn(14)
#define DT_FOREACH_OKAY_INST_VARGS_intel_gpio(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__) fn(2, __VA_ARGS__) fn(3, __VA_ARGS__) fn(4, __VA_ARGS__) fn(5, __VA_ARGS__) fn(6, __VA_ARGS__) fn(7, __VA_ARGS__) fn(8, __VA_ARGS__) fn(9, __VA_ARGS__) fn(10, __VA_ARGS__) fn(11, __VA_ARGS__) fn(12, __VA_ARGS__) fn(13, __VA_ARGS__) fn(14, __VA_ARGS__)

/*
 * Bus information for status "okay" nodes of each compatible
 */
#define DT_COMPAT_ptm_root_BUS_pcie 1
#define DT_COMPAT_qemu_ivshmem_BUS_pcie 1
